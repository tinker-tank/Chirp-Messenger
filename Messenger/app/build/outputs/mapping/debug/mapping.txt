android.support.annotation.Keep -> android.support.annotation.Keep:
android.support.v4.app.ActivityCompat -> android.support.v4.a.a:
    void finishAffinity(android.app.Activity) -> a
    void finishAfterTransition(android.app.Activity) -> b
    void requestPermissions(android.app.Activity,java.lang.String[],int) -> a
android.support.v4.app.ActivityCompat$1 -> android.support.v4.a.b:
    java.lang.String[] val$permissions -> a
    android.app.Activity val$activity -> b
    int val$requestCode -> c
    void <init>(java.lang.String[],android.app.Activity,int) -> <init>
    void run() -> run
android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback -> android.support.v4.a.c:
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
android.support.v4.app.ActivityCompat21 -> android.support.v4.a.d:
    void finishAfterTransition(android.app.Activity) -> a
android.support.v4.app.ActivityCompatApi23 -> android.support.v4.a.e:
    void requestPermissions(android.app.Activity,java.lang.String[],int) -> a
android.support.v4.app.ActivityCompatApi23$RequestPermissionsRequestCodeValidator -> android.support.v4.a.f:
    void validateRequestPermissionsRequestCode(int) -> a
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.a.g:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.ActivityCompatJB -> android.support.v4.a.h:
    void finishAffinity(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.a.i:
    boolean SUPPORTS_TRANSITIONS -> a
    android.support.v4.app.FragmentManagerImpl mManager -> b
    android.support.v4.app.BackStackRecord$Op mHead -> c
    android.support.v4.app.BackStackRecord$Op mTail -> d
    int mNumOp -> e
    int mEnterAnim -> f
    int mExitAnim -> g
    int mPopEnterAnim -> h
    int mPopExitAnim -> i
    int mTransition -> j
    int mTransitionStyle -> k
    boolean mAddToBackStack -> l
    boolean mAllowAddToBackStack -> m
    java.lang.String mName -> n
    boolean mCommitted -> o
    int mIndex -> p
    int mBreadCrumbTitleRes -> q
    java.lang.CharSequence mBreadCrumbTitleText -> r
    int mBreadCrumbShortTitleRes -> s
    java.lang.CharSequence mBreadCrumbShortTitleText -> t
    java.util.ArrayList mSharedElementSourceNames -> u
    java.util.ArrayList mSharedElementTargetNames -> v
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void <init>(android.support.v4.app.FragmentManagerImpl) -> <init>
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    void bumpBackStackNesting(int) -> a
    void run() -> run
    void setFirstOut(android.util.SparseArray,android.support.v4.app.Fragment) -> a
    void setLastIn(android.util.SparseArray,android.support.v4.app.Fragment) -> b
    void calculateFragments(android.util.SparseArray,android.util.SparseArray) -> b
    void calculateBackFragments(android.util.SparseArray,android.util.SparseArray) -> a
    android.support.v4.app.BackStackRecord$TransitionState popFromBackStack(boolean,android.support.v4.app.BackStackRecord$TransitionState,android.util.SparseArray,android.util.SparseArray) -> a
    java.lang.String getName() -> a
    android.support.v4.app.BackStackRecord$TransitionState beginTransition(android.util.SparseArray,android.util.SparseArray,boolean) -> a
    java.lang.Object getEnterTransition(android.support.v4.app.Fragment,boolean) -> a
    java.lang.Object getExitTransition(android.support.v4.app.Fragment,boolean) -> b
    java.lang.Object getSharedElementTransition(android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean) -> a
    java.lang.Object captureExitingViews(java.lang.Object,android.support.v4.app.Fragment,java.util.ArrayList,android.support.v4.util.ArrayMap,android.view.View) -> a
    android.support.v4.util.ArrayMap remapSharedElements(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,boolean) -> a
    boolean configureTransitions(int,android.support.v4.app.BackStackRecord$TransitionState,boolean,android.util.SparseArray,android.util.SparseArray) -> a
    void prepareSharedElementTransition(android.support.v4.app.BackStackRecord$TransitionState,android.view.View,java.lang.Object,android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean,java.util.ArrayList) -> a
    void callSharedElementEnd(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean,android.support.v4.util.ArrayMap) -> a
    void setEpicenterIn(android.support.v4.util.ArrayMap,android.support.v4.app.BackStackRecord$TransitionState) -> a
    android.support.v4.util.ArrayMap mapSharedElementsIn(android.support.v4.app.BackStackRecord$TransitionState,boolean,android.support.v4.app.Fragment) -> a
    android.support.v4.util.ArrayMap remapNames(java.util.ArrayList,java.util.ArrayList,android.support.v4.util.ArrayMap) -> a
    android.support.v4.util.ArrayMap mapEnteringSharedElements(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,boolean) -> b
    void excludeHiddenFragmentsAfterEnter(android.view.View,android.support.v4.app.BackStackRecord$TransitionState,int,java.lang.Object) -> a
    void excludeHiddenFragments(android.support.v4.app.BackStackRecord$TransitionState,int,java.lang.Object) -> a
    void setNameOverride(android.support.v4.util.ArrayMap,java.lang.String,java.lang.String) -> a
    void setNameOverrides(android.support.v4.app.BackStackRecord$TransitionState,java.util.ArrayList,java.util.ArrayList) -> a
    void setBackNameOverrides(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.util.ArrayMap,boolean) -> a
    void setNameOverrides(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.util.ArrayMap,boolean) -> b
    android.support.v4.util.ArrayMap access$000(android.support.v4.app.BackStackRecord,android.support.v4.app.BackStackRecord$TransitionState,boolean,android.support.v4.app.Fragment) -> a
    void access$100(android.support.v4.app.BackStackRecord,android.support.v4.util.ArrayMap,android.support.v4.app.BackStackRecord$TransitionState) -> a
    void access$200(android.support.v4.app.BackStackRecord,android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean,android.support.v4.util.ArrayMap) -> a
    void access$300(android.support.v4.app.BackStackRecord,android.support.v4.app.BackStackRecord$TransitionState,int,java.lang.Object) -> a
    void <clinit>() -> <clinit>
android.support.v4.app.BackStackRecord$1 -> android.support.v4.a.j:
    android.support.v4.app.Fragment val$inFragment -> a
    android.support.v4.app.BackStackRecord this$0 -> b
    void <init>(android.support.v4.app.BackStackRecord,android.support.v4.app.Fragment) -> <init>
    android.view.View getView() -> a
android.support.v4.app.BackStackRecord$2 -> android.support.v4.a.k:
    android.view.View val$sceneRoot -> a
    java.lang.Object val$sharedElementTransition -> b
    java.util.ArrayList val$sharedElementTargets -> c
    android.support.v4.app.BackStackRecord$TransitionState val$state -> d
    boolean val$isBack -> e
    android.support.v4.app.Fragment val$inFragment -> f
    android.support.v4.app.Fragment val$outFragment -> g
    android.support.v4.app.BackStackRecord this$0 -> h
    void <init>(android.support.v4.app.BackStackRecord,android.view.View,java.lang.Object,java.util.ArrayList,android.support.v4.app.BackStackRecord$TransitionState,boolean,android.support.v4.app.Fragment,android.support.v4.app.Fragment) -> <init>
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.BackStackRecord$3 -> android.support.v4.a.l:
    android.view.View val$sceneRoot -> a
    android.support.v4.app.BackStackRecord$TransitionState val$state -> b
    int val$containerId -> c
    java.lang.Object val$transition -> d
    android.support.v4.app.BackStackRecord this$0 -> e
    void <init>(android.support.v4.app.BackStackRecord,android.view.View,android.support.v4.app.BackStackRecord$TransitionState,int,java.lang.Object) -> <init>
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.BackStackRecord$Op -> android.support.v4.a.m:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
    void <init>() -> <init>
android.support.v4.app.BackStackRecord$TransitionState -> android.support.v4.a.n:
    android.support.v4.util.ArrayMap nameOverrides -> a
    java.util.ArrayList hiddenFragmentViews -> b
    android.support.v4.app.FragmentTransitionCompat21$EpicenterView enteringEpicenterView -> c
    android.view.View nonExistentView -> d
    android.support.v4.app.BackStackRecord this$0 -> e
    void <init>(android.support.v4.app.BackStackRecord) -> <init>
android.support.v4.app.BackStackState -> android.support.v4.a.o:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    java.util.ArrayList mSharedElementSourceNames -> j
    java.util.ArrayList mSharedElementTargetNames -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.support.v4.app.BackStackRecord) -> <init>
    void <init>(android.os.Parcel) -> <init>
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
android.support.v4.app.BackStackState$1 -> android.support.v4.a.p:
    void <init>() -> <init>
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.BaseFragmentActivityDonut -> android.support.v4.a.q:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
android.support.v4.app.BaseFragmentActivityHoneycomb -> android.support.v4.a.r:
    void <init>() -> <init>
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
android.support.v4.app.Fragment -> android.support.v4.a.s:
    android.support.v4.util.SimpleArrayMap sClassMap -> aa
    java.lang.Object USE_DEFAULT_TRANSITION -> a
    int mState -> b
    android.view.View mAnimatingAway -> c
    int mStateAfterAnimating -> d
    android.os.Bundle mSavedFragmentState -> e
    android.util.SparseArray mSavedViewState -> f
    int mIndex -> g
    java.lang.String mWho -> h
    android.os.Bundle mArguments -> i
    android.support.v4.app.Fragment mTarget -> j
    int mTargetIndex -> k
    int mTargetRequestCode -> l
    boolean mAdded -> m
    boolean mRemoving -> n
    boolean mResumed -> o
    boolean mFromLayout -> p
    boolean mInLayout -> q
    boolean mRestored -> r
    int mBackStackNesting -> s
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> t
    android.support.v4.app.FragmentHostCallback mHost -> u
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> v
    android.support.v4.app.Fragment mParentFragment -> w
    int mFragmentId -> x
    int mContainerId -> y
    java.lang.String mTag -> z
    boolean mHidden -> A
    boolean mDetached -> B
    boolean mRetainInstance -> C
    boolean mRetaining -> D
    boolean mHasMenu -> E
    boolean mMenuVisible -> F
    boolean mCalled -> G
    int mNextAnim -> H
    android.view.ViewGroup mContainer -> I
    android.view.View mView -> J
    android.view.View mInnerView -> K
    boolean mDeferStart -> L
    boolean mUserVisibleHint -> M
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> N
    boolean mLoadersStarted -> O
    boolean mCheckedForLoaderManager -> P
    java.lang.Object mEnterTransition -> Q
    java.lang.Object mReturnTransition -> R
    java.lang.Object mExitTransition -> S
    java.lang.Object mReenterTransition -> T
    java.lang.Object mSharedElementEnterTransition -> U
    java.lang.Object mSharedElementReturnTransition -> V
    java.lang.Boolean mAllowReturnTransitionOverlap -> W
    java.lang.Boolean mAllowEnterTransitionOverlap -> X
    android.support.v4.app.SharedElementCallback mEnterTransitionCallback -> Y
    android.support.v4.app.SharedElementCallback mExitTransitionCallback -> Z
    void <init>() -> <init>
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    android.support.v4.app.FragmentManager getChildFragmentManager() -> d
    boolean isAdded() -> e
    boolean isHidden() -> f
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle) -> a
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.content.Context) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> g
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> h
    void onResume() -> i
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> j
    void onStop() -> k
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> l
    void onDestroy() -> m
    void initState() -> n
    void onDetach() -> o
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> p
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    java.lang.Object getEnterTransition() -> q
    java.lang.Object getReturnTransition() -> r
    java.lang.Object getExitTransition() -> s
    java.lang.Object getReenterTransition() -> t
    java.lang.Object getSharedElementEnterTransition() -> u
    java.lang.Object getSharedElementReturnTransition() -> v
    boolean getAllowEnterTransitionOverlap() -> w
    boolean getAllowReturnTransitionOverlap() -> x
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> y
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> z
    void performResume() -> A
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> B
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> C
    void performStop() -> D
    void performReallyStop() -> E
    void performDestroyView() -> F
    void performDestroy() -> G
    void <clinit>() -> <clinit>
android.support.v4.app.Fragment$1 -> android.support.v4.a.t:
    android.support.v4.app.Fragment this$0 -> a
    void <init>(android.support.v4.app.Fragment) -> <init>
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.a.u:
    void <init>(java.lang.String,java.lang.Exception) -> <init>
android.support.v4.app.FragmentActivity -> android.support.v4.a.v:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentController mFragments -> b
    boolean mCreated -> c
    boolean mResumed -> d
    boolean mStopped -> e
    boolean mReallyStopped -> f
    boolean mRetaining -> g
    boolean mOptionsMenuInvalidated -> h
    boolean mRequestedPermissionsFromFragment -> i
    void <init>() -> <init>
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void supportFinishAfterTransition() -> a_
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStateNotSaved() -> onStateNotSaved
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> b
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> c
    void supportInvalidateOptionsMenu() -> d
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> e
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void validateRequestPermissionsRequestCode(int) -> a
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
android.support.v4.app.FragmentActivity$1 -> android.support.v4.a.w:
    android.support.v4.app.FragmentActivity this$0 -> a
    void <init>(android.support.v4.app.FragmentActivity) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$HostCallbacks -> android.support.v4.a.x:
    android.support.v4.app.FragmentActivity this$0 -> a
    void <init>(android.support.v4.app.FragmentActivity) -> <init>
    void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean onShouldSaveFragmentState(android.support.v4.app.Fragment) -> a
    android.view.LayoutInflater onGetLayoutInflater() -> b
    void onSupportInvalidateOptionsMenu() -> c
    boolean onHasWindowAnimations() -> d
    int onGetWindowAnimations() -> e
    void onAttachFragment(android.support.v4.app.Fragment) -> b
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.a.y:
    java.lang.Object custom -> a
    java.util.List fragments -> b
    android.support.v4.util.SimpleArrayMap loaders -> c
    void <init>() -> <init>
android.support.v4.app.FragmentContainer -> android.support.v4.a.z:
    void <init>() -> <init>
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
android.support.v4.app.FragmentController -> android.support.v4.a.aa:
    android.support.v4.app.FragmentHostCallback mHost -> a
    android.support.v4.app.FragmentController createController(android.support.v4.app.FragmentHostCallback) -> a
    void <init>(android.support.v4.app.FragmentHostCallback) -> <init>
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> a
    int getActiveFragmentsCount() -> b
    java.util.List getActiveFragments(java.util.List) -> a
    void attachHost(android.support.v4.app.Fragment) -> a
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    void noteStateNotSaved() -> c
    android.os.Parcelable saveAllState() -> d
    void restoreAllState(android.os.Parcelable,java.util.List) -> a
    java.util.List retainNonConfig() -> e
    void dispatchCreate() -> f
    void dispatchActivityCreated() -> g
    void dispatchStart() -> h
    void dispatchResume() -> i
    void dispatchPause() -> j
    void dispatchStop() -> k
    void dispatchReallyStop() -> l
    void dispatchDestroy() -> m
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> n
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    boolean execPendingActions() -> o
    void doLoaderStart() -> p
    void doLoaderStop(boolean) -> a
    void doLoaderDestroy() -> q
    void reportLoaderStart() -> r
    android.support.v4.util.SimpleArrayMap retainLoaderNonConfig() -> s
    void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap) -> a
    void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.FragmentHostCallback -> android.support.v4.a.ab:
    android.app.Activity mActivity -> a
    android.content.Context mContext -> b
    android.os.Handler mHandler -> e
    int mWindowAnimations -> c
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> d
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> f
    boolean mRetainLoaders -> g
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> h
    boolean mCheckedForLoaderManager -> i
    boolean mLoadersStarted -> j
    void <init>(android.support.v4.app.FragmentActivity) -> <init>
    void <init>(android.app.Activity,android.content.Context,android.os.Handler,int) -> <init>
    void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean onShouldSaveFragmentState(android.support.v4.app.Fragment) -> a
    android.view.LayoutInflater onGetLayoutInflater() -> b
    void onSupportInvalidateOptionsMenu() -> c
    boolean onHasWindowAnimations() -> d
    int onGetWindowAnimations() -> e
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
    android.app.Activity getActivity() -> f
    android.content.Context getContext() -> g
    android.os.Handler getHandler() -> h
    android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl() -> i
    void inactivateFragment(java.lang.String) -> a
    void onAttachFragment(android.support.v4.app.Fragment) -> b
    boolean getRetainLoaders() -> j
    void doLoaderStart() -> k
    void doLoaderStop(boolean) -> a
    void doLoaderDestroy() -> l
    void reportLoaderStart() -> m
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
    android.support.v4.util.SimpleArrayMap retainLoaderNonConfig() -> n
    void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap) -> a
    void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> b
android.support.v4.app.FragmentManager -> android.support.v4.a.ac:
    void <init>() -> <init>
    boolean popBackStackImmediate() -> a
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.a.ad:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.a.ae:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentHostCallback mHost -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    java.lang.reflect.Field sAnimationListenerField -> r
    boolean mNeedMenuInvalidate -> s
    boolean mStateSaved -> t
    boolean mDestroyed -> u
    java.lang.String mNoTransactionsBecause -> v
    boolean mHavePendingDeferredStart -> w
    android.os.Bundle mStateBundle -> x
    android.util.SparseArray mStateArray -> y
    java.lang.Runnable mExecCommit -> z
    android.view.animation.Interpolator DECELERATE_QUINT -> A
    android.view.animation.Interpolator DECELERATE_CUBIC -> B
    android.view.animation.Interpolator ACCELERATE_QUINT -> C
    android.view.animation.Interpolator ACCELERATE_CUBIC -> D
    void <init>() -> <init>
    boolean modifiesAlpha(android.view.animation.Animation) -> a
    boolean shouldRunOnHWLayer(android.view.View,android.view.animation.Animation) -> a
    void throwException(java.lang.RuntimeException) -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void setHWLayerAnimListenerIfAlpha(android.view.View,android.view.animation.Animation) -> b
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> c
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> d
    void reportBackStackChanged() -> e
    void addBackStackState(android.support.v4.app.BackStackRecord) -> a
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> f
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> g
    void restoreAllState(android.os.Parcelable,java.util.List) -> a
    void attachController(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> h
    void dispatchCreate() -> i
    void dispatchActivityCreated() -> j
    void dispatchStart() -> k
    void dispatchResume() -> l
    void dispatchPause() -> m
    void dispatchStop() -> n
    void dispatchReallyStop() -> o
    void dispatchDestroyView() -> p
    void dispatchDestroy() -> q
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> r
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    android.support.v4.view.LayoutInflaterFactory getLayoutInflaterFactory() -> s
    void <clinit>() -> <clinit>
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.a.af:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void <init>(android.support.v4.app.FragmentManagerImpl) -> <init>
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.a.ag:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void <init>(android.support.v4.app.FragmentManagerImpl,android.view.View,android.view.animation.Animation,android.support.v4.app.Fragment) -> <init>
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener -> android.support.v4.a.ah:
    android.view.animation.Animation$AnimationListener mOrignalListener -> a
    boolean mShouldRunOnHWLayer -> b
    android.view.View mView -> c
    void <init>(android.view.View,android.view.animation.Animation) -> <init>
    void <init>(android.view.View,android.view.animation.Animation,android.view.animation.Animation$AnimationListener) -> <init>
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    android.view.View access$000(android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener) -> a
android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener$1 -> android.support.v4.a.ai:
    android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener this$0 -> a
    void <init>(android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener) -> <init>
    void run() -> run
android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener$2 -> android.support.v4.a.aj:
    android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener this$0 -> a
    void <init>(android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener) -> <init>
    void run() -> run
android.support.v4.app.FragmentManagerImpl$FragmentTag -> android.support.v4.a.ak:
    int[] Fragment -> a
    void <clinit>() -> <clinit>
android.support.v4.app.FragmentManagerState -> android.support.v4.a.al:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>() -> <init>
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.a.am:
    void <init>() -> <init>
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.a.an:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.support.v4.app.Fragment) -> <init>
    void <init>(android.os.Parcel) -> <init>
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
android.support.v4.app.FragmentState$1 -> android.support.v4.a.ao:
    void <init>() -> <init>
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTransaction -> android.support.v4.a.ap:
    void <init>() -> <init>
android.support.v4.app.FragmentTransitionCompat21 -> android.support.v4.a.aq:
    java.lang.String getTransitionName(android.view.View) -> a
    java.lang.Object cloneTransition(java.lang.Object) -> a
    java.lang.Object captureExitingViews(java.lang.Object,android.view.View,java.util.ArrayList,java.util.Map,android.view.View) -> a
    void excludeTarget(java.lang.Object,android.view.View,boolean) -> a
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object) -> a
    void setEpicenter(java.lang.Object,android.view.View) -> a
    java.lang.Object wrapSharedElementTransition(java.lang.Object) -> b
    void addTransitionTargets(java.lang.Object,java.lang.Object,android.view.View,android.support.v4.app.FragmentTransitionCompat21$ViewRetriever,android.view.View,android.support.v4.app.FragmentTransitionCompat21$EpicenterView,java.util.Map,java.util.ArrayList,java.util.Map,java.util.Map,java.util.ArrayList) -> a
    java.lang.Object mergeTransitions(java.lang.Object,java.lang.Object,java.lang.Object,boolean) -> a
    void setSharedElementTargets(java.lang.Object,android.view.View,java.util.Map,java.util.ArrayList) -> a
    void bfsAddViewChildren(java.util.List,android.view.View) -> a
    boolean containedBeforeIndex(java.util.List,android.view.View,int) -> a
    void setSharedElementEpicenter(android.transition.Transition,android.support.v4.app.FragmentTransitionCompat21$EpicenterView) -> a
    android.graphics.Rect getBoundsOnScreen(android.view.View) -> c
    void captureTransitioningViews(java.util.ArrayList,android.view.View) -> b
    void findNamedViews(java.util.Map,android.view.View) -> a
    void cleanupTransitions(android.view.View,android.view.View,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.util.Map) -> a
    void removeTargets(java.lang.Object,java.util.ArrayList) -> a
    void addTargets(java.lang.Object,java.util.ArrayList) -> b
    boolean hasSimpleTarget(android.transition.Transition) -> a
    boolean isNullOrEmpty(java.util.List) -> a
    void access$000(java.util.ArrayList,android.view.View) -> a
    android.graphics.Rect access$100(android.view.View) -> b
android.support.v4.app.FragmentTransitionCompat21$1 -> android.support.v4.a.ar:
    android.graphics.Rect val$epicenter -> a
    void <init>(android.graphics.Rect) -> <init>
    android.graphics.Rect onGetEpicenter(android.transition.Transition) -> onGetEpicenter
android.support.v4.app.FragmentTransitionCompat21$2 -> android.support.v4.a.as:
    android.view.View val$container -> a
    android.transition.Transition val$enterTransition -> b
    android.view.View val$nonExistentView -> c
    android.support.v4.app.FragmentTransitionCompat21$ViewRetriever val$inFragment -> d
    java.util.Map val$nameOverrides -> e
    java.util.Map val$renamedViews -> f
    java.util.ArrayList val$enteringViews -> g
    void <init>(android.view.View,android.transition.Transition,android.view.View,android.support.v4.app.FragmentTransitionCompat21$ViewRetriever,java.util.Map,java.util.Map,java.util.ArrayList) -> <init>
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.FragmentTransitionCompat21$3 -> android.support.v4.a.at:
    android.graphics.Rect mEpicenter -> b
    android.support.v4.app.FragmentTransitionCompat21$EpicenterView val$epicenterView -> a
    void <init>(android.support.v4.app.FragmentTransitionCompat21$EpicenterView) -> <init>
    android.graphics.Rect onGetEpicenter(android.transition.Transition) -> onGetEpicenter
android.support.v4.app.FragmentTransitionCompat21$4 -> android.support.v4.a.au:
    android.view.View val$sceneRoot -> a
    android.transition.Transition val$enterTransition -> b
    java.util.ArrayList val$enteringViews -> c
    android.transition.Transition val$exitTransition -> d
    java.util.ArrayList val$exitingViews -> e
    android.transition.Transition val$sharedElementTransition -> f
    java.util.ArrayList val$sharedElementTargets -> g
    java.util.Map val$renamedViews -> h
    java.util.ArrayList val$hiddenViews -> i
    android.transition.Transition val$overallTransition -> j
    android.view.View val$nonExistentView -> k
    void <init>(android.view.View,android.transition.Transition,java.util.ArrayList,android.transition.Transition,java.util.ArrayList,android.transition.Transition,java.util.ArrayList,java.util.Map,java.util.ArrayList,android.transition.Transition,android.view.View) -> <init>
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.FragmentTransitionCompat21$EpicenterView -> android.support.v4.a.av:
    android.view.View epicenter -> a
    void <init>() -> <init>
android.support.v4.app.FragmentTransitionCompat21$ViewRetriever -> android.support.v4.a.aw:
    android.view.View getView() -> a
android.support.v4.app.LoaderManager -> android.support.v4.a.ax:
    void <init>() -> <init>
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.a.ay:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.a.az:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    boolean mStarted -> e
    boolean mRetaining -> f
    android.support.v4.app.FragmentHostCallback mHost -> g
    void <init>(java.lang.String,android.support.v4.app.FragmentHostCallback,boolean) -> <init>
    void updateHostController(android.support.v4.app.FragmentHostCallback) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
    android.support.v4.app.FragmentHostCallback access$000(android.support.v4.app.LoaderManagerImpl) -> a
    void <clinit>() -> <clinit>
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.a.ba:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NavUtils -> android.support.v4.a.bb:
    android.support.v4.app.NavUtils$NavUtilsImpl IMPL -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName) -> a
    java.lang.String getParentActivityName(android.app.Activity) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName) -> b
    void <clinit>() -> <clinit>
android.support.v4.app.NavUtils$NavUtilsImpl -> android.support.v4.a.bc:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplBase -> android.support.v4.a.bd:
    void <init>() -> <init>
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplJB -> android.support.v4.a.be:
    void <init>() -> <init>
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    android.content.Intent superGetParentActivityIntent(android.app.Activity) -> b
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtilsJB -> android.support.v4.a.bf:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.pm.ActivityInfo) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.a.bg:
    android.view.ViewGroup wrap(android.view.View) -> a
    void <init>(android.content.Context) -> <init>
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SharedElementCallback -> android.support.v4.a.bh:
    int MAX_IMAGE_SIZE -> a
    void onSharedElementStart(java.util.List,java.util.List,java.util.List) -> a
    void onSharedElementEnd(java.util.List,java.util.List,java.util.List) -> b
    void onMapSharedElements(java.util.List,java.util.Map) -> a
    void <clinit>() -> <clinit>
android.support.v4.app.SuperNotCalledException -> android.support.v4.a.bi:
    void <init>(java.lang.String) -> <init>
android.support.v4.app.TaskStackBuilder -> android.support.v4.a.bj:
    android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl IMPL -> a
    java.util.ArrayList mIntents -> b
    android.content.Context mSourceContext -> c
    void <init>(android.content.Context) -> <init>
    android.support.v4.app.TaskStackBuilder create(android.content.Context) -> a
    android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent) -> a
    android.support.v4.app.TaskStackBuilder addParentStack(android.app.Activity) -> a
    android.support.v4.app.TaskStackBuilder addParentStack(android.content.ComponentName) -> a
    java.util.Iterator iterator() -> iterator
    void startActivities() -> a
    void startActivities(android.os.Bundle) -> a
    void <clinit>() -> <clinit>
android.support.v4.app.TaskStackBuilder$SupportParentable -> android.support.v4.a.bk:
    android.content.Intent getSupportParentActivityIntent() -> a
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl -> android.support.v4.a.bl:
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase -> android.support.v4.a.bm:
    void <init>() -> <init>
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb -> android.support.v4.a.bn:
    void <init>() -> <init>
android.support.v4.content.ContextCompat -> android.support.v4.b.a:
    boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> a
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> a
    int checkSelfPermission(android.content.Context,java.lang.String) -> a
android.support.v4.content.ContextCompatApi21 -> android.support.v4.b.b:
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> a
android.support.v4.content.ContextCompatHoneycomb -> android.support.v4.b.c:
    void startActivities(android.content.Context,android.content.Intent[]) -> a
android.support.v4.content.ContextCompatJellybean -> android.support.v4.b.d:
    void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> a
android.support.v4.content.IntentCompat -> android.support.v4.b.e:
    android.support.v4.content.IntentCompat$IntentCompatImpl IMPL -> a
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
    void <clinit>() -> <clinit>
android.support.v4.content.IntentCompat$IntentCompatImpl -> android.support.v4.b.f:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplBase -> android.support.v4.b.g:
    void <init>() -> <init>
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplHC -> android.support.v4.b.h:
    void <init>() -> <init>
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplIcsMr1 -> android.support.v4.b.i:
    void <init>() -> <init>
android.support.v4.content.IntentCompatHoneycomb -> android.support.v4.b.j:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.Loader -> android.support.v4.b.k:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    android.support.v4.content.Loader$OnLoadCanceledListener mOnLoadCanceledListener -> c
    boolean mStarted -> d
    boolean mAbandoned -> e
    boolean mReset -> f
    boolean mContentChanged -> g
    boolean mProcessingChange -> h
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void registerOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener) -> a
    void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener) -> b
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCanceledListener -> android.support.v4.b.l:
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.b.m:
android.support.v4.graphics.ColorUtils -> android.support.v4.c.a:
    int compositeColors(int,int) -> a
    int compositeAlpha(int,int) -> c
    int compositeComponent(int,int,int,int,int) -> a
    int setAlphaComponent(int,int) -> b
android.support.v4.graphics.drawable.DrawableCompat -> android.support.v4.c.a.a:
    android.support.v4.graphics.drawable.DrawableCompat$DrawableImpl IMPL -> a
    void jumpToCurrentState(android.graphics.drawable.Drawable) -> a
    void setAutoMirrored(android.graphics.drawable.Drawable,boolean) -> a
    boolean isAutoMirrored(android.graphics.drawable.Drawable) -> b
    void setHotspot(android.graphics.drawable.Drawable,float,float) -> a
    void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int) -> a
    void setTint(android.graphics.drawable.Drawable,int) -> a
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList) -> a
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
    void <clinit>() -> <clinit>
android.support.v4.graphics.drawable.DrawableCompat$BaseDrawableImpl -> android.support.v4.c.a.b:
    void <init>() -> <init>
    void jumpToCurrentState(android.graphics.drawable.Drawable) -> a
    void setAutoMirrored(android.graphics.drawable.Drawable,boolean) -> a
    boolean isAutoMirrored(android.graphics.drawable.Drawable) -> b
    void setHotspot(android.graphics.drawable.Drawable,float,float) -> a
    void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int) -> a
    void setTint(android.graphics.drawable.Drawable,int) -> a
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList) -> a
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
android.support.v4.graphics.drawable.DrawableCompat$DrawableImpl -> android.support.v4.c.a.c:
    void jumpToCurrentState(android.graphics.drawable.Drawable) -> a
    void setAutoMirrored(android.graphics.drawable.Drawable,boolean) -> a
    boolean isAutoMirrored(android.graphics.drawable.Drawable) -> b
    void setHotspot(android.graphics.drawable.Drawable,float,float) -> a
    void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int) -> a
    void setTint(android.graphics.drawable.Drawable,int) -> a
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList) -> a
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
android.support.v4.graphics.drawable.DrawableCompat$HoneycombDrawableImpl -> android.support.v4.c.a.d:
    void <init>() -> <init>
    void jumpToCurrentState(android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
android.support.v4.graphics.drawable.DrawableCompat$JellybeanMr1DrawableImpl -> android.support.v4.c.a.e:
    void <init>() -> <init>
android.support.v4.graphics.drawable.DrawableCompat$KitKatDrawableImpl -> android.support.v4.c.a.f:
    void <init>() -> <init>
    void setAutoMirrored(android.graphics.drawable.Drawable,boolean) -> a
    boolean isAutoMirrored(android.graphics.drawable.Drawable) -> b
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
android.support.v4.graphics.drawable.DrawableCompat$LollipopDrawableImpl -> android.support.v4.c.a.g:
    void <init>() -> <init>
    void setHotspot(android.graphics.drawable.Drawable,float,float) -> a
    void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int) -> a
    void setTint(android.graphics.drawable.Drawable,int) -> a
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList) -> a
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
android.support.v4.graphics.drawable.DrawableCompat$LollipopMr1DrawableImpl -> android.support.v4.c.a.h:
    void <init>() -> <init>
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
android.support.v4.graphics.drawable.DrawableCompat$MDrawableImpl -> android.support.v4.c.a.i:
    void <init>() -> <init>
android.support.v4.graphics.drawable.DrawableCompatApi22 -> android.support.v4.c.a.j:
    android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable) -> a
android.support.v4.graphics.drawable.DrawableCompatBase -> android.support.v4.c.a.k:
    void setTint(android.graphics.drawable.Drawable,int) -> a
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList) -> a
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable) -> a
android.support.v4.graphics.drawable.DrawableCompatHoneycomb -> android.support.v4.c.a.l:
    void jumpToCurrentState(android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable) -> b
android.support.v4.graphics.drawable.DrawableCompatKitKat -> android.support.v4.c.a.m:
    void setAutoMirrored(android.graphics.drawable.Drawable,boolean) -> a
    boolean isAutoMirrored(android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable) -> b
android.support.v4.graphics.drawable.DrawableCompatLollipop -> android.support.v4.c.a.n:
    void setHotspot(android.graphics.drawable.Drawable,float,float) -> a
    void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int) -> a
    void setTint(android.graphics.drawable.Drawable,int) -> a
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList) -> a
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable) -> a
android.support.v4.graphics.drawable.DrawableWrapper -> android.support.v4.c.a.o:
    void setTint(int) -> setTint
    void setTintList(android.content.res.ColorStateList) -> setTintList
    void setTintMode(android.graphics.PorterDuff$Mode) -> setTintMode
    android.graphics.drawable.Drawable getWrappedDrawable() -> a
    void setWrappedDrawable(android.graphics.drawable.Drawable) -> a
android.support.v4.graphics.drawable.DrawableWrapperDonut -> android.support.v4.c.a.p:
    android.graphics.PorterDuff$Mode DEFAULT_MODE -> a
    android.content.res.ColorStateList mTintList -> c
    android.graphics.PorterDuff$Mode mTintMode -> d
    int mCurrentColor -> e
    android.graphics.PorterDuff$Mode mCurrentMode -> f
    boolean mColorFilterSet -> g
    android.graphics.drawable.Drawable mDrawable -> b
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void setChangingConfigurations(int) -> setChangingConfigurations
    int getChangingConfigurations() -> getChangingConfigurations
    void setDither(boolean) -> setDither
    void setFilterBitmap(boolean) -> setFilterBitmap
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    boolean isStateful() -> isStateful
    boolean setState(int[]) -> setState
    int[] getState() -> getState
    android.graphics.drawable.Drawable getCurrent() -> getCurrent
    boolean setVisible(boolean,boolean) -> setVisible
    int getOpacity() -> getOpacity
    android.graphics.Region getTransparentRegion() -> getTransparentRegion
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    boolean getPadding(android.graphics.Rect) -> getPadding
    android.graphics.drawable.Drawable mutate() -> mutate
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
    boolean onLevelChange(int) -> onLevelChange
    void setTint(int) -> setTint
    void setTintList(android.content.res.ColorStateList) -> setTintList
    void setTintMode(android.graphics.PorterDuff$Mode) -> setTintMode
    boolean updateTint(int[]) -> a
    android.graphics.drawable.Drawable getWrappedDrawable() -> a
    void setWrappedDrawable(android.graphics.drawable.Drawable) -> a
    void <clinit>() -> <clinit>
android.support.v4.graphics.drawable.DrawableWrapperHoneycomb -> android.support.v4.c.a.q:
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void jumpToCurrentState() -> jumpToCurrentState
android.support.v4.graphics.drawable.DrawableWrapperKitKat -> android.support.v4.c.a.r:
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void setAutoMirrored(boolean) -> setAutoMirrored
    boolean isAutoMirrored() -> isAutoMirrored
android.support.v4.graphics.drawable.DrawableWrapperLollipop -> android.support.v4.c.a.s:
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void setHotspot(float,float) -> setHotspot
    void setHotspotBounds(int,int,int,int) -> setHotspotBounds
    void getOutline(android.graphics.Outline) -> getOutline
    void applyTheme(android.content.res.Resources$Theme) -> applyTheme
    boolean canApplyTheme() -> canApplyTheme
    android.graphics.Rect getDirtyBounds() -> getDirtyBounds
android.support.v4.internal.view.SupportMenu -> android.support.v4.d.a.a:
android.support.v4.internal.view.SupportMenuItem -> android.support.v4.d.a.b:
    void setShowAsAction(int) -> setShowAsAction
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.View getActionView() -> getActionView
    android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider) -> a
    android.support.v4.view.ActionProvider getSupportActionProvider() -> a
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.support.v4.internal.view.SupportMenuItem setSupportOnActionExpandListener(android.support.v4.view.MenuItemCompat$OnActionExpandListener) -> a
android.support.v4.internal.view.SupportSubMenu -> android.support.v4.d.a.c:
android.support.v4.os.AsyncTaskCompat -> android.support.v4.e.a:
    android.os.AsyncTask executeParallel(android.os.AsyncTask,java.lang.Object[]) -> a
android.support.v4.os.AsyncTaskCompatHoneycomb -> android.support.v4.e.b:
    void executeParallel(android.os.AsyncTask,java.lang.Object[]) -> a
android.support.v4.text.ICUCompat -> android.support.v4.f.a:
    android.support.v4.text.ICUCompat$ICUCompatImpl IMPL -> a
    java.lang.String maximizeAndGetScript(java.util.Locale) -> a
    void <clinit>() -> <clinit>
android.support.v4.text.ICUCompat$ICUCompatImpl -> android.support.v4.f.b:
    java.lang.String maximizeAndGetScript(java.util.Locale) -> a
android.support.v4.text.ICUCompat$ICUCompatImplBase -> android.support.v4.f.c:
    void <init>() -> <init>
    java.lang.String maximizeAndGetScript(java.util.Locale) -> a
android.support.v4.text.ICUCompat$ICUCompatImplIcs -> android.support.v4.f.d:
    void <init>() -> <init>
    java.lang.String maximizeAndGetScript(java.util.Locale) -> a
android.support.v4.text.ICUCompat$ICUCompatImplLollipop -> android.support.v4.f.e:
    void <init>() -> <init>
    java.lang.String maximizeAndGetScript(java.util.Locale) -> a
android.support.v4.text.ICUCompatApi23 -> android.support.v4.f.f:
    java.lang.reflect.Method sAddLikelySubtagsMethod -> a
    java.lang.String maximizeAndGetScript(java.util.Locale) -> a
    void <clinit>() -> <clinit>
android.support.v4.text.ICUCompatIcs -> android.support.v4.f.g:
    java.lang.reflect.Method sGetScriptMethod -> a
    java.lang.reflect.Method sAddLikelySubtagsMethod -> b
    java.lang.String maximizeAndGetScript(java.util.Locale) -> a
    java.lang.String getScript(java.lang.String) -> a
    java.lang.String addLikelySubtags(java.util.Locale) -> b
    void <clinit>() -> <clinit>
android.support.v4.text.TextUtilsCompat -> android.support.v4.f.h:
    android.support.v4.text.TextUtilsCompat$TextUtilsCompatImpl IMPL -> b
    java.util.Locale ROOT -> a
    java.lang.String ARAB_SCRIPT_SUBTAG -> c
    java.lang.String HEBR_SCRIPT_SUBTAG -> d
    int getLayoutDirectionFromLocale(java.util.Locale) -> a
    java.lang.String access$000() -> a
    java.lang.String access$100() -> b
    void <clinit>() -> <clinit>
android.support.v4.text.TextUtilsCompat$1 -> android.support.v4.f.i:
android.support.v4.text.TextUtilsCompat$TextUtilsCompatImpl -> android.support.v4.f.j:
    void <init>() -> <init>
    int getLayoutDirectionFromLocale(java.util.Locale) -> a
    int getLayoutDirectionFromFirstChar(java.util.Locale) -> b
    void <init>(android.support.v4.text.TextUtilsCompat$1) -> <init>
android.support.v4.text.TextUtilsCompat$TextUtilsCompatJellybeanMr1Impl -> android.support.v4.f.k:
    void <init>() -> <init>
    int getLayoutDirectionFromLocale(java.util.Locale) -> a
    void <init>(android.support.v4.text.TextUtilsCompat$1) -> <init>
android.support.v4.text.TextUtilsCompatJellybeanMr1 -> android.support.v4.f.l:
    int getLayoutDirectionFromLocale(java.util.Locale) -> a
android.support.v4.util.ArrayMap -> android.support.v4.g.a:
    android.support.v4.util.MapCollections mCollections -> a
    void <init>() -> <init>
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    boolean retainAll(java.util.Collection) -> a
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.g.b:
    android.support.v4.util.ArrayMap this$0 -> a
    void <init>(android.support.v4.util.ArrayMap) -> <init>
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.g.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
    void <clinit>() -> <clinit>
android.support.v4.util.DebugUtils -> android.support.v4.g.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.g.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void <init>(java.lang.String) -> <init>
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.LruCache -> android.support.v4.g.f:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int createCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    void <init>(int) -> <init>
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    void trimToSize(int) -> a
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object create(java.lang.Object) -> b
    int safeSizeOf(java.lang.Object,java.lang.Object) -> c
    int sizeOf(java.lang.Object,java.lang.Object) -> b
    java.lang.String toString() -> toString
android.support.v4.util.MapCollections -> android.support.v4.g.g:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    void <init>() -> <init>
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.g.h:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    void <init>(android.support.v4.util.MapCollections,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.g.i:
    android.support.v4.util.MapCollections this$0 -> a
    void <init>(android.support.v4.util.MapCollections) -> <init>
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.g.j:
    android.support.v4.util.MapCollections this$0 -> a
    void <init>(android.support.v4.util.MapCollections) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.g.k:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    void <init>(android.support.v4.util.MapCollections) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.g.l:
    android.support.v4.util.MapCollections this$0 -> a
    void <init>(android.support.v4.util.MapCollections) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.g.m:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void <init>() -> <init>
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfKey(java.lang.Object) -> a
    int indexOfValue(java.lang.Object) -> b
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.g.n:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> d
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.h.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    void <init>() -> <init>
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.h.b:
    void <init>() -> <init>
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.h.c:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    void <init>(android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl,android.support.v4.view.AccessibilityDelegateCompat) -> <init>
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.h.d:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.h.e:
    void <init>() -> <init>
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.h.f:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    void <init>(android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl,android.support.v4.view.AccessibilityDelegateCompat) -> <init>
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.h.g:
    void <init>() -> <init>
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.h.h:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.h.i:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    void <init>(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> <init>
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.h.j:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.h.k:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.h.l:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    void <init>(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> <init>
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.h.m:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ActionProvider -> android.support.v4.h.n:
    android.content.Context mContext -> a
    android.support.v4.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener -> b
    android.support.v4.view.ActionProvider$VisibilityListener mVisibilityListener -> c
    void <init>(android.content.Context) -> <init>
    android.view.View onCreateActionView() -> a
    android.view.View onCreateActionView(android.view.MenuItem) -> a
    boolean overridesItemVisibility() -> b
    boolean isVisible() -> c
    boolean onPerformDefaultAction() -> d
    boolean hasSubMenu() -> e
    void onPrepareSubMenu(android.view.SubMenu) -> a
    void subUiVisibilityChanged(boolean) -> a
    void setSubUiVisibilityListener(android.support.v4.view.ActionProvider$SubUiVisibilityListener) -> a
    void setVisibilityListener(android.support.v4.view.ActionProvider$VisibilityListener) -> a
    void reset() -> f
android.support.v4.view.ActionProvider$SubUiVisibilityListener -> android.support.v4.h.o:
    void onSubUiVisibilityChanged(boolean) -> a
android.support.v4.view.ActionProvider$VisibilityListener -> android.support.v4.h.p:
    void onActionProviderVisibilityChanged(boolean) -> a
android.support.v4.view.GravityCompat -> android.support.v4.h.q:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.h.r:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.h.s:
    void <init>() -> <init>
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.h.t:
    void <init>() -> <init>
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.h.u:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.LayoutInflaterCompat -> android.support.v4.h.v:
    android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImpl IMPL -> a
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImpl -> android.support.v4.h.w:
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplBase -> android.support.v4.h.x:
    void <init>() -> <init>
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplV11 -> android.support.v4.h.y:
    void <init>() -> <init>
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplV21 -> android.support.v4.h.z:
    void <init>() -> <init>
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
android.support.v4.view.LayoutInflaterCompatBase -> android.support.v4.h.aa:
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
android.support.v4.view.LayoutInflaterCompatBase$FactoryWrapper -> android.support.v4.h.ab:
    android.support.v4.view.LayoutInflaterFactory mDelegateFactory -> a
    void <init>(android.support.v4.view.LayoutInflaterFactory) -> <init>
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    java.lang.String toString() -> toString
android.support.v4.view.LayoutInflaterCompatHC -> android.support.v4.h.ac:
    java.lang.reflect.Field sLayoutInflaterFactory2Field -> a
    boolean sCheckedField -> b
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
    void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2) -> a
android.support.v4.view.LayoutInflaterCompatHC$FactoryWrapperHC -> android.support.v4.h.ad:
    void <init>(android.support.v4.view.LayoutInflaterFactory) -> <init>
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
android.support.v4.view.LayoutInflaterCompatLollipop -> android.support.v4.h.ae:
    void setFactory(android.view.LayoutInflater,android.support.v4.view.LayoutInflaterFactory) -> a
android.support.v4.view.LayoutInflaterFactory -> android.support.v4.h.af:
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
android.support.v4.view.MarginLayoutParamsCompat -> android.support.v4.h.ag:
    android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImpl IMPL -> a
    int getMarginStart(android.view.ViewGroup$MarginLayoutParams) -> a
    int getMarginEnd(android.view.ViewGroup$MarginLayoutParams) -> b
    void <clinit>() -> <clinit>
android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImpl -> android.support.v4.h.ah:
    int getMarginStart(android.view.ViewGroup$MarginLayoutParams) -> a
    int getMarginEnd(android.view.ViewGroup$MarginLayoutParams) -> b
android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImplBase -> android.support.v4.h.ai:
    void <init>() -> <init>
    int getMarginStart(android.view.ViewGroup$MarginLayoutParams) -> a
    int getMarginEnd(android.view.ViewGroup$MarginLayoutParams) -> b
android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImplJbMr1 -> android.support.v4.h.aj:
    void <init>() -> <init>
    int getMarginStart(android.view.ViewGroup$MarginLayoutParams) -> a
    int getMarginEnd(android.view.ViewGroup$MarginLayoutParams) -> b
android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1 -> android.support.v4.h.ak:
    int getMarginStart(android.view.ViewGroup$MarginLayoutParams) -> a
    int getMarginEnd(android.view.ViewGroup$MarginLayoutParams) -> b
android.support.v4.view.MenuItemCompat -> android.support.v4.h.al:
    android.support.v4.view.MenuItemCompat$MenuVersionImpl IMPL -> a
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    android.view.MenuItem setActionProvider(android.view.MenuItem,android.support.v4.view.ActionProvider) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean isActionViewExpanded(android.view.MenuItem) -> c
    void <clinit>() -> <clinit>
android.support.v4.view.MenuItemCompat$BaseMenuVersionImpl -> android.support.v4.h.am:
    void <init>() -> <init>
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean isActionViewExpanded(android.view.MenuItem) -> c
android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl -> android.support.v4.h.an:
    void <init>() -> <init>
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean isActionViewExpanded(android.view.MenuItem) -> c
android.support.v4.view.MenuItemCompat$IcsMenuVersionImpl -> android.support.v4.h.ao:
    void <init>() -> <init>
    boolean expandActionView(android.view.MenuItem) -> b
    boolean isActionViewExpanded(android.view.MenuItem) -> c
android.support.v4.view.MenuItemCompat$MenuVersionImpl -> android.support.v4.h.ap:
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean isActionViewExpanded(android.view.MenuItem) -> c
android.support.v4.view.MenuItemCompat$OnActionExpandListener -> android.support.v4.h.aq:
    boolean onMenuItemActionExpand(android.view.MenuItem) -> a
    boolean onMenuItemActionCollapse(android.view.MenuItem) -> b
android.support.v4.view.MenuItemCompatHoneycomb -> android.support.v4.h.ar:
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
android.support.v4.view.MenuItemCompatIcs -> android.support.v4.h.as:
    boolean expandActionView(android.view.MenuItem) -> a
    boolean isActionViewExpanded(android.view.MenuItem) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.h.at:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getSource(android.view.MotionEvent) -> c
    float getAxisValue(android.view.MotionEvent,int) -> e
    void <clinit>() -> <clinit>
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.h.au:
    void <init>() -> <init>
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getSource(android.view.MotionEvent) -> a
    float getAxisValue(android.view.MotionEvent,int) -> e
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.h.av:
    void <init>() -> <init>
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$GingerbreadMotionEventVersionImpl -> android.support.v4.h.aw:
    void <init>() -> <init>
    int getSource(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$HoneycombMr1MotionEventVersionImpl -> android.support.v4.h.ax:
    void <init>() -> <init>
    float getAxisValue(android.view.MotionEvent,int) -> e
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.h.ay:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getSource(android.view.MotionEvent) -> a
    float getAxisValue(android.view.MotionEvent,int) -> e
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.h.az:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatGingerbread -> android.support.v4.h.ba:
    int getSource(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatHoneycombMr1 -> android.support.v4.h.bb:
    float getAxisValue(android.view.MotionEvent,int) -> a
android.support.v4.view.NestedScrollingChild -> android.support.v4.h.bc:
    void stopNestedScroll() -> stopNestedScroll
android.support.v4.view.NestedScrollingChildHelper -> android.support.v4.h.bd:
    android.view.View mView -> a
    android.view.ViewParent mNestedScrollingParent -> b
    boolean mIsNestedScrollingEnabled -> c
    int[] mTempNestedScrollConsumed -> d
    void <init>(android.view.View) -> <init>
    void setNestedScrollingEnabled(boolean) -> a
    boolean isNestedScrollingEnabled() -> a
    boolean hasNestedScrollingParent() -> b
    boolean startNestedScroll(int) -> a
    void stopNestedScroll() -> c
    boolean dispatchNestedScroll(int,int,int,int,int[]) -> a
    boolean dispatchNestedPreScroll(int,int,int[],int[]) -> a
    boolean dispatchNestedFling(float,float,boolean) -> a
    boolean dispatchNestedPreFling(float,float) -> a
android.support.v4.view.NestedScrollingParent -> android.support.v4.h.be:
    boolean onStartNestedScroll(android.view.View,android.view.View,int) -> onStartNestedScroll
    void onNestedScrollAccepted(android.view.View,android.view.View,int) -> onNestedScrollAccepted
    void onStopNestedScroll(android.view.View) -> onStopNestedScroll
    void onNestedScroll(android.view.View,int,int,int,int) -> onNestedScroll
    void onNestedPreScroll(android.view.View,int,int,int[]) -> onNestedPreScroll
    boolean onNestedFling(android.view.View,float,float,boolean) -> onNestedFling
    boolean onNestedPreFling(android.view.View,float,float) -> onNestedPreFling
android.support.v4.view.NestedScrollingParentHelper -> android.support.v4.h.bf:
    android.view.ViewGroup mViewGroup -> a
    int mNestedScrollAxes -> b
    void <init>(android.view.ViewGroup) -> <init>
    void onNestedScrollAccepted(android.view.View,android.view.View,int) -> a
    int getNestedScrollAxes() -> a
    void onStopNestedScroll(android.view.View) -> a
android.support.v4.view.OnApplyWindowInsetsListener -> android.support.v4.h.bg:
    android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,android.support.v4.view.WindowInsetsCompat) -> a
android.support.v4.view.ScrollingView -> android.support.v4.h.bh:
    int computeVerticalScrollRange() -> computeVerticalScrollRange
    int computeVerticalScrollOffset() -> computeVerticalScrollOffset
    int computeVerticalScrollExtent() -> computeVerticalScrollExtent
android.support.v4.view.TintableBackgroundView -> android.support.v4.h.bi:
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.h.bj:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getYVelocity(android.view.VelocityTracker,int) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.h.bk:
    void <init>() -> <init>
    float getYVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.h.bl:
    void <init>() -> <init>
    float getYVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.h.bm:
    float getYVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.h.bn:
    float getYVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.h.bo:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollVertically(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    int getLayoutDirection(android.view.View) -> d
    int resolveSizeAndState(int,int,int) -> a
    int getMeasuredState(android.view.View) -> e
    float getTranslationY(android.view.View) -> f
    int getMinimumHeight(android.view.View) -> g
    android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View) -> h
    void setTranslationY(android.view.View,float) -> a
    void setAlpha(android.view.View,float) -> b
    void setElevation(android.view.View,float) -> c
    int getWindowSystemUiVisibility(android.view.View) -> i
    void requestApplyInsets(android.view.View) -> j
    void jumpDrawablesToCurrentState(android.view.View) -> k
    void setOnApplyWindowInsetsListener(android.view.View,android.support.v4.view.OnApplyWindowInsetsListener) -> a
    android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,android.support.v4.view.WindowInsetsCompat) -> a
    void setSaveFromParentEnabled(android.view.View,boolean) -> a
    void setActivated(android.view.View,boolean) -> b
    boolean hasOverlappingRendering(android.view.View) -> l
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList) -> a
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode) -> a
    void stopNestedScroll(android.view.View) -> m
    boolean isLaidOut(android.view.View) -> n
    boolean isAttachedToWindow(android.view.View) -> o
    boolean hasOnClickListeners(android.view.View) -> p
    void setScrollIndicators(android.view.View,int,int) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.h.bp:
    java.util.WeakHashMap mViewPropertyAnimatorCompatMap -> a
    void <init>() -> <init>
    boolean canScrollVertically(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    int getLayoutDirection(android.view.View) -> d
    int resolveSizeAndState(int,int,int) -> a
    int getMeasuredState(android.view.View) -> e
    boolean hasOverlappingRendering(android.view.View) -> f
    float getTranslationY(android.view.View) -> g
    int getMinimumHeight(android.view.View) -> h
    android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View) -> i
    void setTranslationY(android.view.View,float) -> a
    void setAlpha(android.view.View,float) -> b
    int getWindowSystemUiVisibility(android.view.View) -> j
    void requestApplyInsets(android.view.View) -> k
    void setElevation(android.view.View,float) -> c
    void jumpDrawablesToCurrentState(android.view.View) -> l
    void setOnApplyWindowInsetsListener(android.view.View,android.support.v4.view.OnApplyWindowInsetsListener) -> a
    android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,android.support.v4.view.WindowInsetsCompat) -> a
    void setSaveFromParentEnabled(android.view.View,boolean) -> a
    void setActivated(android.view.View,boolean) -> b
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList) -> a
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode) -> a
    boolean canScrollingViewScrollVertically(android.support.v4.view.ScrollingView,int) -> a
    void stopNestedScroll(android.view.View) -> m
    boolean isLaidOut(android.view.View) -> n
    boolean isAttachedToWindow(android.view.View) -> o
    boolean hasOnClickListeners(android.view.View) -> p
    void setScrollIndicators(android.view.View,int,int) -> a
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.h.bq:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.h.br:
    void <init>() -> <init>
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.h.bs:
    void <init>() -> <init>
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    int resolveSizeAndState(int,int,int) -> a
    int getMeasuredState(android.view.View) -> e
    float getTranslationY(android.view.View) -> g
    void setTranslationY(android.view.View,float) -> a
    void setAlpha(android.view.View,float) -> b
    void jumpDrawablesToCurrentState(android.view.View) -> l
    void setSaveFromParentEnabled(android.view.View,boolean) -> a
    void setActivated(android.view.View,boolean) -> b
android.support.v4.view.ViewCompat$ICSMr1ViewCompatImpl -> android.support.v4.h.bt:
    void <init>() -> <init>
    boolean hasOnClickListeners(android.view.View) -> p
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.h.bu:
    boolean accessibilityDelegateCheckFailed -> b
    void <init>() -> <init>
    boolean canScrollVertically(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View) -> i
    void <clinit>() -> <clinit>
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.h.bv:
    void <init>() -> <init>
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    int getMinimumHeight(android.view.View) -> h
    void requestApplyInsets(android.view.View) -> k
    boolean hasOverlappingRendering(android.view.View) -> f
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.h.bw:
    void <init>() -> <init>
    int getLayoutDirection(android.view.View) -> d
    int getWindowSystemUiVisibility(android.view.View) -> j
android.support.v4.view.ViewCompat$JbMr2ViewCompatImpl -> android.support.v4.h.bx:
    void <init>() -> <init>
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.h.by:
    void <init>() -> <init>
    boolean isLaidOut(android.view.View) -> n
    boolean isAttachedToWindow(android.view.View) -> o
android.support.v4.view.ViewCompat$LollipopViewCompatImpl -> android.support.v4.h.bz:
    void <init>() -> <init>
    void requestApplyInsets(android.view.View) -> k
    void setElevation(android.view.View,float) -> c
    void setOnApplyWindowInsetsListener(android.view.View,android.support.v4.view.OnApplyWindowInsetsListener) -> a
    void stopNestedScroll(android.view.View) -> m
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList) -> a
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode) -> a
    android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,android.support.v4.view.WindowInsetsCompat) -> a
android.support.v4.view.ViewCompat$MarshmallowViewCompatImpl -> android.support.v4.h.ca:
    void <init>() -> <init>
    void setScrollIndicators(android.view.View,int,int) -> a
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.h.cb:
    boolean canScrollVertically(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    int getLayoutDirection(android.view.View) -> d
    int resolveSizeAndState(int,int,int) -> a
    int getMeasuredState(android.view.View) -> e
    float getTranslationY(android.view.View) -> g
    int getMinimumHeight(android.view.View) -> h
    android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View) -> i
    void setTranslationY(android.view.View,float) -> a
    void setAlpha(android.view.View,float) -> b
    void setElevation(android.view.View,float) -> c
    int getWindowSystemUiVisibility(android.view.View) -> j
    void requestApplyInsets(android.view.View) -> k
    boolean hasOverlappingRendering(android.view.View) -> f
    void jumpDrawablesToCurrentState(android.view.View) -> l
    void setOnApplyWindowInsetsListener(android.view.View,android.support.v4.view.OnApplyWindowInsetsListener) -> a
    android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,android.support.v4.view.WindowInsetsCompat) -> a
    void setSaveFromParentEnabled(android.view.View,boolean) -> a
    void setActivated(android.view.View,boolean) -> b
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList) -> a
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode) -> a
    void stopNestedScroll(android.view.View) -> m
    boolean isLaidOut(android.view.View) -> n
    boolean isAttachedToWindow(android.view.View) -> o
    boolean hasOnClickListeners(android.view.View) -> p
    void setScrollIndicators(android.view.View,int,int) -> a
android.support.v4.view.ViewCompatBase -> android.support.v4.h.cc:
    java.lang.reflect.Field sMinHeightField -> a
    boolean sMinHeightFieldFetched -> b
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList) -> a
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode) -> a
    boolean isLaidOut(android.view.View) -> a
    int getMinimumHeight(android.view.View) -> b
    boolean isAttachedToWindow(android.view.View) -> c
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.h.cd:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.h.ce:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
    int resolveSizeAndState(int,int,int) -> a
    int getMeasuredState(android.view.View) -> b
    float getTranslationY(android.view.View) -> c
    void setTranslationY(android.view.View,float) -> a
    void setAlpha(android.view.View,float) -> b
    void jumpDrawablesToCurrentState(android.view.View) -> d
    void setSaveFromParentEnabled(android.view.View,boolean) -> a
    void setActivated(android.view.View,boolean) -> b
android.support.v4.view.ViewCompatICS -> android.support.v4.h.cf:
    boolean canScrollVertically(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatICSMr1 -> android.support.v4.h.cg:
    boolean hasOnClickListeners(android.view.View) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.h.ch:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    int getMinimumHeight(android.view.View) -> b
    void requestApplyInsets(android.view.View) -> c
    boolean hasOverlappingRendering(android.view.View) -> d
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.h.ci:
    int getLayoutDirection(android.view.View) -> a
    int getWindowSystemUiVisibility(android.view.View) -> b
android.support.v4.view.ViewCompatKitKat -> android.support.v4.h.cj:
    boolean isLaidOut(android.view.View) -> a
    boolean isAttachedToWindow(android.view.View) -> b
android.support.v4.view.ViewCompatLollipop -> android.support.v4.h.ck:
    void requestApplyInsets(android.view.View) -> a
    void setElevation(android.view.View,float) -> a
    void setOnApplyWindowInsetsListener(android.view.View,android.support.v4.view.OnApplyWindowInsetsListener) -> a
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList) -> a
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode) -> a
    android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,android.support.v4.view.WindowInsetsCompat) -> a
    void stopNestedScroll(android.view.View) -> b
android.support.v4.view.ViewCompatLollipop$1 -> android.support.v4.h.cl:
    android.support.v4.view.OnApplyWindowInsetsListener val$listener -> a
    void <init>(android.support.v4.view.OnApplyWindowInsetsListener) -> <init>
    android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets) -> onApplyWindowInsets
android.support.v4.view.ViewCompatMarshmallow -> android.support.v4.h.cm:
    void setScrollIndicators(android.view.View,int,int) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.h.cn:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    boolean hasPermanentMenuKey(android.view.ViewConfiguration) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.h.co:
    void <init>() -> <init>
    boolean hasPermanentMenuKey(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.h.cp:
    void <init>() -> <init>
android.support.v4.view.ViewConfigurationCompat$HoneycombViewConfigurationVersionImpl -> android.support.v4.h.cq:
    void <init>() -> <init>
    boolean hasPermanentMenuKey(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$IcsViewConfigurationVersionImpl -> android.support.v4.h.cr:
    void <init>() -> <init>
    boolean hasPermanentMenuKey(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.h.cs:
    boolean hasPermanentMenuKey(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatICS -> android.support.v4.h.ct:
    boolean hasPermanentMenuKey(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewParentCompat -> android.support.v4.h.cu:
    android.support.v4.view.ViewParentCompat$ViewParentCompatImpl IMPL -> a
    boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int) -> a
    void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int) -> b
    void onStopNestedScroll(android.view.ViewParent,android.view.View) -> a
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int) -> a
    void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[]) -> a
    boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean) -> a
    boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.ViewParentCompat$ViewParentCompatICSImpl -> android.support.v4.h.cv:
    void <init>() -> <init>
android.support.v4.view.ViewParentCompat$ViewParentCompatImpl -> android.support.v4.h.cw:
    boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int) -> a
    void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int) -> b
    void onStopNestedScroll(android.view.ViewParent,android.view.View) -> a
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int) -> a
    void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[]) -> a
    boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean) -> a
    boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float) -> a
android.support.v4.view.ViewParentCompat$ViewParentCompatKitKatImpl -> android.support.v4.h.cx:
    void <init>() -> <init>
android.support.v4.view.ViewParentCompat$ViewParentCompatLollipopImpl -> android.support.v4.h.cy:
    void <init>() -> <init>
    boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int) -> a
    void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int) -> b
    void onStopNestedScroll(android.view.ViewParent,android.view.View) -> a
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int) -> a
    void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[]) -> a
    boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean) -> a
    boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float) -> a
android.support.v4.view.ViewParentCompat$ViewParentCompatStubImpl -> android.support.v4.h.cz:
    void <init>() -> <init>
    boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int) -> a
    void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int) -> b
    void onStopNestedScroll(android.view.ViewParent,android.view.View) -> a
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int) -> a
    void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[]) -> a
    boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean) -> a
    boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float) -> a
android.support.v4.view.ViewParentCompatLollipop -> android.support.v4.h.da:
    boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int) -> a
    void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int) -> b
    void onStopNestedScroll(android.view.ViewParent,android.view.View) -> a
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int) -> a
    void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[]) -> a
    boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean) -> a
    boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float) -> a
android.support.v4.view.ViewPropertyAnimatorCompat -> android.support.v4.h.db:
    java.lang.ref.WeakReference mView -> b
    java.lang.Runnable mStartAction -> c
    java.lang.Runnable mEndAction -> d
    int mOldLayerType -> e
    android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl IMPL -> a
    void <init>(android.view.View) -> <init>
    android.support.v4.view.ViewPropertyAnimatorCompat setDuration(long) -> a
    android.support.v4.view.ViewPropertyAnimatorCompat alpha(float) -> a
    android.support.v4.view.ViewPropertyAnimatorCompat translationY(float) -> b
    long getDuration() -> a
    android.support.v4.view.ViewPropertyAnimatorCompat setInterpolator(android.view.animation.Interpolator) -> a
    android.support.v4.view.ViewPropertyAnimatorCompat setStartDelay(long) -> b
    void cancel() -> b
    void start() -> c
    android.support.v4.view.ViewPropertyAnimatorCompat setListener(android.support.v4.view.ViewPropertyAnimatorListener) -> a
    android.support.v4.view.ViewPropertyAnimatorCompat setUpdateListener(android.support.v4.view.ViewPropertyAnimatorUpdateListener) -> a
    java.lang.Runnable access$100(android.support.v4.view.ViewPropertyAnimatorCompat) -> a
    java.lang.Runnable access$000(android.support.v4.view.ViewPropertyAnimatorCompat) -> b
    int access$402(android.support.v4.view.ViewPropertyAnimatorCompat,int) -> a
    int access$400(android.support.v4.view.ViewPropertyAnimatorCompat) -> c
    void <clinit>() -> <clinit>
android.support.v4.view.ViewPropertyAnimatorCompat$1 -> android.support.v4.h.dc:
android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl -> android.support.v4.h.dd:
    java.util.WeakHashMap mStarterMap -> a
    void <init>() -> <init>
    void setDuration(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,long) -> a
    void alpha(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float) -> a
    void translationY(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float) -> b
    long getDuration(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> a
    void setInterpolator(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.view.animation.Interpolator) -> a
    void setStartDelay(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,long) -> b
    void cancel(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> b
    void start(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> c
    void setListener(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorListener) -> a
    void setUpdateListener(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorUpdateListener) -> a
    void startAnimation(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> d
    void removeStartMessage(android.view.View) -> a
    void postStartMessage(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> e
    void access$200(android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl,android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> a
android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl$Starter -> android.support.v4.h.de:
    java.lang.ref.WeakReference mViewRef -> a
    android.support.v4.view.ViewPropertyAnimatorCompat mVpa -> b
    android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl this$0 -> c
    void <init>(android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl,android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> <init>
    void run() -> run
    void <init>(android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl,android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorCompat$1) -> <init>
android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl -> android.support.v4.h.df:
    java.util.WeakHashMap mLayerMap -> b
    void <init>() -> <init>
    void setDuration(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,long) -> a
    void alpha(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float) -> a
    void translationY(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float) -> b
    long getDuration(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> a
    void setInterpolator(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.view.animation.Interpolator) -> a
    void setStartDelay(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,long) -> b
    void cancel(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> b
    void start(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> c
    void setListener(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorListener) -> a
android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl$MyVpaListener -> android.support.v4.h.dg:
    android.support.v4.view.ViewPropertyAnimatorCompat mVpa -> a
    void <init>(android.support.v4.view.ViewPropertyAnimatorCompat) -> <init>
    void onAnimationStart(android.view.View) -> a
    void onAnimationEnd(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
android.support.v4.view.ViewPropertyAnimatorCompat$JBMr2ViewPropertyAnimatorCompatImpl -> android.support.v4.h.dh:
    void <init>() -> <init>
android.support.v4.view.ViewPropertyAnimatorCompat$JBViewPropertyAnimatorCompatImpl -> android.support.v4.h.di:
    void <init>() -> <init>
    void setListener(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorListener) -> a
android.support.v4.view.ViewPropertyAnimatorCompat$KitKatViewPropertyAnimatorCompatImpl -> android.support.v4.h.dj:
    void <init>() -> <init>
    void setUpdateListener(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorUpdateListener) -> a
android.support.v4.view.ViewPropertyAnimatorCompat$LollipopViewPropertyAnimatorCompatImpl -> android.support.v4.h.dk:
    void <init>() -> <init>
android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl -> android.support.v4.h.dl:
    void setDuration(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,long) -> a
    long getDuration(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> a
    void setInterpolator(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.view.animation.Interpolator) -> a
    void setStartDelay(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,long) -> b
    void alpha(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float) -> a
    void cancel(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> b
    void translationY(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,float) -> b
    void start(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View) -> c
    void setListener(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorListener) -> a
    void setUpdateListener(android.support.v4.view.ViewPropertyAnimatorCompat,android.view.View,android.support.v4.view.ViewPropertyAnimatorUpdateListener) -> a
android.support.v4.view.ViewPropertyAnimatorCompatICS -> android.support.v4.h.dm:
    void setDuration(android.view.View,long) -> a
    void alpha(android.view.View,float) -> a
    void translationY(android.view.View,float) -> b
    long getDuration(android.view.View) -> a
    void setInterpolator(android.view.View,android.view.animation.Interpolator) -> a
    void setStartDelay(android.view.View,long) -> b
    void cancel(android.view.View) -> b
    void start(android.view.View) -> c
    void setListener(android.view.View,android.support.v4.view.ViewPropertyAnimatorListener) -> a
android.support.v4.view.ViewPropertyAnimatorCompatICS$1 -> android.support.v4.h.dn:
    android.support.v4.view.ViewPropertyAnimatorListener val$listener -> a
    android.view.View val$view -> b
    void <init>(android.support.v4.view.ViewPropertyAnimatorListener,android.view.View) -> <init>
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
android.support.v4.view.ViewPropertyAnimatorCompatJB -> android.support.v4.h.do:
    void setListener(android.view.View,android.support.v4.view.ViewPropertyAnimatorListener) -> a
android.support.v4.view.ViewPropertyAnimatorCompatJB$1 -> android.support.v4.h.dp:
    android.support.v4.view.ViewPropertyAnimatorListener val$listener -> a
    android.view.View val$view -> b
    void <init>(android.support.v4.view.ViewPropertyAnimatorListener,android.view.View) -> <init>
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
android.support.v4.view.ViewPropertyAnimatorCompatKK -> android.support.v4.h.dq:
    void setUpdateListener(android.view.View,android.support.v4.view.ViewPropertyAnimatorUpdateListener) -> a
android.support.v4.view.ViewPropertyAnimatorCompatKK$1 -> android.support.v4.h.dr:
    android.support.v4.view.ViewPropertyAnimatorUpdateListener val$listener -> a
    android.view.View val$view -> b
    void <init>(android.support.v4.view.ViewPropertyAnimatorUpdateListener,android.view.View) -> <init>
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
android.support.v4.view.ViewPropertyAnimatorListener -> android.support.v4.h.ds:
    void onAnimationStart(android.view.View) -> a
    void onAnimationEnd(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
android.support.v4.view.ViewPropertyAnimatorListenerAdapter -> android.support.v4.h.dt:
    void <init>() -> <init>
    void onAnimationStart(android.view.View) -> a
    void onAnimationEnd(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
android.support.v4.view.ViewPropertyAnimatorUpdateListener -> android.support.v4.h.du:
    void onAnimationUpdate(android.view.View) -> a
android.support.v4.view.WindowInsetsCompat -> android.support.v4.h.dv:
    void <init>() -> <init>
    int getSystemWindowInsetLeft() -> a
    int getSystemWindowInsetTop() -> b
    int getSystemWindowInsetRight() -> c
    int getSystemWindowInsetBottom() -> d
    android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int) -> a
android.support.v4.view.WindowInsetsCompatApi21 -> android.support.v4.h.dw:
    android.view.WindowInsets mSource -> a
    void <init>(android.view.WindowInsets) -> <init>
    int getSystemWindowInsetLeft() -> a
    int getSystemWindowInsetTop() -> b
    int getSystemWindowInsetRight() -> c
    int getSystemWindowInsetBottom() -> d
    android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int) -> a
    android.view.WindowInsets unwrap() -> e
android.support.v4.view.accessibility.AccessibilityEventCompat -> android.support.v4.h.a.a:
    android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventVersionImpl IMPL -> a
    android.support.v4.view.accessibility.AccessibilityRecordCompat asRecord(android.view.accessibility.AccessibilityEvent) -> a
    void <clinit>() -> <clinit>
android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventIcsImpl -> android.support.v4.h.a.b:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventKitKatImpl -> android.support.v4.h.a.c:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventStubImpl -> android.support.v4.h.a.d:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventVersionImpl -> android.support.v4.h.a.e:
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.h.a.f:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    void <init>(java.lang.Object) -> <init>
    java.lang.Object getInfo() -> a
    int getActions() -> b
    void addAction(int) -> a
    void getBoundsInParent(android.graphics.Rect) -> a
    void getBoundsInScreen(android.graphics.Rect) -> b
    boolean isCheckable() -> c
    boolean isChecked() -> d
    boolean isFocusable() -> e
    boolean isFocused() -> f
    boolean isSelected() -> g
    boolean isClickable() -> h
    boolean isLongClickable() -> i
    boolean isEnabled() -> j
    boolean isPassword() -> k
    boolean isScrollable() -> l
    void setScrollable(boolean) -> a
    java.lang.CharSequence getPackageName() -> m
    java.lang.CharSequence getClassName() -> n
    void setClassName(java.lang.CharSequence) -> a
    java.lang.CharSequence getText() -> o
    java.lang.CharSequence getContentDescription() -> p
    java.lang.String getViewIdResourceName() -> q
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String getActionSymbolicName(int) -> b
    void <clinit>() -> <clinit>
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi21Impl -> android.support.v4.h.a.g:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi22Impl -> android.support.v4.h.a.h:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.h.a.i:
    void <init>() -> <init>
    void addAction(java.lang.Object,int) -> a
    int getActions(java.lang.Object) -> a
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> b
    java.lang.CharSequence getContentDescription(java.lang.Object) -> c
    java.lang.CharSequence getPackageName(java.lang.Object) -> d
    java.lang.CharSequence getText(java.lang.Object) -> e
    boolean isCheckable(java.lang.Object) -> f
    boolean isChecked(java.lang.Object) -> g
    boolean isClickable(java.lang.Object) -> h
    boolean isEnabled(java.lang.Object) -> i
    boolean isFocusable(java.lang.Object) -> j
    boolean isFocused(java.lang.Object) -> k
    boolean isLongClickable(java.lang.Object) -> l
    boolean isPassword(java.lang.Object) -> m
    boolean isScrollable(java.lang.Object) -> n
    boolean isSelected(java.lang.Object) -> o
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.h.a.j:
    int getActions(java.lang.Object) -> a
    void addAction(java.lang.Object,int) -> a
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    boolean isCheckable(java.lang.Object) -> f
    boolean isChecked(java.lang.Object) -> g
    boolean isFocusable(java.lang.Object) -> j
    boolean isFocused(java.lang.Object) -> k
    boolean isSelected(java.lang.Object) -> o
    boolean isClickable(java.lang.Object) -> h
    boolean isLongClickable(java.lang.Object) -> l
    boolean isEnabled(java.lang.Object) -> i
    boolean isPassword(java.lang.Object) -> m
    boolean isScrollable(java.lang.Object) -> n
    void setScrollable(java.lang.Object,boolean) -> a
    java.lang.CharSequence getPackageName(java.lang.Object) -> d
    java.lang.CharSequence getClassName(java.lang.Object) -> b
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    java.lang.CharSequence getText(java.lang.Object) -> e
    java.lang.CharSequence getContentDescription(java.lang.Object) -> c
    java.lang.String getViewIdResourceName(java.lang.Object) -> p
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.h.a.k:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr1Impl -> android.support.v4.h.a.l:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr2Impl -> android.support.v4.h.a.m:
    void <init>() -> <init>
    java.lang.String getViewIdResourceName(java.lang.Object) -> p
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoKitKatImpl -> android.support.v4.h.a.n:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.h.a.o:
    void <init>() -> <init>
    void addAction(java.lang.Object,int) -> a
    int getActions(java.lang.Object) -> a
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> b
    java.lang.CharSequence getContentDescription(java.lang.Object) -> c
    java.lang.CharSequence getPackageName(java.lang.Object) -> d
    java.lang.CharSequence getText(java.lang.Object) -> e
    boolean isCheckable(java.lang.Object) -> f
    boolean isChecked(java.lang.Object) -> g
    boolean isClickable(java.lang.Object) -> h
    boolean isEnabled(java.lang.Object) -> i
    boolean isFocusable(java.lang.Object) -> j
    boolean isFocused(java.lang.Object) -> k
    boolean isLongClickable(java.lang.Object) -> l
    boolean isPassword(java.lang.Object) -> m
    boolean isScrollable(java.lang.Object) -> n
    boolean isSelected(java.lang.Object) -> o
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
    java.lang.String getViewIdResourceName(java.lang.Object) -> p
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.h.a.p:
    void addAction(java.lang.Object,int) -> a
    int getActions(java.lang.Object) -> a
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> b
    java.lang.CharSequence getContentDescription(java.lang.Object) -> c
    java.lang.CharSequence getPackageName(java.lang.Object) -> d
    java.lang.CharSequence getText(java.lang.Object) -> e
    boolean isCheckable(java.lang.Object) -> f
    boolean isChecked(java.lang.Object) -> g
    boolean isClickable(java.lang.Object) -> h
    boolean isEnabled(java.lang.Object) -> i
    boolean isFocusable(java.lang.Object) -> j
    boolean isFocused(java.lang.Object) -> k
    boolean isLongClickable(java.lang.Object) -> l
    boolean isPassword(java.lang.Object) -> m
    boolean isScrollable(java.lang.Object) -> n
    boolean isSelected(java.lang.Object) -> o
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2 -> android.support.v4.h.a.q:
    java.lang.String getViewIdResourceName(java.lang.Object) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.h.a.r:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat findFocus(int) -> b
    void <clinit>() -> <clinit>
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.h.a.s:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.h.a.t:
    void <init>() -> <init>
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.h.a.u:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    void <init>(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl,android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> <init>
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl -> android.support.v4.h.a.v:
    void <init>() -> <init>
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1 -> android.support.v4.h.a.w:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl this$0 -> b
    void <init>(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl,android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> <init>
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    java.lang.Object findFocus(int) -> b
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.h.a.x:
    void <init>() -> <init>
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.h.a.y:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.h.a.z:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    void <init>(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> <init>
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.h.a.aa:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat -> android.support.v4.h.a.ab:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1 -> android.support.v4.h.a.ac:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge val$bridge -> a
    void <init>(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge) -> <init>
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
    android.view.accessibility.AccessibilityNodeInfo findFocus(int) -> findFocus
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge -> android.support.v4.h.a.ad:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object findFocus(int) -> b
android.support.v4.view.accessibility.AccessibilityRecordCompat -> android.support.v4.h.a.ae:
    android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl IMPL -> a
    java.lang.Object mRecord -> b
    void <init>(java.lang.Object) -> <init>
    void setScrollable(boolean) -> a
    void setScrollX(int) -> a
    void setScrollY(int) -> b
    void setMaxScrollX(int) -> c
    void setMaxScrollY(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl -> android.support.v4.h.a.af:
    void <init>() -> <init>
    void setScrollX(java.lang.Object,int) -> a
    void setScrollY(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl -> android.support.v4.h.a.ag:
    void <init>() -> <init>
    void setMaxScrollX(java.lang.Object,int) -> c
    void setMaxScrollY(java.lang.Object,int) -> d
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl -> android.support.v4.h.a.ah:
    void setScrollable(java.lang.Object,boolean) -> a
    void setScrollX(java.lang.Object,int) -> a
    void setScrollY(java.lang.Object,int) -> b
    void setMaxScrollX(java.lang.Object,int) -> c
    void setMaxScrollY(java.lang.Object,int) -> d
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl -> android.support.v4.h.a.ai:
    void <init>() -> <init>
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl -> android.support.v4.h.a.aj:
    void <init>() -> <init>
    void setMaxScrollX(java.lang.Object,int) -> c
    void setMaxScrollY(java.lang.Object,int) -> d
    void setScrollX(java.lang.Object,int) -> a
    void setScrollY(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityRecordCompatIcs -> android.support.v4.h.a.ak:
    void setScrollX(java.lang.Object,int) -> a
    void setScrollY(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1 -> android.support.v4.h.a.al:
    void setMaxScrollX(java.lang.Object,int) -> a
    void setMaxScrollY(java.lang.Object,int) -> b
android.support.v4.widget.AutoScrollHelper -> android.support.v4.widget.a:
    android.support.v4.widget.AutoScrollHelper$ClampedScroller mScroller -> a
    android.view.animation.Interpolator mEdgeInterpolator -> b
    android.view.View mTarget -> c
    java.lang.Runnable mRunnable -> d
    float[] mRelativeEdges -> e
    float[] mMaximumEdges -> f
    int mEdgeType -> g
    int mActivationDelay -> h
    float[] mRelativeVelocity -> i
    float[] mMinimumVelocity -> j
    float[] mMaximumVelocity -> k
    boolean mAlreadyDelayed -> l
    boolean mNeedsReset -> m
    boolean mNeedsCancel -> n
    boolean mAnimating -> o
    boolean mEnabled -> p
    boolean mExclusive -> q
    int DEFAULT_ACTIVATION_DELAY -> r
    void <init>(android.view.View) -> <init>
    android.support.v4.widget.AutoScrollHelper setEnabled(boolean) -> a
    android.support.v4.widget.AutoScrollHelper setMaximumVelocity(float,float) -> a
    android.support.v4.widget.AutoScrollHelper setMinimumVelocity(float,float) -> b
    android.support.v4.widget.AutoScrollHelper setRelativeVelocity(float,float) -> c
    android.support.v4.widget.AutoScrollHelper setEdgeType(int) -> a
    android.support.v4.widget.AutoScrollHelper setRelativeEdges(float,float) -> d
    android.support.v4.widget.AutoScrollHelper setMaximumEdges(float,float) -> e
    android.support.v4.widget.AutoScrollHelper setActivationDelay(int) -> b
    android.support.v4.widget.AutoScrollHelper setRampUpDuration(int) -> c
    android.support.v4.widget.AutoScrollHelper setRampDownDuration(int) -> d
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean shouldAnimate() -> a
    void startAnimating() -> b
    void requestStop() -> c
    float computeTargetVelocity(int,float,float,float) -> a
    void scrollTargetBy(int,int) -> a
    boolean canTargetScrollHorizontally(int) -> e
    boolean canTargetScrollVertically(int) -> f
    float getEdgeValue(float,float,float,float) -> a
    float constrainEdgeValue(float,float) -> f
    int constrain(int,int,int) -> b
    float constrain(float,float,float) -> b
    void cancelTargetTouch() -> d
    boolean access$100(android.support.v4.widget.AutoScrollHelper) -> a
    boolean access$200(android.support.v4.widget.AutoScrollHelper) -> b
    boolean access$202(android.support.v4.widget.AutoScrollHelper,boolean) -> a
    android.support.v4.widget.AutoScrollHelper$ClampedScroller access$300(android.support.v4.widget.AutoScrollHelper) -> c
    boolean access$400(android.support.v4.widget.AutoScrollHelper) -> d
    boolean access$102(android.support.v4.widget.AutoScrollHelper,boolean) -> b
    boolean access$500(android.support.v4.widget.AutoScrollHelper) -> e
    boolean access$502(android.support.v4.widget.AutoScrollHelper,boolean) -> c
    void access$600(android.support.v4.widget.AutoScrollHelper) -> f
    android.view.View access$700(android.support.v4.widget.AutoScrollHelper) -> g
    int access$800(int,int,int) -> a
    float access$900(float,float,float) -> a
    void <clinit>() -> <clinit>
android.support.v4.widget.AutoScrollHelper$1 -> android.support.v4.widget.b:
android.support.v4.widget.AutoScrollHelper$ClampedScroller -> android.support.v4.widget.c:
    int mRampUpDuration -> a
    int mRampDownDuration -> b
    float mTargetVelocityX -> c
    float mTargetVelocityY -> d
    long mStartTime -> e
    long mDeltaTime -> f
    int mDeltaX -> g
    int mDeltaY -> h
    long mStopTime -> i
    float mStopValue -> j
    int mEffectiveRampDown -> k
    void <init>() -> <init>
    void setRampUpDuration(int) -> a
    void setRampDownDuration(int) -> b
    void start() -> a
    void requestStop() -> b
    boolean isFinished() -> c
    float getValueAt(long) -> a
    float interpolateValue(float) -> a
    void computeScrollDelta() -> d
    void setTargetVelocity(float,float) -> a
    int getHorizontalDirection() -> e
    int getVerticalDirection() -> f
    int getDeltaX() -> g
    int getDeltaY() -> h
android.support.v4.widget.AutoScrollHelper$ScrollAnimationRunnable -> android.support.v4.widget.d:
    android.support.v4.widget.AutoScrollHelper this$0 -> a
    void <init>(android.support.v4.widget.AutoScrollHelper) -> <init>
    void run() -> run
    void <init>(android.support.v4.widget.AutoScrollHelper,android.support.v4.widget.AutoScrollHelper$1) -> <init>
android.support.v4.widget.CompoundButtonCompat -> android.support.v4.widget.e:
    android.support.v4.widget.CompoundButtonCompat$CompoundButtonCompatImpl IMPL -> a
    void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList) -> a
    void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton) -> a
    void <clinit>() -> <clinit>
android.support.v4.widget.CompoundButtonCompat$Api23CompoundButtonImpl -> android.support.v4.widget.f:
    void <init>() -> <init>
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton) -> a
android.support.v4.widget.CompoundButtonCompat$BaseCompoundButtonCompat -> android.support.v4.widget.g:
    void <init>() -> <init>
    void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList) -> a
    void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton) -> a
android.support.v4.widget.CompoundButtonCompat$CompoundButtonCompatImpl -> android.support.v4.widget.h:
    void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList) -> a
    void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton) -> a
android.support.v4.widget.CompoundButtonCompat$LollipopCompoundButtonImpl -> android.support.v4.widget.i:
    void <init>() -> <init>
    void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList) -> a
    void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode) -> a
android.support.v4.widget.CompoundButtonCompatApi23 -> android.support.v4.widget.j:
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton) -> a
android.support.v4.widget.CompoundButtonCompatDonut -> android.support.v4.widget.k:
    java.lang.reflect.Field sButtonDrawableField -> a
    boolean sButtonDrawableFieldFetched -> b
    void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList) -> a
    void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode) -> a
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton) -> a
android.support.v4.widget.CompoundButtonCompatLollipop -> android.support.v4.widget.l:
    void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList) -> a
    void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode) -> a
android.support.v4.widget.CursorAdapter -> android.support.v4.widget.m:
    boolean mDataValid -> a
    boolean mAutoRequery -> b
    android.database.Cursor mCursor -> c
    android.content.Context mContext -> d
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.widget.FilterQueryProvider mFilterQueryProvider -> i
    void <init>(android.content.Context,android.database.Cursor,boolean) -> <init>
    void init(android.content.Context,android.database.Cursor,int) -> a
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    void onContentChanged() -> b
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.widget.n:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.widget.o:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void <init>(android.support.v4.widget.CursorAdapter) -> <init>
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.widget.p:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void <init>(android.support.v4.widget.CursorAdapter) -> <init>
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
    void <init>(android.support.v4.widget.CursorAdapter,android.support.v4.widget.CursorAdapter$1) -> <init>
android.support.v4.widget.CursorFilter -> android.support.v4.widget.q:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    void <init>(android.support.v4.widget.CursorFilter$CursorFilterClient) -> <init>
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.widget.r:
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.s:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void <init>(android.content.Context) -> <init>
    void setSize(int,int) -> a
    boolean isFinished() -> a
    boolean onPull(float,float) -> a
    boolean onRelease() -> b
    boolean onAbsorb(int) -> a
    boolean draw(android.graphics.Canvas) -> a
    void <clinit>() -> <clinit>
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.t:
    void <init>() -> <init>
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    boolean onRelease(java.lang.Object) -> b
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
    boolean onPull(java.lang.Object,float,float) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.u:
    void <init>() -> <init>
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    boolean onRelease(java.lang.Object) -> b
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
    boolean onPull(java.lang.Object,float,float) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.v:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    boolean onRelease(java.lang.Object) -> b
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
    boolean onPull(java.lang.Object,float,float) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectLollipopImpl -> android.support.v4.widget.w:
    void <init>() -> <init>
    boolean onPull(java.lang.Object,float,float) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.x:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> b
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatLollipop -> android.support.v4.widget.y:
    boolean onPull(java.lang.Object,float,float) -> a
android.support.v4.widget.ListViewAutoScrollHelper -> android.support.v4.widget.z:
    android.widget.ListView mTarget -> a
    void <init>(android.widget.ListView) -> <init>
    void scrollTargetBy(int,int) -> a
    boolean canTargetScrollHorizontally(int) -> e
    boolean canTargetScrollVertically(int) -> f
android.support.v4.widget.NestedScrollView -> android.support.v4.widget.NestedScrollView:
    long mLastScroll -> a
    android.graphics.Rect mTempRect -> b
    android.support.v4.widget.ScrollerCompat mScroller -> c
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowTop -> d
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowBottom -> e
    int mLastMotionY -> f
    boolean mIsLayoutDirty -> g
    boolean mIsLaidOut -> h
    android.view.View mChildToScrollTo -> i
    boolean mIsBeingDragged -> j
    android.view.VelocityTracker mVelocityTracker -> k
    boolean mFillViewport -> l
    boolean mSmoothScrollingEnabled -> m
    int mTouchSlop -> n
    int mMinimumVelocity -> o
    int mMaximumVelocity -> p
    int mActivePointerId -> q
    int[] mScrollOffset -> r
    int[] mScrollConsumed -> s
    int mNestedYOffset -> t
    android.support.v4.widget.NestedScrollView$SavedState mSavedState -> u
    android.support.v4.widget.NestedScrollView$AccessibilityDelegate ACCESSIBILITY_DELEGATE -> v
    int[] SCROLLVIEW_STYLEABLE -> w
    android.support.v4.view.NestedScrollingParentHelper mParentHelper -> x
    android.support.v4.view.NestedScrollingChildHelper mChildHelper -> y
    float mVerticalScrollFactor -> z
    android.support.v4.widget.NestedScrollView$OnScrollChangeListener mOnScrollChangeListener -> A
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setNestedScrollingEnabled(boolean) -> setNestedScrollingEnabled
    boolean isNestedScrollingEnabled() -> isNestedScrollingEnabled
    boolean startNestedScroll(int) -> startNestedScroll
    void stopNestedScroll() -> stopNestedScroll
    boolean hasNestedScrollingParent() -> hasNestedScrollingParent
    boolean dispatchNestedScroll(int,int,int,int,int[]) -> dispatchNestedScroll
    boolean dispatchNestedPreScroll(int,int,int[],int[]) -> dispatchNestedPreScroll
    boolean dispatchNestedFling(float,float,boolean) -> dispatchNestedFling
    boolean dispatchNestedPreFling(float,float) -> dispatchNestedPreFling
    boolean onStartNestedScroll(android.view.View,android.view.View,int) -> onStartNestedScroll
    void onNestedScrollAccepted(android.view.View,android.view.View,int) -> onNestedScrollAccepted
    void onStopNestedScroll(android.view.View) -> onStopNestedScroll
    void onNestedScroll(android.view.View,int,int,int,int) -> onNestedScroll
    void onNestedPreScroll(android.view.View,int,int,int[]) -> onNestedPreScroll
    boolean onNestedFling(android.view.View,float,float,boolean) -> onNestedFling
    boolean onNestedPreFling(android.view.View,float,float) -> onNestedPreFling
    int getNestedScrollAxes() -> getNestedScrollAxes
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    float getTopFadingEdgeStrength() -> getTopFadingEdgeStrength
    float getBottomFadingEdgeStrength() -> getBottomFadingEdgeStrength
    int getMaxScrollAmount() -> getMaxScrollAmount
    void initScrollView() -> a
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void setOnScrollChangeListener(android.support.v4.widget.NestedScrollView$OnScrollChangeListener) -> setOnScrollChangeListener
    boolean canScroll() -> b
    void setFillViewport(boolean) -> setFillViewport
    void setSmoothScrollingEnabled(boolean) -> setSmoothScrollingEnabled
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    void onMeasure(int,int) -> onMeasure
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean inChild(int,int) -> c
    void initOrResetVelocityTracker() -> c
    void initVelocityTrackerIfNotExists() -> d
    void recycleVelocityTracker() -> e
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    float getVerticalScrollFactorCompat() -> getVerticalScrollFactorCompat
    void onOverScrolled(int,int,boolean,boolean) -> onOverScrolled
    boolean overScrollByCompat(int,int,int,int,int,int,int,int,boolean) -> a
    int getScrollRange() -> getScrollRange
    android.view.View findFocusableViewInBounds(boolean,int,int) -> a
    boolean pageScroll(int) -> a
    boolean fullScroll(int) -> b
    boolean scrollAndFocus(int,int,int) -> a
    boolean arrowScroll(int) -> c
    boolean isOffScreen(android.view.View) -> a
    boolean isWithinDeltaOfScreen(android.view.View,int,int) -> a
    void doScrollY(int) -> e
    void smoothScrollBy(int,int) -> a
    void smoothScrollTo(int,int) -> b
    int computeVerticalScrollRange() -> computeVerticalScrollRange
    int computeVerticalScrollOffset() -> computeVerticalScrollOffset
    int computeVerticalScrollExtent() -> computeVerticalScrollExtent
    int computeHorizontalScrollRange() -> computeHorizontalScrollRange
    int computeHorizontalScrollOffset() -> computeHorizontalScrollOffset
    int computeHorizontalScrollExtent() -> computeHorizontalScrollExtent
    void measureChild(android.view.View,int,int) -> measureChild
    void measureChildWithMargins(android.view.View,int,int,int,int) -> measureChildWithMargins
    void computeScroll() -> computeScroll
    void scrollToChild(android.view.View) -> b
    boolean scrollToChildRect(android.graphics.Rect,boolean) -> a
    int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect) -> a
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean) -> requestChildRectangleOnScreen
    void requestLayout() -> requestLayout
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onAttachedToWindow() -> onAttachedToWindow
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean isViewDescendantOf(android.view.View,android.view.View) -> a
    void fling(int) -> d
    void flingWithNestedDispatch(int) -> f
    void endDrag() -> f
    void scrollTo(int,int) -> scrollTo
    void ensureGlows() -> g
    void draw(android.graphics.Canvas) -> draw
    int clamp(int,int,int) -> b
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int access$000(android.support.v4.widget.NestedScrollView) -> a
    void <clinit>() -> <clinit>
android.support.v4.widget.NestedScrollView$AccessibilityDelegate -> android.support.v4.widget.aa:
    void <init>() -> <init>
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.widget.NestedScrollView$OnScrollChangeListener -> android.support.v4.widget.ab:
    void onScrollChange(android.support.v4.widget.NestedScrollView,int,int,int,int) -> a
android.support.v4.widget.NestedScrollView$SavedState -> android.support.v4.widget.ac:
    int scrollPosition -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.os.Parcelable) -> <init>
    void <init>(android.os.Parcel) -> <init>
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
android.support.v4.widget.NestedScrollView$SavedState$1 -> android.support.v4.widget.ad:
    void <init>() -> <init>
    android.support.v4.widget.NestedScrollView$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.NestedScrollView$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.PopupWindowCompat -> android.support.v4.widget.ae:
    android.support.v4.widget.PopupWindowCompat$PopupWindowImpl IMPL -> a
    void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int) -> a
    void setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
    void setWindowLayoutType(android.widget.PopupWindow,int) -> a
    void <clinit>() -> <clinit>
android.support.v4.widget.PopupWindowCompat$Api21PopupWindowImpl -> android.support.v4.widget.af:
    void <init>() -> <init>
    void setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
android.support.v4.widget.PopupWindowCompat$Api23PopupWindowImpl -> android.support.v4.widget.ag:
    void <init>() -> <init>
    void setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
    void setWindowLayoutType(android.widget.PopupWindow,int) -> a
android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl -> android.support.v4.widget.ah:
    void <init>() -> <init>
    void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int) -> a
    void setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
    void setWindowLayoutType(android.widget.PopupWindow,int) -> a
android.support.v4.widget.PopupWindowCompat$GingerbreadPopupWindowImpl -> android.support.v4.widget.ai:
    void <init>() -> <init>
    void setWindowLayoutType(android.widget.PopupWindow,int) -> a
android.support.v4.widget.PopupWindowCompat$KitKatPopupWindowImpl -> android.support.v4.widget.aj:
    void <init>() -> <init>
    void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int) -> a
android.support.v4.widget.PopupWindowCompat$PopupWindowImpl -> android.support.v4.widget.ak:
    void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int) -> a
    void setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
    void setWindowLayoutType(android.widget.PopupWindow,int) -> a
android.support.v4.widget.PopupWindowCompatApi21 -> android.support.v4.widget.al:
    java.lang.reflect.Field sOverlapAnchorField -> a
    void setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
    void <clinit>() -> <clinit>
android.support.v4.widget.PopupWindowCompatApi23 -> android.support.v4.widget.am:
    void setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
    void setWindowLayoutType(android.widget.PopupWindow,int) -> a
android.support.v4.widget.PopupWindowCompatGingerbread -> android.support.v4.widget.an:
    java.lang.reflect.Method sSetWindowLayoutTypeMethod -> a
    boolean sSetWindowLayoutTypeMethodAttempted -> b
    void setWindowLayoutType(android.widget.PopupWindow,int) -> a
android.support.v4.widget.PopupWindowCompatKitKat -> android.support.v4.widget.ao:
    void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int) -> a
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.widget.ap:
    int mLayout -> j
    int mDropDownLayout -> k
    android.view.LayoutInflater mInflater -> l
    void <init>(android.content.Context,int,android.database.Cursor,boolean) -> <init>
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.aq:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl mImpl -> b
    android.support.v4.widget.ScrollerCompat create(android.content.Context) -> a
    android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator) -> a
    void <init>(android.content.Context,android.view.animation.Interpolator) -> <init>
    void <init>(int,android.content.Context,android.view.animation.Interpolator) -> <init>
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalY() -> d
    float getCurrVelocity() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int) -> a
    void fling(int,int,int,int,int,int,int,int) -> a
    void fling(int,int,int,int,int,int,int,int,int,int) -> a
    boolean springBack(int,int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.ar:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    float getCurrVelocity(java.lang.Object) -> d
    boolean computeScrollOffset(java.lang.Object) -> e
    void startScroll(java.lang.Object,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
    boolean springBack(java.lang.Object,int,int,int,int,int,int) -> a
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.as:
    void <init>() -> <init>
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    float getCurrVelocity(java.lang.Object) -> d
    boolean computeScrollOffset(java.lang.Object) -> e
    void startScroll(java.lang.Object,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
    boolean springBack(java.lang.Object,int,int,int,int,int,int) -> a
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.at:
    void <init>() -> <init>
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    float getCurrVelocity(java.lang.Object) -> d
    boolean computeScrollOffset(java.lang.Object) -> e
    void startScroll(java.lang.Object,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
    boolean springBack(java.lang.Object,int,int,int,int,int,int) -> a
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.au:
    void <init>() -> <init>
    float getCurrVelocity(java.lang.Object) -> d
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.av:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> a
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalY(java.lang.Object) -> f
    boolean springBack(java.lang.Object,int,int,int,int,int,int) -> a
android.support.v4.widget.ScrollerCompatIcs -> android.support.v4.widget.aw:
    float getCurrVelocity(java.lang.Object) -> a
android.support.v4.widget.Space -> android.support.v4.widget.Space:
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context) -> <init>
    void draw(android.graphics.Canvas) -> draw
    int getDefaultSize2(int,int) -> a
    void onMeasure(int,int) -> onMeasure
android.support.v4.widget.TintableCompoundButton -> android.support.v4.widget.ax:
    void setSupportButtonTintList(android.content.res.ColorStateList) -> setSupportButtonTintList
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> setSupportButtonTintMode
android.support.v7.app.ActionBar -> android.support.v7.a.a:
    void <init>() -> <init>
    int getDisplayOptions() -> a
    void setHomeButtonEnabled(boolean) -> a
    android.content.Context getThemedContext() -> b
    void setHideOnContentScrollEnabled(boolean) -> b
    void setElevation(float) -> a
    void setDefaultDisplayHomeAsUpEnabled(boolean) -> c
    void setShowHideAnimationEnabled(boolean) -> d
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchMenuVisibilityChanged(boolean) -> e
    android.support.v7.view.ActionMode startActionMode(android.support.v7.view.ActionMode$Callback) -> a
    boolean invalidateOptionsMenu() -> c
    boolean onKeyShortcut(int,android.view.KeyEvent) -> a
    boolean collapseActionView() -> d
    void setWindowTitle(java.lang.CharSequence) -> a
android.support.v7.app.ActionBar$LayoutParams -> android.support.v7.a.b:
    int gravity -> a
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(int,int) -> <init>
    void <init>(android.support.v7.app.ActionBar$LayoutParams) -> <init>
    void <init>(android.view.ViewGroup$LayoutParams) -> <init>
android.support.v7.app.ActionBar$OnMenuVisibilityListener -> android.support.v7.a.c:
    void onMenuVisibilityChanged(boolean) -> a
android.support.v7.app.ActionBar$Tab -> android.support.v7.a.d:
    void <init>() -> <init>
    android.graphics.drawable.Drawable getIcon() -> a
    java.lang.CharSequence getText() -> b
    android.view.View getCustomView() -> c
    void select() -> d
    java.lang.CharSequence getContentDescription() -> e
android.support.v7.app.AlertController -> android.support.v7.a.e:
    android.content.Context mContext -> a
    android.support.v7.app.AppCompatDialog mDialog -> b
    android.view.Window mWindow -> c
    java.lang.CharSequence mTitle -> d
    java.lang.CharSequence mMessage -> e
    android.widget.ListView mListView -> f
    android.view.View mView -> g
    int mViewLayoutResId -> h
    int mViewSpacingLeft -> i
    int mViewSpacingTop -> j
    int mViewSpacingRight -> k
    int mViewSpacingBottom -> l
    boolean mViewSpacingSpecified -> m
    android.widget.Button mButtonPositive -> n
    java.lang.CharSequence mButtonPositiveText -> o
    android.os.Message mButtonPositiveMessage -> p
    android.widget.Button mButtonNegative -> q
    java.lang.CharSequence mButtonNegativeText -> r
    android.os.Message mButtonNegativeMessage -> s
    android.widget.Button mButtonNeutral -> t
    java.lang.CharSequence mButtonNeutralText -> u
    android.os.Message mButtonNeutralMessage -> v
    android.support.v4.widget.NestedScrollView mScrollView -> w
    int mIconId -> x
    android.graphics.drawable.Drawable mIcon -> y
    android.widget.ImageView mIconView -> z
    android.widget.TextView mTitleView -> A
    android.widget.TextView mMessageView -> B
    android.view.View mCustomTitleView -> C
    android.widget.ListAdapter mAdapter -> D
    int mCheckedItem -> E
    int mAlertDialogLayout -> F
    int mButtonPanelSideLayout -> G
    int mListLayout -> H
    int mMultiChoiceItemLayout -> I
    int mSingleChoiceItemLayout -> J
    int mListItemLayout -> K
    int mButtonPanelLayoutHint -> L
    android.os.Handler mHandler -> M
    android.view.View$OnClickListener mButtonHandler -> N
    void <init>(android.content.Context,android.support.v7.app.AppCompatDialog,android.view.Window) -> <init>
    boolean canTextInput(android.view.View) -> a
    void installContent() -> a
    int selectContentView() -> b
    void setTitle(java.lang.CharSequence) -> a
    void setCustomTitle(android.view.View) -> b
    void setMessage(java.lang.CharSequence) -> b
    void setView(int) -> a
    void setView(android.view.View) -> c
    void setView(android.view.View,int,int,int,int) -> a
    void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener,android.os.Message) -> a
    void setIcon(int) -> b
    void setIcon(android.graphics.drawable.Drawable) -> a
    int getIconAttributeResId(int) -> c
    boolean onKeyDown(int,android.view.KeyEvent) -> a
    boolean onKeyUp(int,android.view.KeyEvent) -> b
    android.view.ViewGroup resolvePanel(android.view.View,android.view.View) -> a
    void setupView() -> c
    void setScrollIndicators(android.view.ViewGroup,android.view.View,int,int) -> a
    void setupCustomContent(android.view.ViewGroup) -> a
    void setupTitle(android.view.ViewGroup) -> b
    void setupContent(android.view.ViewGroup) -> c
    void manageScrollIndicators(android.view.View,android.view.View,android.view.View) -> b
    void setupButtons(android.view.ViewGroup) -> d
    android.widget.Button access$000(android.support.v7.app.AlertController) -> a
    android.os.Message access$100(android.support.v7.app.AlertController) -> b
    android.widget.Button access$200(android.support.v7.app.AlertController) -> c
    android.os.Message access$300(android.support.v7.app.AlertController) -> d
    android.widget.Button access$400(android.support.v7.app.AlertController) -> e
    android.os.Message access$500(android.support.v7.app.AlertController) -> f
    android.support.v7.app.AppCompatDialog access$600(android.support.v7.app.AlertController) -> g
    android.os.Handler access$700(android.support.v7.app.AlertController) -> h
    void access$800(android.view.View,android.view.View,android.view.View) -> a
    android.support.v4.widget.NestedScrollView access$900(android.support.v7.app.AlertController) -> i
    android.widget.ListView access$1000(android.support.v7.app.AlertController) -> j
    int access$1100(android.support.v7.app.AlertController) -> k
    int access$1200(android.support.v7.app.AlertController) -> l
    int access$1300(android.support.v7.app.AlertController) -> m
    int access$1400(android.support.v7.app.AlertController) -> n
    android.widget.ListAdapter access$1502(android.support.v7.app.AlertController,android.widget.ListAdapter) -> a
    int access$1602(android.support.v7.app.AlertController,int) -> a
    android.widget.ListView access$1002(android.support.v7.app.AlertController,android.widget.ListView) -> a
android.support.v7.app.AlertController$1 -> android.support.v7.a.f:
    android.support.v7.app.AlertController this$0 -> a
    void <init>(android.support.v7.app.AlertController) -> <init>
    void onClick(android.view.View) -> onClick
android.support.v7.app.AlertController$2 -> android.support.v7.a.g:
    android.view.View val$top -> a
    android.view.View val$bottom -> b
    android.support.v7.app.AlertController this$0 -> c
    void <init>(android.support.v7.app.AlertController,android.view.View,android.view.View) -> <init>
    void onScrollChange(android.support.v4.widget.NestedScrollView,int,int,int,int) -> a
android.support.v7.app.AlertController$3 -> android.support.v7.a.h:
    android.view.View val$top -> a
    android.view.View val$bottom -> b
    android.support.v7.app.AlertController this$0 -> c
    void <init>(android.support.v7.app.AlertController,android.view.View,android.view.View) -> <init>
    void run() -> run
android.support.v7.app.AlertController$4 -> android.support.v7.a.i:
    android.view.View val$top -> a
    android.view.View val$bottom -> b
    android.support.v7.app.AlertController this$0 -> c
    void <init>(android.support.v7.app.AlertController,android.view.View,android.view.View) -> <init>
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
android.support.v7.app.AlertController$5 -> android.support.v7.a.j:
    android.view.View val$top -> a
    android.view.View val$bottom -> b
    android.support.v7.app.AlertController this$0 -> c
    void <init>(android.support.v7.app.AlertController,android.view.View,android.view.View) -> <init>
    void run() -> run
android.support.v7.app.AlertController$AlertParams -> android.support.v7.a.k:
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> b
    int mIconId -> c
    android.graphics.drawable.Drawable mIcon -> d
    int mIconAttrId -> e
    java.lang.CharSequence mTitle -> f
    android.view.View mCustomTitleView -> g
    java.lang.CharSequence mMessage -> h
    java.lang.CharSequence mPositiveButtonText -> i
    android.content.DialogInterface$OnClickListener mPositiveButtonListener -> j
    java.lang.CharSequence mNegativeButtonText -> k
    android.content.DialogInterface$OnClickListener mNegativeButtonListener -> l
    java.lang.CharSequence mNeutralButtonText -> m
    android.content.DialogInterface$OnClickListener mNeutralButtonListener -> n
    boolean mCancelable -> o
    android.content.DialogInterface$OnCancelListener mOnCancelListener -> p
    android.content.DialogInterface$OnDismissListener mOnDismissListener -> q
    android.content.DialogInterface$OnKeyListener mOnKeyListener -> r
    java.lang.CharSequence[] mItems -> s
    android.widget.ListAdapter mAdapter -> t
    android.content.DialogInterface$OnClickListener mOnClickListener -> u
    int mViewLayoutResId -> v
    android.view.View mView -> w
    int mViewSpacingLeft -> x
    int mViewSpacingTop -> y
    int mViewSpacingRight -> z
    int mViewSpacingBottom -> A
    boolean mViewSpacingSpecified -> B
    boolean[] mCheckedItems -> C
    boolean mIsMultiChoice -> D
    boolean mIsSingleChoice -> E
    int mCheckedItem -> F
    android.content.DialogInterface$OnMultiChoiceClickListener mOnCheckboxClickListener -> G
    android.database.Cursor mCursor -> H
    java.lang.String mLabelColumn -> I
    java.lang.String mIsCheckedColumn -> J
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener -> K
    android.support.v7.app.AlertController$AlertParams$OnPrepareListViewListener mOnPrepareListViewListener -> L
    boolean mRecycleOnMeasure -> M
    void <init>(android.content.Context) -> <init>
    void apply(android.support.v7.app.AlertController) -> a
    void createListView(android.support.v7.app.AlertController) -> b
android.support.v7.app.AlertController$AlertParams$1 -> android.support.v7.a.l:
    android.widget.ListView val$listView -> a
    android.support.v7.app.AlertController$AlertParams this$0 -> b
    void <init>(android.support.v7.app.AlertController$AlertParams,android.content.Context,int,int,java.lang.CharSequence[],android.widget.ListView) -> <init>
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
android.support.v7.app.AlertController$AlertParams$2 -> android.support.v7.a.m:
    int mLabelIndex -> d
    int mIsCheckedIndex -> e
    android.widget.ListView val$listView -> a
    android.support.v7.app.AlertController val$dialog -> b
    android.support.v7.app.AlertController$AlertParams this$0 -> c
    void <init>(android.support.v7.app.AlertController$AlertParams,android.content.Context,android.database.Cursor,boolean,android.widget.ListView,android.support.v7.app.AlertController) -> <init>
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
android.support.v7.app.AlertController$AlertParams$3 -> android.support.v7.a.n:
    android.support.v7.app.AlertController val$dialog -> a
    android.support.v7.app.AlertController$AlertParams this$0 -> b
    void <init>(android.support.v7.app.AlertController$AlertParams,android.support.v7.app.AlertController) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v7.app.AlertController$AlertParams$4 -> android.support.v7.a.o:
    android.widget.ListView val$listView -> a
    android.support.v7.app.AlertController val$dialog -> b
    android.support.v7.app.AlertController$AlertParams this$0 -> c
    void <init>(android.support.v7.app.AlertController$AlertParams,android.widget.ListView,android.support.v7.app.AlertController) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v7.app.AlertController$AlertParams$OnPrepareListViewListener -> android.support.v7.a.p:
    void onPrepareListView(android.widget.ListView) -> a
android.support.v7.app.AlertController$ButtonHandler -> android.support.v7.a.q:
    java.lang.ref.WeakReference mDialog -> a
    void <init>(android.content.DialogInterface) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
android.support.v7.app.AlertController$CheckedItemAdapter -> android.support.v7.a.r:
    void <init>(android.content.Context,int,int,java.lang.CharSequence[]) -> <init>
    boolean hasStableIds() -> hasStableIds
    long getItemId(int) -> getItemId
android.support.v7.app.AlertDialog -> android.support.v7.a.s:
    android.support.v7.app.AlertController mAlert -> a
    void <init>(android.content.Context,int,boolean) -> <init>
    int resolveDialogTheme(android.content.Context,int) -> a
    void setTitle(java.lang.CharSequence) -> setTitle
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    android.support.v7.app.AlertController access$000(android.support.v7.app.AlertDialog) -> a
android.support.v7.app.AlertDialog$Builder -> android.support.v7.a.t:
    android.support.v7.app.AlertController$AlertParams P -> a
    int mTheme -> b
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,int) -> <init>
    android.content.Context getContext() -> a
    android.support.v7.app.AlertDialog$Builder setTitle(java.lang.CharSequence) -> a
    android.support.v7.app.AlertDialog$Builder setCustomTitle(android.view.View) -> a
    android.support.v7.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable) -> a
    android.support.v7.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener) -> a
    android.support.v7.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener) -> a
    android.support.v7.app.AlertDialog create() -> b
android.support.v7.app.AppCompatActivity -> android.support.v7.a.u:
    android.support.v7.app.AppCompatDelegate mDelegate -> j
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onPostCreate(android.os.Bundle) -> onPostCreate
    android.support.v7.app.ActionBar getSupportActionBar() -> f
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onStop() -> onStop
    void onPostResume() -> onPostResume
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onDestroy() -> onDestroy
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    void supportInvalidateOptionsMenu() -> d
    void invalidateOptionsMenu() -> invalidateOptionsMenu
    void onSupportActionModeStarted(android.support.v7.view.ActionMode) -> a
    void onSupportActionModeFinished(android.support.v7.view.ActionMode) -> b
    android.support.v7.view.ActionMode onWindowStartingSupportActionMode(android.support.v7.view.ActionMode$Callback) -> a
    void onCreateSupportNavigateUpTaskStack(android.support.v4.app.TaskStackBuilder) -> a
    void onPrepareSupportNavigateUpTaskStack(android.support.v4.app.TaskStackBuilder) -> b
    boolean onSupportNavigateUp() -> g
    android.content.Intent getSupportParentActivityIntent() -> a
    boolean supportShouldUpRecreateTask(android.content.Intent) -> a
    void supportNavigateUpTo(android.content.Intent) -> b
    void onContentChanged() -> onContentChanged
    void onSupportContentChanged() -> h
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    android.support.v7.app.AppCompatDelegate getDelegate() -> i
android.support.v7.app.AppCompatCallback -> android.support.v7.a.v:
    void onSupportActionModeStarted(android.support.v7.view.ActionMode) -> a
    void onSupportActionModeFinished(android.support.v7.view.ActionMode) -> b
    android.support.v7.view.ActionMode onWindowStartingSupportActionMode(android.support.v7.view.ActionMode$Callback) -> a
android.support.v7.app.AppCompatDelegate -> android.support.v7.a.w:
    android.support.v7.app.AppCompatDelegate create(android.app.Activity,android.support.v7.app.AppCompatCallback) -> a
    android.support.v7.app.AppCompatDelegate create(android.app.Dialog,android.support.v7.app.AppCompatCallback) -> a
    android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback) -> a
    void <init>() -> <init>
    android.support.v7.app.ActionBar getSupportActionBar() -> a
    android.view.MenuInflater getMenuInflater() -> b
    void onCreate(android.os.Bundle) -> a
    void onPostCreate(android.os.Bundle) -> b
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onStop() -> c
    void onPostResume() -> d
    void setContentView(android.view.View) -> a
    void setContentView(int) -> a
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    void setTitle(java.lang.CharSequence) -> a
    void invalidateOptionsMenu() -> e
    void onDestroy() -> f
    boolean requestWindowFeature(int) -> b
    void installViewFactory() -> g
android.support.v7.app.AppCompatDelegateImplBase -> android.support.v7.a.x:
    android.content.Context mContext -> a
    android.view.Window mWindow -> b
    android.view.Window$Callback mOriginalWindowCallback -> c
    android.view.Window$Callback mAppCompatWindowCallback -> d
    android.support.v7.app.AppCompatCallback mAppCompatCallback -> e
    android.support.v7.app.ActionBar mActionBar -> f
    android.view.MenuInflater mMenuInflater -> g
    boolean mHasActionBar -> h
    boolean mOverlayActionBar -> i
    boolean mOverlayActionMode -> j
    boolean mIsFloating -> k
    boolean mWindowNoTitle -> l
    java.lang.CharSequence mTitle -> m
    boolean mIsDestroyed -> n
    void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback) -> <init>
    void initWindowDecorActionBar() -> h
    android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback) -> a
    android.support.v7.app.ActionBar getSupportActionBar() -> a
    android.support.v7.app.ActionBar peekSupportActionBar() -> i
    android.view.MenuInflater getMenuInflater() -> b
    void onPanelClosed(int,android.view.Menu) -> a
    boolean onMenuOpened(int,android.view.Menu) -> b
    boolean dispatchKeyEvent(android.view.KeyEvent) -> a
    boolean onKeyShortcut(int,android.view.KeyEvent) -> a
    android.content.Context getActionBarThemedContext() -> j
    android.support.v7.view.ActionMode startSupportActionModeFromWindow(android.support.v7.view.ActionMode$Callback) -> a
    void onDestroy() -> f
    boolean isHandleNativeActionModesEnabled() -> k
    boolean isDestroyed() -> l
    android.view.Window$Callback getWindowCallback() -> m
    void setTitle(java.lang.CharSequence) -> a
    void onTitleChanged(java.lang.CharSequence) -> b
    java.lang.CharSequence getTitle() -> n
android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase -> android.support.v7.a.y:
    android.support.v7.app.AppCompatDelegateImplBase this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplBase,android.view.Window$Callback) -> <init>
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent) -> dispatchKeyShortcutEvent
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    void onContentChanged() -> onContentChanged
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
android.support.v7.app.AppCompatDelegateImplV11 -> android.support.v7.a.z:
    void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback) -> <init>
    android.view.View callActivityOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> b
android.support.v7.app.AppCompatDelegateImplV14 -> android.support.v7.a.aa:
    boolean mHandleNativeActionModes -> r
    void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback) -> <init>
    android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback) -> a
    boolean isHandleNativeActionModesEnabled() -> k
android.support.v7.app.AppCompatDelegateImplV14$AppCompatWindowCallbackV14 -> android.support.v7.a.ab:
    android.support.v7.app.AppCompatDelegateImplV14 this$0 -> b
    void <init>(android.support.v7.app.AppCompatDelegateImplV14,android.view.Window$Callback) -> <init>
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback) -> onWindowStartingActionMode
    android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback) -> a
android.support.v7.app.AppCompatDelegateImplV23 -> android.support.v7.a.ac:
    void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback) -> <init>
    android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback) -> a
android.support.v7.app.AppCompatDelegateImplV23$AppCompatWindowCallbackV23 -> android.support.v7.a.ad:
    android.support.v7.app.AppCompatDelegateImplV23 this$0 -> c
    void <init>(android.support.v7.app.AppCompatDelegateImplV23,android.view.Window$Callback) -> <init>
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int) -> onWindowStartingActionMode
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback) -> onWindowStartingActionMode
android.support.v7.app.AppCompatDelegateImplV7 -> android.support.v7.a.ae:
    android.support.v7.widget.DecorContentParent mDecorContentParent -> r
    android.support.v7.app.AppCompatDelegateImplV7$ActionMenuPresenterCallback mActionMenuPresenterCallback -> s
    android.support.v7.app.AppCompatDelegateImplV7$PanelMenuPresenterCallback mPanelMenuPresenterCallback -> t
    android.support.v7.view.ActionMode mActionMode -> m
    android.support.v7.widget.ActionBarContextView mActionModeView -> n
    android.widget.PopupWindow mActionModePopup -> o
    java.lang.Runnable mShowActionModePopup -> p
    android.support.v4.view.ViewPropertyAnimatorCompat mFadeAnim -> q
    boolean mSubDecorInstalled -> u
    android.view.ViewGroup mWindowDecor -> v
    android.view.ViewGroup mSubDecor -> w
    android.widget.TextView mTitleView -> x
    android.view.View mStatusGuard -> y
    boolean mFeatureProgress -> z
    boolean mFeatureIndeterminateProgress -> A
    boolean mClosingActionMenu -> B
    android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState[] mPanels -> C
    android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState mPreparedPanel -> D
    boolean mLongPressBackDown -> E
    boolean mInvalidatePanelMenuPosted -> F
    int mInvalidatePanelMenuFeatures -> G
    java.lang.Runnable mInvalidatePanelMenuRunnable -> H
    boolean mEnableDefaultActionBarUp -> I
    android.graphics.Rect mTempRect1 -> J
    android.graphics.Rect mTempRect2 -> K
    android.support.v7.app.AppCompatViewInflater mAppCompatViewInflater -> L
    void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback) -> <init>
    void onCreate(android.os.Bundle) -> a
    void onPostCreate(android.os.Bundle) -> b
    void initWindowDecorActionBar() -> h
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onStop() -> c
    void onPostResume() -> d
    void setContentView(android.view.View) -> a
    void setContentView(int) -> a
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    void ensureSubDecor() -> p
    android.view.ViewGroup createSubDecor() -> q
    void onSubDecorInstalled(android.view.ViewGroup) -> a
    void applyFixedSizeWindow() -> r
    boolean requestWindowFeature(int) -> b
    void onTitleChanged(java.lang.CharSequence) -> b
    void onPanelClosed(int,android.view.Menu) -> a
    boolean onMenuOpened(int,android.view.Menu) -> b
    boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.view.menu.MenuBuilder) -> a
    android.support.v7.view.ActionMode startSupportActionMode(android.support.v7.view.ActionMode$Callback) -> b
    void invalidateOptionsMenu() -> e
    android.support.v7.view.ActionMode startSupportActionModeFromWindow(android.support.v7.view.ActionMode$Callback) -> a
    void endOnGoingFadeAnimation() -> s
    boolean onBackPressed() -> o
    boolean onKeyShortcut(int,android.view.KeyEvent) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> a
    boolean onKeyUp(int,android.view.KeyEvent) -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> c
    android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> c
    boolean shouldInheritContext(android.view.ViewParent) -> a
    void installViewFactory() -> g
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    android.view.View callActivityOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> b
    void openPanel(android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState,android.view.KeyEvent) -> a
    boolean initializePanelDecor(android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState) -> a
    void reopenMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean initializePanelMenu(android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState) -> b
    boolean initializePanelContent(android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState) -> c
    boolean preparePanel(android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState,android.view.KeyEvent) -> b
    void checkCloseActionMenu(android.support.v7.view.menu.MenuBuilder) -> b
    void closePanel(int) -> c
    void closePanel(android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState,boolean) -> a
    boolean onKeyDownPanel(int,android.view.KeyEvent) -> d
    boolean onKeyUpPanel(int,android.view.KeyEvent) -> e
    void callOnPanelClosed(int,android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState,android.view.Menu) -> a
    android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState findMenuPanel(android.view.Menu) -> a
    android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState getPanelState(int,boolean) -> a
    boolean performPanelShortcut(android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState,int,android.view.KeyEvent,int) -> a
    void invalidatePanelMenu(int) -> d
    void doInvalidatePanelMenu(int) -> e
    int updateStatusGuard(int) -> f
    void throwFeatureRequestIfSubDecorInstalled() -> t
    int sanitizeWindowFeatureId(int) -> g
    void dismissPopups() -> u
    int access$000(android.support.v7.app.AppCompatDelegateImplV7) -> a
    void access$100(android.support.v7.app.AppCompatDelegateImplV7,int) -> a
    boolean access$202(android.support.v7.app.AppCompatDelegateImplV7,boolean) -> a
    int access$002(android.support.v7.app.AppCompatDelegateImplV7,int) -> b
    int access$300(android.support.v7.app.AppCompatDelegateImplV7,int) -> c
    void access$400(android.support.v7.app.AppCompatDelegateImplV7) -> b
    void access$500(android.support.v7.app.AppCompatDelegateImplV7) -> c
    android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState access$800(android.support.v7.app.AppCompatDelegateImplV7,android.view.Menu) -> a
    void access$900(android.support.v7.app.AppCompatDelegateImplV7,int,android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState,android.view.Menu) -> a
    void access$1000(android.support.v7.app.AppCompatDelegateImplV7,android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState,boolean) -> a
    void access$1100(android.support.v7.app.AppCompatDelegateImplV7,android.support.v7.view.menu.MenuBuilder) -> a
    void access$1400(android.support.v7.app.AppCompatDelegateImplV7,int) -> d
android.support.v7.app.AppCompatDelegateImplV7$1 -> android.support.v7.a.af:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    void run() -> run
android.support.v7.app.AppCompatDelegateImplV7$2 -> android.support.v7.a.ag:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,android.support.v4.view.WindowInsetsCompat) -> a
android.support.v7.app.AppCompatDelegateImplV7$3 -> android.support.v7.a.ah:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    void onFitSystemWindows(android.graphics.Rect) -> a
android.support.v7.app.AppCompatDelegateImplV7$4 -> android.support.v7.a.ai:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    void onAttachedFromWindow() -> a
    void onDetachedFromWindow() -> b
android.support.v7.app.AppCompatDelegateImplV7$5 -> android.support.v7.a.aj:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    void run() -> run
android.support.v7.app.AppCompatDelegateImplV7$5$1 -> android.support.v7.a.ak:
    android.support.v7.app.AppCompatDelegateImplV7$5 this$1 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7$5) -> <init>
    void onAnimationEnd(android.view.View) -> b
    void onAnimationStart(android.view.View) -> a
android.support.v7.app.AppCompatDelegateImplV7$6 -> android.support.v7.a.al:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    void onAnimationEnd(android.view.View) -> b
    void onAnimationStart(android.view.View) -> a
android.support.v7.app.AppCompatDelegateImplV7$ActionMenuPresenterCallback -> android.support.v7.a.am:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7,android.support.v7.app.AppCompatDelegateImplV7$1) -> <init>
android.support.v7.app.AppCompatDelegateImplV7$ActionModeCallbackWrapperV7 -> android.support.v7.a.an:
    android.support.v7.view.ActionMode$Callback mWrapped -> b
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7,android.support.v7.view.ActionMode$Callback) -> <init>
    boolean onCreateActionMode(android.support.v7.view.ActionMode,android.view.Menu) -> a
    boolean onPrepareActionMode(android.support.v7.view.ActionMode,android.view.Menu) -> b
    boolean onActionItemClicked(android.support.v7.view.ActionMode,android.view.MenuItem) -> a
    void onDestroyActionMode(android.support.v7.view.ActionMode) -> a
android.support.v7.app.AppCompatDelegateImplV7$ActionModeCallbackWrapperV7$1 -> android.support.v7.a.ao:
    android.support.v7.app.AppCompatDelegateImplV7$ActionModeCallbackWrapperV7 this$1 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7$ActionModeCallbackWrapperV7) -> <init>
    void onAnimationEnd(android.view.View) -> b
android.support.v7.app.AppCompatDelegateImplV7$ListMenuDecorView -> android.support.v7.a.ap:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7,android.content.Context) -> <init>
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void setBackgroundResource(int) -> setBackgroundResource
    boolean isOutOfBounds(int,int) -> a
android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState -> android.support.v7.a.aq:
    int featureId -> a
    int background -> b
    int gravity -> c
    int x -> d
    int y -> e
    int windowAnimations -> f
    android.view.ViewGroup decorView -> g
    android.view.View shownPanelView -> h
    android.view.View createdPanelView -> i
    android.support.v7.view.menu.MenuBuilder menu -> j
    android.support.v7.view.menu.ListMenuPresenter listMenuPresenter -> k
    android.content.Context listPresenterContext -> l
    boolean isPrepared -> m
    boolean isHandled -> n
    boolean isOpen -> o
    boolean qwertyMode -> p
    boolean refreshDecorView -> q
    boolean refreshMenuContent -> r
    android.os.Bundle frozenActionViewState -> s
    void <init>(int) -> <init>
    boolean hasPanelItems() -> a
    void setStyle(android.content.Context) -> a
    void setMenu(android.support.v7.view.menu.MenuBuilder) -> a
    android.support.v7.view.menu.MenuView getListMenuView(android.support.v7.view.menu.MenuPresenter$Callback) -> a
android.support.v7.app.AppCompatDelegateImplV7$PanelMenuPresenterCallback -> android.support.v7.a.ar:
    android.support.v7.app.AppCompatDelegateImplV7 this$0 -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7) -> <init>
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder) -> a
    void <init>(android.support.v7.app.AppCompatDelegateImplV7,android.support.v7.app.AppCompatDelegateImplV7$1) -> <init>
android.support.v7.app.AppCompatDialog -> android.support.v7.a.as:
    android.support.v7.app.AppCompatDelegate mDelegate -> a
    void <init>(android.content.Context,int) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setTitle(java.lang.CharSequence) -> setTitle
    void setTitle(int) -> setTitle
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void onStop() -> onStop
    boolean supportRequestWindowFeature(int) -> a
    void invalidateOptionsMenu() -> invalidateOptionsMenu
    android.support.v7.app.AppCompatDelegate getDelegate() -> a
    int getThemeResId(android.content.Context,int) -> a
    void onSupportActionModeStarted(android.support.v7.view.ActionMode) -> a
    void onSupportActionModeFinished(android.support.v7.view.ActionMode) -> b
    android.support.v7.view.ActionMode onWindowStartingSupportActionMode(android.support.v7.view.ActionMode$Callback) -> a
android.support.v7.app.AppCompatViewInflater -> android.support.v7.a.at:
    java.lang.Class[] sConstructorSignature -> a
    int[] sOnClickAttrs -> b
    java.util.Map sConstructorMap -> c
    java.lang.Object[] mConstructorArgs -> d
    void <init>() -> <init>
    android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean) -> a
    android.view.View createViewFromTag(android.content.Context,java.lang.String,android.util.AttributeSet) -> a
    void checkOnClickListener(android.view.View,android.util.AttributeSet) -> a
    android.view.View createView(android.content.Context,java.lang.String,java.lang.String) -> a
    android.content.Context themifyContext(android.content.Context,android.util.AttributeSet,boolean,boolean) -> a
    void <clinit>() -> <clinit>
android.support.v7.app.AppCompatViewInflater$DeclaredOnClickListener -> android.support.v7.a.au:
    android.view.View mHostView -> a
    java.lang.String mMethodName -> b
    java.lang.reflect.Method mResolvedMethod -> c
    android.content.Context mResolvedContext -> d
    void <init>(android.view.View,java.lang.String) -> <init>
    void onClick(android.view.View) -> onClick
    void resolveMethod(android.content.Context,java.lang.String) -> a
android.support.v7.app.ToolbarActionBar -> android.support.v7.a.av:
    android.support.v7.widget.DecorToolbar mDecorToolbar -> a
    android.view.Window$Callback mWindowCallback -> b
    boolean mMenuCallbackSet -> c
    boolean mLastMenuVisibility -> d
    java.util.ArrayList mMenuVisibilityListeners -> e
    java.lang.Runnable mMenuInvalidator -> f
    void setHomeButtonEnabled(boolean) -> a
    void setElevation(float) -> a
    android.content.Context getThemedContext() -> b
    void setDefaultDisplayHomeAsUpEnabled(boolean) -> c
    void setShowHideAnimationEnabled(boolean) -> d
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    int getDisplayOptions() -> a
    boolean invalidateOptionsMenu() -> c
    boolean collapseActionView() -> d
    void populateOptionsMenu() -> e
    boolean onKeyShortcut(int,android.view.KeyEvent) -> a
    void dispatchMenuVisibilityChanged(boolean) -> e
    android.view.Menu getMenu() -> f
    android.view.Window$Callback access$000(android.support.v7.app.ToolbarActionBar) -> a
    android.support.v7.widget.DecorToolbar access$300(android.support.v7.app.ToolbarActionBar) -> b
android.support.v7.app.ToolbarActionBar$1 -> android.support.v7.a.aw:
    android.support.v7.app.ToolbarActionBar this$0 -> a
    void run() -> run
android.support.v7.app.ToolbarActionBar$ActionMenuPresenterCallback -> android.support.v7.a.ax:
    boolean mClosingActionMenu -> b
    android.support.v7.app.ToolbarActionBar this$0 -> a
    void <init>(android.support.v7.app.ToolbarActionBar) -> <init>
    boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    void <init>(android.support.v7.app.ToolbarActionBar,android.support.v7.app.ToolbarActionBar$1) -> <init>
android.support.v7.app.ToolbarActionBar$MenuBuilderCallback -> android.support.v7.a.ay:
    android.support.v7.app.ToolbarActionBar this$0 -> a
    void <init>(android.support.v7.app.ToolbarActionBar) -> <init>
    boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.view.menu.MenuBuilder) -> a
    void <init>(android.support.v7.app.ToolbarActionBar,android.support.v7.app.ToolbarActionBar$1) -> <init>
android.support.v7.app.WindowDecorActionBar -> android.support.v7.a.az:
    android.view.animation.Interpolator sHideInterpolator -> i
    android.view.animation.Interpolator sShowInterpolator -> j
    boolean ALLOW_SHOW_HIDE_ANIMATIONS -> k
    android.content.Context mContext -> l
    android.content.Context mThemedContext -> m
    android.app.Activity mActivity -> n
    android.app.Dialog mDialog -> o
    android.support.v7.widget.ActionBarOverlayLayout mOverlayLayout -> p
    android.support.v7.widget.ActionBarContainer mContainerView -> q
    android.support.v7.widget.DecorToolbar mDecorToolbar -> r
    android.support.v7.widget.ActionBarContextView mContextView -> s
    android.view.View mContentView -> t
    android.support.v7.widget.ScrollingTabContainerView mTabScrollView -> u
    java.util.ArrayList mTabs -> v
    int mSavedTabPosition -> w
    boolean mDisplayHomeAsUpSet -> x
    android.support.v7.app.WindowDecorActionBar$ActionModeImpl mActionMode -> a
    android.support.v7.view.ActionMode mDeferredDestroyActionMode -> b
    android.support.v7.view.ActionMode$Callback mDeferredModeDestroyCallback -> c
    boolean mLastMenuVisibility -> y
    java.util.ArrayList mMenuVisibilityListeners -> z
    boolean mHasEmbeddedTabs -> A
    int mCurWindowVisibility -> B
    boolean mContentAnimations -> C
    boolean mHiddenByApp -> D
    boolean mHiddenBySystem -> E
    boolean mShowingForMode -> F
    boolean mNowShowing -> G
    android.support.v7.view.ViewPropertyAnimatorCompatSet mCurrentShowAnim -> H
    boolean mShowHideAnimationEnabled -> I
    boolean mHideOnContentScroll -> d
    android.support.v4.view.ViewPropertyAnimatorListener mHideListener -> e
    android.support.v4.view.ViewPropertyAnimatorListener mShowListener -> f
    android.support.v4.view.ViewPropertyAnimatorUpdateListener mUpdateListener -> g
    boolean $assertionsDisabled -> h
    void <init>(android.app.Activity,boolean) -> <init>
    void <init>(android.app.Dialog) -> <init>
    void init(android.view.View) -> a
    android.support.v7.widget.DecorToolbar getDecorToolbar(android.view.View) -> b
    void setElevation(float) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void setHasEmbeddedTabs(boolean) -> k
    void completeDeferredDestroyActionMode() -> e
    void onWindowVisibilityChanged(int) -> a
    void setShowHideAnimationEnabled(boolean) -> d
    void dispatchMenuVisibilityChanged(boolean) -> e
    void setDisplayHomeAsUpEnabled(boolean) -> f
    void setHomeButtonEnabled(boolean) -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    void setDisplayOptions(int,int) -> a
    int getNavigationMode() -> f
    int getDisplayOptions() -> a
    android.support.v7.view.ActionMode startActionMode(android.support.v7.view.ActionMode$Callback) -> a
    void enableContentAnimations(boolean) -> g
    void showForActionMode() -> k
    void showForSystem() -> g
    void hideForActionMode() -> l
    void hideForSystem() -> h
    void setHideOnContentScrollEnabled(boolean) -> b
    boolean checkShowingFlags(boolean,boolean,boolean) -> b
    void updateVisibility(boolean) -> l
    void doShow(boolean) -> h
    void doHide(boolean) -> i
    void animateToMode(boolean) -> j
    android.content.Context getThemedContext() -> b
    void onContentScrollStarted() -> i
    void onContentScrollStopped() -> j
    boolean collapseActionView() -> d
    void setDefaultDisplayHomeAsUpEnabled(boolean) -> c
    boolean access$000(android.support.v7.app.WindowDecorActionBar) -> a
    android.view.View access$100(android.support.v7.app.WindowDecorActionBar) -> b
    android.support.v7.widget.ActionBarContainer access$200(android.support.v7.app.WindowDecorActionBar) -> c
    android.support.v7.view.ViewPropertyAnimatorCompatSet access$302(android.support.v7.app.WindowDecorActionBar,android.support.v7.view.ViewPropertyAnimatorCompatSet) -> a
    android.support.v7.widget.ActionBarOverlayLayout access$400(android.support.v7.app.WindowDecorActionBar) -> d
    boolean access$500(android.support.v7.app.WindowDecorActionBar) -> e
    boolean access$600(android.support.v7.app.WindowDecorActionBar) -> f
    boolean access$700(boolean,boolean,boolean) -> a
    android.support.v7.widget.ActionBarContextView access$800(android.support.v7.app.WindowDecorActionBar) -> g
    android.support.v7.widget.DecorToolbar access$900(android.support.v7.app.WindowDecorActionBar) -> h
    android.content.Context access$1000(android.support.v7.app.WindowDecorActionBar) -> i
    void <clinit>() -> <clinit>
android.support.v7.app.WindowDecorActionBar$1 -> android.support.v7.a.ba:
    android.support.v7.app.WindowDecorActionBar this$0 -> a
    void <init>(android.support.v7.app.WindowDecorActionBar) -> <init>
    void onAnimationEnd(android.view.View) -> b
android.support.v7.app.WindowDecorActionBar$2 -> android.support.v7.a.bb:
    android.support.v7.app.WindowDecorActionBar this$0 -> a
    void <init>(android.support.v7.app.WindowDecorActionBar) -> <init>
    void onAnimationEnd(android.view.View) -> b
android.support.v7.app.WindowDecorActionBar$3 -> android.support.v7.a.bc:
    android.support.v7.app.WindowDecorActionBar this$0 -> a
    void <init>(android.support.v7.app.WindowDecorActionBar) -> <init>
    void onAnimationUpdate(android.view.View) -> a
android.support.v7.app.WindowDecorActionBar$ActionModeImpl -> android.support.v7.a.bd:
    android.content.Context mActionModeContext -> b
    android.support.v7.view.menu.MenuBuilder mMenu -> c
    android.support.v7.view.ActionMode$Callback mCallback -> d
    java.lang.ref.WeakReference mCustomView -> e
    android.support.v7.app.WindowDecorActionBar this$0 -> a
    void <init>(android.support.v7.app.WindowDecorActionBar,android.content.Context,android.support.v7.view.ActionMode$Callback) -> <init>
    android.view.MenuInflater getMenuInflater() -> a
    android.view.Menu getMenu() -> b
    void finish() -> c
    void invalidate() -> d
    boolean dispatchOnCreate() -> e
    void setCustomView(android.view.View) -> a
    void setSubtitle(java.lang.CharSequence) -> a
    void setTitle(java.lang.CharSequence) -> b
    void setTitle(int) -> a
    void setSubtitle(int) -> b
    java.lang.CharSequence getTitle() -> f
    java.lang.CharSequence getSubtitle() -> g
    void setTitleOptionalHint(boolean) -> a
    boolean isTitleOptional() -> h
    android.view.View getCustomView() -> i
    boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.view.menu.MenuBuilder) -> a
android.support.v7.appcompat.R -> android.support.v7.b.a:
android.support.v7.appcompat.R$attr -> android.support.v7.b.b:
    int actionBarDivider -> actionBarDivider
    int actionBarItemBackground -> actionBarItemBackground
    int actionBarPopupTheme -> actionBarPopupTheme
    int actionBarSize -> actionBarSize
    int actionBarSplitStyle -> actionBarSplitStyle
    int actionBarStyle -> actionBarStyle
    int actionBarTabBarStyle -> actionBarTabBarStyle
    int actionBarTabStyle -> actionBarTabStyle
    int actionBarTabTextStyle -> actionBarTabTextStyle
    int actionBarTheme -> actionBarTheme
    int actionBarWidgetTheme -> actionBarWidgetTheme
    int actionButtonStyle -> actionButtonStyle
    int actionDropDownStyle -> actionDropDownStyle
    int actionLayout -> actionLayout
    int actionMenuTextAppearance -> actionMenuTextAppearance
    int actionMenuTextColor -> actionMenuTextColor
    int actionModeBackground -> actionModeBackground
    int actionModeCloseButtonStyle -> actionModeCloseButtonStyle
    int actionModeCloseDrawable -> actionModeCloseDrawable
    int actionModeCopyDrawable -> actionModeCopyDrawable
    int actionModeCutDrawable -> actionModeCutDrawable
    int actionModeFindDrawable -> actionModeFindDrawable
    int actionModePasteDrawable -> actionModePasteDrawable
    int actionModePopupWindowStyle -> actionModePopupWindowStyle
    int actionModeSelectAllDrawable -> actionModeSelectAllDrawable
    int actionModeShareDrawable -> actionModeShareDrawable
    int actionModeSplitBackground -> actionModeSplitBackground
    int actionModeStyle -> actionModeStyle
    int actionModeWebSearchDrawable -> actionModeWebSearchDrawable
    int actionOverflowButtonStyle -> actionOverflowButtonStyle
    int actionOverflowMenuStyle -> actionOverflowMenuStyle
    int actionProviderClass -> actionProviderClass
    int actionViewClass -> actionViewClass
    int activityChooserViewStyle -> activityChooserViewStyle
    int alertDialogButtonGroupStyle -> alertDialogButtonGroupStyle
    int alertDialogCenterButtons -> alertDialogCenterButtons
    int alertDialogStyle -> alertDialogStyle
    int alertDialogTheme -> alertDialogTheme
    int allowStacking -> allowStacking
    int arrowHeadLength -> arrowHeadLength
    int arrowShaftLength -> arrowShaftLength
    int autoCompleteTextViewStyle -> autoCompleteTextViewStyle
    int background -> background
    int backgroundSplit -> backgroundSplit
    int backgroundStacked -> backgroundStacked
    int backgroundTint -> backgroundTint
    int backgroundTintMode -> backgroundTintMode
    int barLength -> barLength
    int borderlessButtonStyle -> borderlessButtonStyle
    int buttonBarButtonStyle -> buttonBarButtonStyle
    int buttonBarNegativeButtonStyle -> buttonBarNegativeButtonStyle
    int buttonBarNeutralButtonStyle -> buttonBarNeutralButtonStyle
    int buttonBarPositiveButtonStyle -> buttonBarPositiveButtonStyle
    int buttonBarStyle -> buttonBarStyle
    int buttonPanelSideLayout -> buttonPanelSideLayout
    int buttonStyle -> buttonStyle
    int buttonStyleSmall -> buttonStyleSmall
    int buttonTint -> buttonTint
    int buttonTintMode -> buttonTintMode
    int checkboxStyle -> checkboxStyle
    int checkedTextViewStyle -> checkedTextViewStyle
    int closeIcon -> closeIcon
    int closeItemLayout -> closeItemLayout
    int collapseContentDescription -> collapseContentDescription
    int collapseIcon -> collapseIcon
    int color -> color
    int colorAccent -> colorAccent
    int colorButtonNormal -> colorButtonNormal
    int colorControlActivated -> colorControlActivated
    int colorControlHighlight -> colorControlHighlight
    int colorControlNormal -> colorControlNormal
    int colorPrimary -> colorPrimary
    int colorPrimaryDark -> colorPrimaryDark
    int colorSwitchThumbNormal -> colorSwitchThumbNormal
    int commitIcon -> commitIcon
    int contentInsetEnd -> contentInsetEnd
    int contentInsetLeft -> contentInsetLeft
    int contentInsetRight -> contentInsetRight
    int contentInsetStart -> contentInsetStart
    int controlBackground -> controlBackground
    int customNavigationLayout -> customNavigationLayout
    int defaultQueryHint -> defaultQueryHint
    int dialogPreferredPadding -> dialogPreferredPadding
    int dialogTheme -> dialogTheme
    int displayOptions -> displayOptions
    int divider -> divider
    int dividerHorizontal -> dividerHorizontal
    int dividerPadding -> dividerPadding
    int dividerVertical -> dividerVertical
    int drawableSize -> drawableSize
    int drawerArrowStyle -> drawerArrowStyle
    int dropDownListViewStyle -> dropDownListViewStyle
    int dropdownListPreferredItemHeight -> dropdownListPreferredItemHeight
    int editTextBackground -> editTextBackground
    int editTextColor -> editTextColor
    int editTextStyle -> editTextStyle
    int elevation -> elevation
    int expandActivityOverflowButtonDrawable -> expandActivityOverflowButtonDrawable
    int gapBetweenBars -> gapBetweenBars
    int goIcon -> goIcon
    int height -> height
    int hideOnContentScroll -> hideOnContentScroll
    int homeAsUpIndicator -> homeAsUpIndicator
    int homeLayout -> homeLayout
    int icon -> icon
    int iconifiedByDefault -> iconifiedByDefault
    int imageButtonStyle -> imageButtonStyle
    int indeterminateProgressStyle -> indeterminateProgressStyle
    int initialActivityCount -> initialActivityCount
    int isLightTheme -> isLightTheme
    int itemPadding -> itemPadding
    int layout -> layout
    int listChoiceBackgroundIndicator -> listChoiceBackgroundIndicator
    int listDividerAlertDialog -> listDividerAlertDialog
    int listItemLayout -> listItemLayout
    int listLayout -> listLayout
    int listPopupWindowStyle -> listPopupWindowStyle
    int listPreferredItemHeight -> listPreferredItemHeight
    int listPreferredItemHeightLarge -> listPreferredItemHeightLarge
    int listPreferredItemHeightSmall -> listPreferredItemHeightSmall
    int listPreferredItemPaddingLeft -> listPreferredItemPaddingLeft
    int listPreferredItemPaddingRight -> listPreferredItemPaddingRight
    int logo -> logo
    int logoDescription -> logoDescription
    int maxButtonHeight -> maxButtonHeight
    int measureWithLargestChild -> measureWithLargestChild
    int multiChoiceItemLayout -> multiChoiceItemLayout
    int navigationContentDescription -> navigationContentDescription
    int navigationIcon -> navigationIcon
    int navigationMode -> navigationMode
    int overlapAnchor -> overlapAnchor
    int paddingEnd -> paddingEnd
    int paddingStart -> paddingStart
    int panelBackground -> panelBackground
    int panelMenuListTheme -> panelMenuListTheme
    int panelMenuListWidth -> panelMenuListWidth
    int popupMenuStyle -> popupMenuStyle
    int popupTheme -> popupTheme
    int popupWindowStyle -> popupWindowStyle
    int preserveIconSpacing -> preserveIconSpacing
    int progressBarPadding -> progressBarPadding
    int progressBarStyle -> progressBarStyle
    int queryBackground -> queryBackground
    int queryHint -> queryHint
    int radioButtonStyle -> radioButtonStyle
    int ratingBarStyle -> ratingBarStyle
    int searchHintIcon -> searchHintIcon
    int searchIcon -> searchIcon
    int searchViewStyle -> searchViewStyle
    int seekBarStyle -> seekBarStyle
    int selectableItemBackground -> selectableItemBackground
    int selectableItemBackgroundBorderless -> selectableItemBackgroundBorderless
    int showAsAction -> showAsAction
    int showDividers -> showDividers
    int showText -> showText
    int singleChoiceItemLayout -> singleChoiceItemLayout
    int spinBars -> spinBars
    int spinnerDropDownItemStyle -> spinnerDropDownItemStyle
    int spinnerStyle -> spinnerStyle
    int splitTrack -> splitTrack
    int state_above_anchor -> state_above_anchor
    int submitBackground -> submitBackground
    int subtitle -> subtitle
    int subtitleTextAppearance -> subtitleTextAppearance
    int subtitleTextColor -> subtitleTextColor
    int subtitleTextStyle -> subtitleTextStyle
    int suggestionRowLayout -> suggestionRowLayout
    int switchMinWidth -> switchMinWidth
    int switchPadding -> switchPadding
    int switchStyle -> switchStyle
    int switchTextAppearance -> switchTextAppearance
    int textAllCaps -> textAllCaps
    int textAppearanceLargePopupMenu -> textAppearanceLargePopupMenu
    int textAppearanceListItem -> textAppearanceListItem
    int textAppearanceListItemSmall -> textAppearanceListItemSmall
    int textAppearanceSearchResultSubtitle -> textAppearanceSearchResultSubtitle
    int textAppearanceSearchResultTitle -> textAppearanceSearchResultTitle
    int textAppearanceSmallPopupMenu -> textAppearanceSmallPopupMenu
    int textColorAlertDialogListItem -> textColorAlertDialogListItem
    int textColorSearchUrl -> textColorSearchUrl
    int theme -> theme
    int thickness -> thickness
    int thumbTextPadding -> thumbTextPadding
    int title -> title
    int titleMarginBottom -> titleMarginBottom
    int titleMarginEnd -> titleMarginEnd
    int titleMarginStart -> titleMarginStart
    int titleMarginTop -> titleMarginTop
    int titleMargins -> titleMargins
    int titleTextAppearance -> titleTextAppearance
    int titleTextColor -> titleTextColor
    int titleTextStyle -> titleTextStyle
    int toolbarNavigationButtonStyle -> toolbarNavigationButtonStyle
    int toolbarStyle -> toolbarStyle
    int track -> track
    int voiceIcon -> voiceIcon
    int windowActionBar -> windowActionBar
    int windowActionBarOverlay -> windowActionBarOverlay
    int windowActionModeOverlay -> windowActionModeOverlay
    int windowFixedHeightMajor -> windowFixedHeightMajor
    int windowFixedHeightMinor -> windowFixedHeightMinor
    int windowFixedWidthMajor -> windowFixedWidthMajor
    int windowFixedWidthMinor -> windowFixedWidthMinor
    int windowMinWidthMajor -> windowMinWidthMajor
    int windowMinWidthMinor -> windowMinWidthMinor
    int windowNoTitle -> windowNoTitle
android.support.v7.appcompat.R$bool -> android.support.v7.b.c:
    int abc_action_bar_embed_tabs -> abc_action_bar_embed_tabs
    int abc_action_bar_embed_tabs_pre_jb -> abc_action_bar_embed_tabs_pre_jb
    int abc_action_bar_expanded_action_views_exclusive -> abc_action_bar_expanded_action_views_exclusive
    int abc_allow_stacked_button_bar -> abc_allow_stacked_button_bar
    int abc_config_actionMenuItemAllCaps -> abc_config_actionMenuItemAllCaps
    int abc_config_allowActionMenuItemTextWithIcon -> abc_config_allowActionMenuItemTextWithIcon
    int abc_config_closeDialogWhenTouchOutside -> abc_config_closeDialogWhenTouchOutside
    int abc_config_showMenuShortcutsWhenKeyboardPresent -> abc_config_showMenuShortcutsWhenKeyboardPresent
android.support.v7.appcompat.R$color -> android.support.v7.b.d:
    int abc_background_cache_hint_selector_material_dark -> abc_background_cache_hint_selector_material_dark
    int abc_background_cache_hint_selector_material_light -> abc_background_cache_hint_selector_material_light
    int abc_color_highlight_material -> abc_color_highlight_material
    int abc_input_method_navigation_guard -> abc_input_method_navigation_guard
    int abc_primary_text_disable_only_material_dark -> abc_primary_text_disable_only_material_dark
    int abc_primary_text_disable_only_material_light -> abc_primary_text_disable_only_material_light
    int abc_primary_text_material_dark -> abc_primary_text_material_dark
    int abc_primary_text_material_light -> abc_primary_text_material_light
    int abc_search_url_text -> abc_search_url_text
    int abc_search_url_text_normal -> abc_search_url_text_normal
    int abc_search_url_text_pressed -> abc_search_url_text_pressed
    int abc_search_url_text_selected -> abc_search_url_text_selected
    int abc_secondary_text_material_dark -> abc_secondary_text_material_dark
    int abc_secondary_text_material_light -> abc_secondary_text_material_light
    int accent_material_dark -> accent_material_dark
    int accent_material_light -> accent_material_light
    int background_floating_material_dark -> background_floating_material_dark
    int background_floating_material_light -> background_floating_material_light
    int background_material_dark -> background_material_dark
    int background_material_light -> background_material_light
    int bright_foreground_disabled_material_dark -> bright_foreground_disabled_material_dark
    int bright_foreground_disabled_material_light -> bright_foreground_disabled_material_light
    int bright_foreground_inverse_material_dark -> bright_foreground_inverse_material_dark
    int bright_foreground_inverse_material_light -> bright_foreground_inverse_material_light
    int bright_foreground_material_dark -> bright_foreground_material_dark
    int bright_foreground_material_light -> bright_foreground_material_light
    int button_material_dark -> button_material_dark
    int button_material_light -> button_material_light
    int dim_foreground_disabled_material_dark -> dim_foreground_disabled_material_dark
    int dim_foreground_disabled_material_light -> dim_foreground_disabled_material_light
    int dim_foreground_material_dark -> dim_foreground_material_dark
    int dim_foreground_material_light -> dim_foreground_material_light
    int foreground_material_dark -> foreground_material_dark
    int foreground_material_light -> foreground_material_light
    int highlighted_text_material_dark -> highlighted_text_material_dark
    int highlighted_text_material_light -> highlighted_text_material_light
    int hint_foreground_material_dark -> hint_foreground_material_dark
    int hint_foreground_material_light -> hint_foreground_material_light
    int material_blue_grey_800 -> material_blue_grey_800
    int material_blue_grey_900 -> material_blue_grey_900
    int material_blue_grey_950 -> material_blue_grey_950
    int material_deep_teal_200 -> material_deep_teal_200
    int material_deep_teal_500 -> material_deep_teal_500
    int material_grey_100 -> material_grey_100
    int material_grey_300 -> material_grey_300
    int material_grey_50 -> material_grey_50
    int material_grey_600 -> material_grey_600
    int material_grey_800 -> material_grey_800
    int material_grey_850 -> material_grey_850
    int material_grey_900 -> material_grey_900
    int primary_dark_material_dark -> primary_dark_material_dark
    int primary_dark_material_light -> primary_dark_material_light
    int primary_material_dark -> primary_material_dark
    int primary_material_light -> primary_material_light
    int primary_text_default_material_dark -> primary_text_default_material_dark
    int primary_text_default_material_light -> primary_text_default_material_light
    int primary_text_disabled_material_dark -> primary_text_disabled_material_dark
    int primary_text_disabled_material_light -> primary_text_disabled_material_light
    int ripple_material_dark -> ripple_material_dark
    int ripple_material_light -> ripple_material_light
    int secondary_text_default_material_dark -> secondary_text_default_material_dark
    int secondary_text_default_material_light -> secondary_text_default_material_light
    int secondary_text_disabled_material_dark -> secondary_text_disabled_material_dark
    int secondary_text_disabled_material_light -> secondary_text_disabled_material_light
    int switch_thumb_disabled_material_dark -> switch_thumb_disabled_material_dark
    int switch_thumb_disabled_material_light -> switch_thumb_disabled_material_light
    int switch_thumb_material_dark -> switch_thumb_material_dark
    int switch_thumb_material_light -> switch_thumb_material_light
    int switch_thumb_normal_material_dark -> switch_thumb_normal_material_dark
    int switch_thumb_normal_material_light -> switch_thumb_normal_material_light
android.support.v7.appcompat.R$dimen -> android.support.v7.b.e:
    int abc_action_bar_content_inset_material -> abc_action_bar_content_inset_material
    int abc_action_bar_default_height_material -> abc_action_bar_default_height_material
    int abc_action_bar_default_padding_end_material -> abc_action_bar_default_padding_end_material
    int abc_action_bar_default_padding_start_material -> abc_action_bar_default_padding_start_material
    int abc_action_bar_icon_vertical_padding_material -> abc_action_bar_icon_vertical_padding_material
    int abc_action_bar_overflow_padding_end_material -> abc_action_bar_overflow_padding_end_material
    int abc_action_bar_overflow_padding_start_material -> abc_action_bar_overflow_padding_start_material
    int abc_action_bar_progress_bar_size -> abc_action_bar_progress_bar_size
    int abc_action_bar_stacked_max_height -> abc_action_bar_stacked_max_height
    int abc_action_bar_stacked_tab_max_width -> abc_action_bar_stacked_tab_max_width
    int abc_action_bar_subtitle_bottom_margin_material -> abc_action_bar_subtitle_bottom_margin_material
    int abc_action_bar_subtitle_top_margin_material -> abc_action_bar_subtitle_top_margin_material
    int abc_action_button_min_height_material -> abc_action_button_min_height_material
    int abc_action_button_min_width_material -> abc_action_button_min_width_material
    int abc_action_button_min_width_overflow_material -> abc_action_button_min_width_overflow_material
    int abc_alert_dialog_button_bar_height -> abc_alert_dialog_button_bar_height
    int abc_button_inset_horizontal_material -> abc_button_inset_horizontal_material
    int abc_button_inset_vertical_material -> abc_button_inset_vertical_material
    int abc_button_padding_horizontal_material -> abc_button_padding_horizontal_material
    int abc_button_padding_vertical_material -> abc_button_padding_vertical_material
    int abc_config_prefDialogWidth -> abc_config_prefDialogWidth
    int abc_control_corner_material -> abc_control_corner_material
    int abc_control_inset_material -> abc_control_inset_material
    int abc_control_padding_material -> abc_control_padding_material
    int abc_dialog_fixed_height_major -> abc_dialog_fixed_height_major
    int abc_dialog_fixed_height_minor -> abc_dialog_fixed_height_minor
    int abc_dialog_fixed_width_major -> abc_dialog_fixed_width_major
    int abc_dialog_fixed_width_minor -> abc_dialog_fixed_width_minor
    int abc_dialog_list_padding_vertical_material -> abc_dialog_list_padding_vertical_material
    int abc_dialog_min_width_major -> abc_dialog_min_width_major
    int abc_dialog_min_width_minor -> abc_dialog_min_width_minor
    int abc_dialog_padding_material -> abc_dialog_padding_material
    int abc_dialog_padding_top_material -> abc_dialog_padding_top_material
    int abc_disabled_alpha_material_dark -> abc_disabled_alpha_material_dark
    int abc_disabled_alpha_material_light -> abc_disabled_alpha_material_light
    int abc_dropdownitem_icon_width -> abc_dropdownitem_icon_width
    int abc_dropdownitem_text_padding_left -> abc_dropdownitem_text_padding_left
    int abc_dropdownitem_text_padding_right -> abc_dropdownitem_text_padding_right
    int abc_edit_text_inset_bottom_material -> abc_edit_text_inset_bottom_material
    int abc_edit_text_inset_horizontal_material -> abc_edit_text_inset_horizontal_material
    int abc_edit_text_inset_top_material -> abc_edit_text_inset_top_material
    int abc_floating_window_z -> abc_floating_window_z
    int abc_list_item_padding_horizontal_material -> abc_list_item_padding_horizontal_material
    int abc_panel_menu_list_width -> abc_panel_menu_list_width
    int abc_search_view_preferred_width -> abc_search_view_preferred_width
    int abc_search_view_text_min_width -> abc_search_view_text_min_width
    int abc_seekbar_track_background_height_material -> abc_seekbar_track_background_height_material
    int abc_seekbar_track_progress_height_material -> abc_seekbar_track_progress_height_material
    int abc_select_dialog_padding_start_material -> abc_select_dialog_padding_start_material
    int abc_switch_padding -> abc_switch_padding
    int abc_text_size_body_1_material -> abc_text_size_body_1_material
    int abc_text_size_body_2_material -> abc_text_size_body_2_material
    int abc_text_size_button_material -> abc_text_size_button_material
    int abc_text_size_caption_material -> abc_text_size_caption_material
    int abc_text_size_display_1_material -> abc_text_size_display_1_material
    int abc_text_size_display_2_material -> abc_text_size_display_2_material
    int abc_text_size_display_3_material -> abc_text_size_display_3_material
    int abc_text_size_display_4_material -> abc_text_size_display_4_material
    int abc_text_size_headline_material -> abc_text_size_headline_material
    int abc_text_size_large_material -> abc_text_size_large_material
    int abc_text_size_medium_material -> abc_text_size_medium_material
    int abc_text_size_menu_material -> abc_text_size_menu_material
    int abc_text_size_small_material -> abc_text_size_small_material
    int abc_text_size_subhead_material -> abc_text_size_subhead_material
    int abc_text_size_subtitle_material_toolbar -> abc_text_size_subtitle_material_toolbar
    int abc_text_size_title_material -> abc_text_size_title_material
    int abc_text_size_title_material_toolbar -> abc_text_size_title_material_toolbar
    int disabled_alpha_material_dark -> disabled_alpha_material_dark
    int disabled_alpha_material_light -> disabled_alpha_material_light
    int highlight_alpha_material_colored -> highlight_alpha_material_colored
    int highlight_alpha_material_dark -> highlight_alpha_material_dark
    int highlight_alpha_material_light -> highlight_alpha_material_light
    int notification_large_icon_height -> notification_large_icon_height
    int notification_large_icon_width -> notification_large_icon_width
    int notification_subtext_size -> notification_subtext_size
android.support.v7.appcompat.R$drawable -> android.support.v7.b.f:
    int abc_ab_share_pack_mtrl_alpha -> abc_ab_share_pack_mtrl_alpha
    int abc_action_bar_item_background_material -> abc_action_bar_item_background_material
    int abc_btn_borderless_material -> abc_btn_borderless_material
    int abc_btn_check_material -> abc_btn_check_material
    int abc_btn_check_to_on_mtrl_000 -> abc_btn_check_to_on_mtrl_000
    int abc_btn_check_to_on_mtrl_015 -> abc_btn_check_to_on_mtrl_015
    int abc_btn_colored_material -> abc_btn_colored_material
    int abc_btn_default_mtrl_shape -> abc_btn_default_mtrl_shape
    int abc_btn_radio_material -> abc_btn_radio_material
    int abc_btn_radio_to_on_mtrl_000 -> abc_btn_radio_to_on_mtrl_000
    int abc_btn_radio_to_on_mtrl_015 -> abc_btn_radio_to_on_mtrl_015
    int abc_btn_rating_star_off_mtrl_alpha -> abc_btn_rating_star_off_mtrl_alpha
    int abc_btn_rating_star_on_mtrl_alpha -> abc_btn_rating_star_on_mtrl_alpha
    int abc_btn_switch_to_on_mtrl_00001 -> abc_btn_switch_to_on_mtrl_00001
    int abc_btn_switch_to_on_mtrl_00012 -> abc_btn_switch_to_on_mtrl_00012
    int abc_cab_background_internal_bg -> abc_cab_background_internal_bg
    int abc_cab_background_top_material -> abc_cab_background_top_material
    int abc_cab_background_top_mtrl_alpha -> abc_cab_background_top_mtrl_alpha
    int abc_control_background_material -> abc_control_background_material
    int abc_dialog_material_background_dark -> abc_dialog_material_background_dark
    int abc_dialog_material_background_light -> abc_dialog_material_background_light
    int abc_edit_text_material -> abc_edit_text_material
    int abc_ic_ab_back_mtrl_am_alpha -> abc_ic_ab_back_mtrl_am_alpha
    int abc_ic_clear_mtrl_alpha -> abc_ic_clear_mtrl_alpha
    int abc_ic_commit_search_api_mtrl_alpha -> abc_ic_commit_search_api_mtrl_alpha
    int abc_ic_go_search_api_mtrl_alpha -> abc_ic_go_search_api_mtrl_alpha
    int abc_ic_menu_copy_mtrl_am_alpha -> abc_ic_menu_copy_mtrl_am_alpha
    int abc_ic_menu_cut_mtrl_alpha -> abc_ic_menu_cut_mtrl_alpha
    int abc_ic_menu_moreoverflow_mtrl_alpha -> abc_ic_menu_moreoverflow_mtrl_alpha
    int abc_ic_menu_paste_mtrl_am_alpha -> abc_ic_menu_paste_mtrl_am_alpha
    int abc_ic_menu_selectall_mtrl_alpha -> abc_ic_menu_selectall_mtrl_alpha
    int abc_ic_menu_share_mtrl_alpha -> abc_ic_menu_share_mtrl_alpha
    int abc_ic_search_api_mtrl_alpha -> abc_ic_search_api_mtrl_alpha
    int abc_ic_voice_search_api_mtrl_alpha -> abc_ic_voice_search_api_mtrl_alpha
    int abc_item_background_holo_dark -> abc_item_background_holo_dark
    int abc_item_background_holo_light -> abc_item_background_holo_light
    int abc_list_divider_mtrl_alpha -> abc_list_divider_mtrl_alpha
    int abc_list_focused_holo -> abc_list_focused_holo
    int abc_list_longpressed_holo -> abc_list_longpressed_holo
    int abc_list_pressed_holo_dark -> abc_list_pressed_holo_dark
    int abc_list_pressed_holo_light -> abc_list_pressed_holo_light
    int abc_list_selector_background_transition_holo_dark -> abc_list_selector_background_transition_holo_dark
    int abc_list_selector_background_transition_holo_light -> abc_list_selector_background_transition_holo_light
    int abc_list_selector_disabled_holo_dark -> abc_list_selector_disabled_holo_dark
    int abc_list_selector_disabled_holo_light -> abc_list_selector_disabled_holo_light
    int abc_list_selector_holo_dark -> abc_list_selector_holo_dark
    int abc_list_selector_holo_light -> abc_list_selector_holo_light
    int abc_menu_hardkey_panel_mtrl_mult -> abc_menu_hardkey_panel_mtrl_mult
    int abc_popup_background_mtrl_mult -> abc_popup_background_mtrl_mult
    int abc_ratingbar_full_material -> abc_ratingbar_full_material
    int abc_scrubber_control_off_mtrl_alpha -> abc_scrubber_control_off_mtrl_alpha
    int abc_scrubber_control_to_pressed_mtrl_000 -> abc_scrubber_control_to_pressed_mtrl_000
    int abc_scrubber_control_to_pressed_mtrl_005 -> abc_scrubber_control_to_pressed_mtrl_005
    int abc_scrubber_primary_mtrl_alpha -> abc_scrubber_primary_mtrl_alpha
    int abc_scrubber_track_mtrl_alpha -> abc_scrubber_track_mtrl_alpha
    int abc_seekbar_thumb_material -> abc_seekbar_thumb_material
    int abc_seekbar_track_material -> abc_seekbar_track_material
    int abc_spinner_mtrl_am_alpha -> abc_spinner_mtrl_am_alpha
    int abc_spinner_textfield_background_material -> abc_spinner_textfield_background_material
    int abc_switch_thumb_material -> abc_switch_thumb_material
    int abc_switch_track_mtrl_alpha -> abc_switch_track_mtrl_alpha
    int abc_tab_indicator_material -> abc_tab_indicator_material
    int abc_tab_indicator_mtrl_alpha -> abc_tab_indicator_mtrl_alpha
    int abc_text_cursor_material -> abc_text_cursor_material
    int abc_textfield_activated_mtrl_alpha -> abc_textfield_activated_mtrl_alpha
    int abc_textfield_default_mtrl_alpha -> abc_textfield_default_mtrl_alpha
    int abc_textfield_search_activated_mtrl_alpha -> abc_textfield_search_activated_mtrl_alpha
    int abc_textfield_search_default_mtrl_alpha -> abc_textfield_search_default_mtrl_alpha
    int abc_textfield_search_material -> abc_textfield_search_material
    int notification_template_icon_bg -> notification_template_icon_bg
android.support.v7.appcompat.R$id -> android.support.v7.b.g:
    int action0 -> action0
    int action_bar -> action_bar
    int action_bar_activity_content -> action_bar_activity_content
    int action_bar_container -> action_bar_container
    int action_bar_root -> action_bar_root
    int action_bar_spinner -> action_bar_spinner
    int action_bar_subtitle -> action_bar_subtitle
    int action_bar_title -> action_bar_title
    int action_context_bar -> action_context_bar
    int action_divider -> action_divider
    int action_menu_divider -> action_menu_divider
    int action_menu_presenter -> action_menu_presenter
    int action_mode_bar -> action_mode_bar
    int action_mode_bar_stub -> action_mode_bar_stub
    int action_mode_close_button -> action_mode_close_button
    int activity_chooser_view_content -> activity_chooser_view_content
    int alertTitle -> alertTitle
    int always -> always
    int beginning -> beginning
    int buttonPanel -> buttonPanel
    int cancel_action -> cancel_action
    int checkbox -> checkbox
    int chronometer -> chronometer
    int collapseActionView -> collapseActionView
    int contentPanel -> contentPanel
    int custom -> custom
    int customPanel -> customPanel
    int decor_content_parent -> decor_content_parent
    int default_activity_button -> default_activity_button
    int disableHome -> disableHome
    int edit_query -> edit_query
    int end -> end
    int end_padder -> end_padder
    int expand_activities_button -> expand_activities_button
    int expanded_menu -> expanded_menu
    int home -> home
    int homeAsUp -> homeAsUp
    int icon -> icon
    int ifRoom -> ifRoom
    int image -> image
    int info -> info
    int line1 -> line1
    int line3 -> line3
    int listMode -> listMode
    int list_item -> list_item
    int media_actions -> media_actions
    int middle -> middle
    int multiply -> multiply
    int never -> never
    int none -> none
    int normal -> normal
    int parentPanel -> parentPanel
    int progress_circular -> progress_circular
    int progress_horizontal -> progress_horizontal
    int radio -> radio
    int screen -> screen
    int scrollIndicatorDown -> scrollIndicatorDown
    int scrollIndicatorUp -> scrollIndicatorUp
    int scrollView -> scrollView
    int search_badge -> search_badge
    int search_bar -> search_bar
    int search_button -> search_button
    int search_close_btn -> search_close_btn
    int search_edit_frame -> search_edit_frame
    int search_go_btn -> search_go_btn
    int search_mag_icon -> search_mag_icon
    int search_plate -> search_plate
    int search_src_text -> search_src_text
    int search_voice_btn -> search_voice_btn
    int select_dialog_listview -> select_dialog_listview
    int shortcut -> shortcut
    int showCustom -> showCustom
    int showHome -> showHome
    int showTitle -> showTitle
    int spacer -> spacer
    int split_action_bar -> split_action_bar
    int src_atop -> src_atop
    int src_in -> src_in
    int src_over -> src_over
    int status_bar_latest_event_content -> status_bar_latest_event_content
    int submit_area -> submit_area
    int tabMode -> tabMode
    int text -> text
    int text2 -> text2
    int textSpacerNoButtons -> textSpacerNoButtons
    int time -> time
    int title -> title
    int title_template -> title_template
    int topPanel -> topPanel
    int up -> up
    int useLogo -> useLogo
    int withText -> withText
    int wrap_content -> wrap_content
android.support.v7.appcompat.R$integer -> android.support.v7.b.h:
    int abc_config_activityDefaultDur -> abc_config_activityDefaultDur
    int abc_config_activityShortDur -> abc_config_activityShortDur
    int abc_max_action_buttons -> abc_max_action_buttons
    int cancel_button_image_alpha -> cancel_button_image_alpha
    int status_bar_notification_info_maxnum -> status_bar_notification_info_maxnum
android.support.v7.appcompat.R$layout -> android.support.v7.b.i:
    int abc_action_bar_title_item -> abc_action_bar_title_item
    int abc_action_bar_up_container -> abc_action_bar_up_container
    int abc_action_bar_view_list_nav_layout -> abc_action_bar_view_list_nav_layout
    int abc_action_menu_item_layout -> abc_action_menu_item_layout
    int abc_action_menu_layout -> abc_action_menu_layout
    int abc_action_mode_bar -> abc_action_mode_bar
    int abc_action_mode_close_item_material -> abc_action_mode_close_item_material
    int abc_activity_chooser_view -> abc_activity_chooser_view
    int abc_activity_chooser_view_list_item -> abc_activity_chooser_view_list_item
    int abc_alert_dialog_button_bar_material -> abc_alert_dialog_button_bar_material
    int abc_alert_dialog_material -> abc_alert_dialog_material
    int abc_dialog_title_material -> abc_dialog_title_material
    int abc_expanded_menu_layout -> abc_expanded_menu_layout
    int abc_list_menu_item_checkbox -> abc_list_menu_item_checkbox
    int abc_list_menu_item_icon -> abc_list_menu_item_icon
    int abc_list_menu_item_layout -> abc_list_menu_item_layout
    int abc_list_menu_item_radio -> abc_list_menu_item_radio
    int abc_popup_menu_item_layout -> abc_popup_menu_item_layout
    int abc_screen_content_include -> abc_screen_content_include
    int abc_screen_simple -> abc_screen_simple
    int abc_screen_simple_overlay_action_mode -> abc_screen_simple_overlay_action_mode
    int abc_screen_toolbar -> abc_screen_toolbar
    int abc_search_dropdown_item_icons_2line -> abc_search_dropdown_item_icons_2line
    int abc_search_view -> abc_search_view
    int abc_select_dialog_material -> abc_select_dialog_material
    int notification_media_action -> notification_media_action
    int notification_media_cancel_action -> notification_media_cancel_action
    int notification_template_big_media -> notification_template_big_media
    int notification_template_big_media_narrow -> notification_template_big_media_narrow
    int notification_template_lines -> notification_template_lines
    int notification_template_media -> notification_template_media
    int notification_template_part_chronometer -> notification_template_part_chronometer
    int notification_template_part_time -> notification_template_part_time
    int select_dialog_item_material -> select_dialog_item_material
    int select_dialog_multichoice_material -> select_dialog_multichoice_material
    int select_dialog_singlechoice_material -> select_dialog_singlechoice_material
    int support_simple_spinner_dropdown_item -> support_simple_spinner_dropdown_item
android.support.v7.appcompat.R$string -> android.support.v7.b.j:
    int abc_action_bar_home_description -> abc_action_bar_home_description
    int abc_action_bar_home_description_format -> abc_action_bar_home_description_format
    int abc_action_bar_home_subtitle_description_format -> abc_action_bar_home_subtitle_description_format
    int abc_action_bar_up_description -> abc_action_bar_up_description
    int abc_action_menu_overflow_description -> abc_action_menu_overflow_description
    int abc_action_mode_done -> abc_action_mode_done
    int abc_activity_chooser_view_see_all -> abc_activity_chooser_view_see_all
    int abc_activitychooserview_choose_application -> abc_activitychooserview_choose_application
    int abc_capital_off -> abc_capital_off
    int abc_capital_on -> abc_capital_on
    int abc_search_hint -> abc_search_hint
    int abc_searchview_description_clear -> abc_searchview_description_clear
    int abc_searchview_description_query -> abc_searchview_description_query
    int abc_searchview_description_search -> abc_searchview_description_search
    int abc_searchview_description_submit -> abc_searchview_description_submit
    int abc_searchview_description_voice -> abc_searchview_description_voice
    int abc_shareactionprovider_share_with -> abc_shareactionprovider_share_with
    int abc_shareactionprovider_share_with_application -> abc_shareactionprovider_share_with_application
    int abc_toolbar_collapse_description -> abc_toolbar_collapse_description
    int status_bar_notification_info_overflow -> status_bar_notification_info_overflow
android.support.v7.appcompat.R$style -> android.support.v7.b.k:
    int AlertDialog_AppCompat -> AlertDialog_AppCompat
    int AlertDialog_AppCompat_Light -> AlertDialog_AppCompat_Light
    int Animation_AppCompat_Dialog -> Animation_AppCompat_Dialog
    int Animation_AppCompat_DropDownUp -> Animation_AppCompat_DropDownUp
    int Base_AlertDialog_AppCompat -> Base_AlertDialog_AppCompat
    int Base_AlertDialog_AppCompat_Light -> Base_AlertDialog_AppCompat_Light
    int Base_Animation_AppCompat_Dialog -> Base_Animation_AppCompat_Dialog
    int Base_Animation_AppCompat_DropDownUp -> Base_Animation_AppCompat_DropDownUp
    int Base_DialogWindowTitleBackground_AppCompat -> Base_DialogWindowTitleBackground_AppCompat
    int Base_DialogWindowTitle_AppCompat -> Base_DialogWindowTitle_AppCompat
    int Base_TextAppearance_AppCompat -> Base_TextAppearance_AppCompat
    int Base_TextAppearance_AppCompat_Body1 -> Base_TextAppearance_AppCompat_Body1
    int Base_TextAppearance_AppCompat_Body2 -> Base_TextAppearance_AppCompat_Body2
    int Base_TextAppearance_AppCompat_Button -> Base_TextAppearance_AppCompat_Button
    int Base_TextAppearance_AppCompat_Caption -> Base_TextAppearance_AppCompat_Caption
    int Base_TextAppearance_AppCompat_Display1 -> Base_TextAppearance_AppCompat_Display1
    int Base_TextAppearance_AppCompat_Display2 -> Base_TextAppearance_AppCompat_Display2
    int Base_TextAppearance_AppCompat_Display3 -> Base_TextAppearance_AppCompat_Display3
    int Base_TextAppearance_AppCompat_Display4 -> Base_TextAppearance_AppCompat_Display4
    int Base_TextAppearance_AppCompat_Headline -> Base_TextAppearance_AppCompat_Headline
    int Base_TextAppearance_AppCompat_Inverse -> Base_TextAppearance_AppCompat_Inverse
    int Base_TextAppearance_AppCompat_Large -> Base_TextAppearance_AppCompat_Large
    int Base_TextAppearance_AppCompat_Large_Inverse -> Base_TextAppearance_AppCompat_Large_Inverse
    int Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Large -> Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Large
    int Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Small -> Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Small
    int Base_TextAppearance_AppCompat_Medium -> Base_TextAppearance_AppCompat_Medium
    int Base_TextAppearance_AppCompat_Medium_Inverse -> Base_TextAppearance_AppCompat_Medium_Inverse
    int Base_TextAppearance_AppCompat_Menu -> Base_TextAppearance_AppCompat_Menu
    int Base_TextAppearance_AppCompat_SearchResult -> Base_TextAppearance_AppCompat_SearchResult
    int Base_TextAppearance_AppCompat_SearchResult_Subtitle -> Base_TextAppearance_AppCompat_SearchResult_Subtitle
    int Base_TextAppearance_AppCompat_SearchResult_Title -> Base_TextAppearance_AppCompat_SearchResult_Title
    int Base_TextAppearance_AppCompat_Small -> Base_TextAppearance_AppCompat_Small
    int Base_TextAppearance_AppCompat_Small_Inverse -> Base_TextAppearance_AppCompat_Small_Inverse
    int Base_TextAppearance_AppCompat_Subhead -> Base_TextAppearance_AppCompat_Subhead
    int Base_TextAppearance_AppCompat_Subhead_Inverse -> Base_TextAppearance_AppCompat_Subhead_Inverse
    int Base_TextAppearance_AppCompat_Title -> Base_TextAppearance_AppCompat_Title
    int Base_TextAppearance_AppCompat_Title_Inverse -> Base_TextAppearance_AppCompat_Title_Inverse
    int Base_TextAppearance_AppCompat_Widget_ActionBar_Menu -> Base_TextAppearance_AppCompat_Widget_ActionBar_Menu
    int Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle -> Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle
    int Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse -> Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse
    int Base_TextAppearance_AppCompat_Widget_ActionBar_Title -> Base_TextAppearance_AppCompat_Widget_ActionBar_Title
    int Base_TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse -> Base_TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse
    int Base_TextAppearance_AppCompat_Widget_ActionMode_Subtitle -> Base_TextAppearance_AppCompat_Widget_ActionMode_Subtitle
    int Base_TextAppearance_AppCompat_Widget_ActionMode_Title -> Base_TextAppearance_AppCompat_Widget_ActionMode_Title
    int Base_TextAppearance_AppCompat_Widget_Button -> Base_TextAppearance_AppCompat_Widget_Button
    int Base_TextAppearance_AppCompat_Widget_Button_Inverse -> Base_TextAppearance_AppCompat_Widget_Button_Inverse
    int Base_TextAppearance_AppCompat_Widget_DropDownItem -> Base_TextAppearance_AppCompat_Widget_DropDownItem
    int Base_TextAppearance_AppCompat_Widget_PopupMenu_Large -> Base_TextAppearance_AppCompat_Widget_PopupMenu_Large
    int Base_TextAppearance_AppCompat_Widget_PopupMenu_Small -> Base_TextAppearance_AppCompat_Widget_PopupMenu_Small
    int Base_TextAppearance_AppCompat_Widget_Switch -> Base_TextAppearance_AppCompat_Widget_Switch
    int Base_TextAppearance_AppCompat_Widget_TextView_SpinnerItem -> Base_TextAppearance_AppCompat_Widget_TextView_SpinnerItem
    int Base_TextAppearance_Widget_AppCompat_ExpandedMenu_Item -> Base_TextAppearance_Widget_AppCompat_ExpandedMenu_Item
    int Base_TextAppearance_Widget_AppCompat_Toolbar_Subtitle -> Base_TextAppearance_Widget_AppCompat_Toolbar_Subtitle
    int Base_TextAppearance_Widget_AppCompat_Toolbar_Title -> Base_TextAppearance_Widget_AppCompat_Toolbar_Title
    int Base_ThemeOverlay_AppCompat -> Base_ThemeOverlay_AppCompat
    int Base_ThemeOverlay_AppCompat_ActionBar -> Base_ThemeOverlay_AppCompat_ActionBar
    int Base_ThemeOverlay_AppCompat_Dark -> Base_ThemeOverlay_AppCompat_Dark
    int Base_ThemeOverlay_AppCompat_Dark_ActionBar -> Base_ThemeOverlay_AppCompat_Dark_ActionBar
    int Base_ThemeOverlay_AppCompat_Light -> Base_ThemeOverlay_AppCompat_Light
    int Base_Theme_AppCompat -> Base_Theme_AppCompat
    int Base_Theme_AppCompat_CompactMenu -> Base_Theme_AppCompat_CompactMenu
    int Base_Theme_AppCompat_Dialog -> Base_Theme_AppCompat_Dialog
    int Base_Theme_AppCompat_DialogWhenLarge -> Base_Theme_AppCompat_DialogWhenLarge
    int Base_Theme_AppCompat_Dialog_Alert -> Base_Theme_AppCompat_Dialog_Alert
    int Base_Theme_AppCompat_Dialog_FixedSize -> Base_Theme_AppCompat_Dialog_FixedSize
    int Base_Theme_AppCompat_Dialog_MinWidth -> Base_Theme_AppCompat_Dialog_MinWidth
    int Base_Theme_AppCompat_Light -> Base_Theme_AppCompat_Light
    int Base_Theme_AppCompat_Light_DarkActionBar -> Base_Theme_AppCompat_Light_DarkActionBar
    int Base_Theme_AppCompat_Light_Dialog -> Base_Theme_AppCompat_Light_Dialog
    int Base_Theme_AppCompat_Light_DialogWhenLarge -> Base_Theme_AppCompat_Light_DialogWhenLarge
    int Base_Theme_AppCompat_Light_Dialog_Alert -> Base_Theme_AppCompat_Light_Dialog_Alert
    int Base_Theme_AppCompat_Light_Dialog_FixedSize -> Base_Theme_AppCompat_Light_Dialog_FixedSize
    int Base_Theme_AppCompat_Light_Dialog_MinWidth -> Base_Theme_AppCompat_Light_Dialog_MinWidth
    int Base_V11_Theme_AppCompat_Dialog -> Base_V11_Theme_AppCompat_Dialog
    int Base_V11_Theme_AppCompat_Light_Dialog -> Base_V11_Theme_AppCompat_Light_Dialog
    int Base_V12_Widget_AppCompat_AutoCompleteTextView -> Base_V12_Widget_AppCompat_AutoCompleteTextView
    int Base_V12_Widget_AppCompat_EditText -> Base_V12_Widget_AppCompat_EditText
    int Base_V21_Theme_AppCompat -> Base_V21_Theme_AppCompat
    int Base_V21_Theme_AppCompat_Dialog -> Base_V21_Theme_AppCompat_Dialog
    int Base_V21_Theme_AppCompat_Light -> Base_V21_Theme_AppCompat_Light
    int Base_V21_Theme_AppCompat_Light_Dialog -> Base_V21_Theme_AppCompat_Light_Dialog
    int Base_V22_Theme_AppCompat -> Base_V22_Theme_AppCompat
    int Base_V22_Theme_AppCompat_Light -> Base_V22_Theme_AppCompat_Light
    int Base_V23_Theme_AppCompat -> Base_V23_Theme_AppCompat
    int Base_V23_Theme_AppCompat_Light -> Base_V23_Theme_AppCompat_Light
    int Base_V7_Theme_AppCompat -> Base_V7_Theme_AppCompat
    int Base_V7_Theme_AppCompat_Dialog -> Base_V7_Theme_AppCompat_Dialog
    int Base_V7_Theme_AppCompat_Light -> Base_V7_Theme_AppCompat_Light
    int Base_V7_Theme_AppCompat_Light_Dialog -> Base_V7_Theme_AppCompat_Light_Dialog
    int Base_V7_Widget_AppCompat_AutoCompleteTextView -> Base_V7_Widget_AppCompat_AutoCompleteTextView
    int Base_V7_Widget_AppCompat_EditText -> Base_V7_Widget_AppCompat_EditText
    int Base_Widget_AppCompat_ActionBar -> Base_Widget_AppCompat_ActionBar
    int Base_Widget_AppCompat_ActionBar_Solid -> Base_Widget_AppCompat_ActionBar_Solid
    int Base_Widget_AppCompat_ActionBar_TabBar -> Base_Widget_AppCompat_ActionBar_TabBar
    int Base_Widget_AppCompat_ActionBar_TabText -> Base_Widget_AppCompat_ActionBar_TabText
    int Base_Widget_AppCompat_ActionBar_TabView -> Base_Widget_AppCompat_ActionBar_TabView
    int Base_Widget_AppCompat_ActionButton -> Base_Widget_AppCompat_ActionButton
    int Base_Widget_AppCompat_ActionButton_CloseMode -> Base_Widget_AppCompat_ActionButton_CloseMode
    int Base_Widget_AppCompat_ActionButton_Overflow -> Base_Widget_AppCompat_ActionButton_Overflow
    int Base_Widget_AppCompat_ActionMode -> Base_Widget_AppCompat_ActionMode
    int Base_Widget_AppCompat_ActivityChooserView -> Base_Widget_AppCompat_ActivityChooserView
    int Base_Widget_AppCompat_AutoCompleteTextView -> Base_Widget_AppCompat_AutoCompleteTextView
    int Base_Widget_AppCompat_Button -> Base_Widget_AppCompat_Button
    int Base_Widget_AppCompat_ButtonBar -> Base_Widget_AppCompat_ButtonBar
    int Base_Widget_AppCompat_ButtonBar_AlertDialog -> Base_Widget_AppCompat_ButtonBar_AlertDialog
    int Base_Widget_AppCompat_Button_Borderless -> Base_Widget_AppCompat_Button_Borderless
    int Base_Widget_AppCompat_Button_Borderless_Colored -> Base_Widget_AppCompat_Button_Borderless_Colored
    int Base_Widget_AppCompat_Button_ButtonBar_AlertDialog -> Base_Widget_AppCompat_Button_ButtonBar_AlertDialog
    int Base_Widget_AppCompat_Button_Colored -> Base_Widget_AppCompat_Button_Colored
    int Base_Widget_AppCompat_Button_Small -> Base_Widget_AppCompat_Button_Small
    int Base_Widget_AppCompat_CompoundButton_CheckBox -> Base_Widget_AppCompat_CompoundButton_CheckBox
    int Base_Widget_AppCompat_CompoundButton_RadioButton -> Base_Widget_AppCompat_CompoundButton_RadioButton
    int Base_Widget_AppCompat_CompoundButton_Switch -> Base_Widget_AppCompat_CompoundButton_Switch
    int Base_Widget_AppCompat_DrawerArrowToggle -> Base_Widget_AppCompat_DrawerArrowToggle
    int Base_Widget_AppCompat_DrawerArrowToggle_Common -> Base_Widget_AppCompat_DrawerArrowToggle_Common
    int Base_Widget_AppCompat_DropDownItem_Spinner -> Base_Widget_AppCompat_DropDownItem_Spinner
    int Base_Widget_AppCompat_EditText -> Base_Widget_AppCompat_EditText
    int Base_Widget_AppCompat_ImageButton -> Base_Widget_AppCompat_ImageButton
    int Base_Widget_AppCompat_Light_ActionBar -> Base_Widget_AppCompat_Light_ActionBar
    int Base_Widget_AppCompat_Light_ActionBar_Solid -> Base_Widget_AppCompat_Light_ActionBar_Solid
    int Base_Widget_AppCompat_Light_ActionBar_TabBar -> Base_Widget_AppCompat_Light_ActionBar_TabBar
    int Base_Widget_AppCompat_Light_ActionBar_TabText -> Base_Widget_AppCompat_Light_ActionBar_TabText
    int Base_Widget_AppCompat_Light_ActionBar_TabText_Inverse -> Base_Widget_AppCompat_Light_ActionBar_TabText_Inverse
    int Base_Widget_AppCompat_Light_ActionBar_TabView -> Base_Widget_AppCompat_Light_ActionBar_TabView
    int Base_Widget_AppCompat_Light_PopupMenu -> Base_Widget_AppCompat_Light_PopupMenu
    int Base_Widget_AppCompat_Light_PopupMenu_Overflow -> Base_Widget_AppCompat_Light_PopupMenu_Overflow
    int Base_Widget_AppCompat_ListPopupWindow -> Base_Widget_AppCompat_ListPopupWindow
    int Base_Widget_AppCompat_ListView -> Base_Widget_AppCompat_ListView
    int Base_Widget_AppCompat_ListView_DropDown -> Base_Widget_AppCompat_ListView_DropDown
    int Base_Widget_AppCompat_ListView_Menu -> Base_Widget_AppCompat_ListView_Menu
    int Base_Widget_AppCompat_PopupMenu -> Base_Widget_AppCompat_PopupMenu
    int Base_Widget_AppCompat_PopupMenu_Overflow -> Base_Widget_AppCompat_PopupMenu_Overflow
    int Base_Widget_AppCompat_PopupWindow -> Base_Widget_AppCompat_PopupWindow
    int Base_Widget_AppCompat_ProgressBar -> Base_Widget_AppCompat_ProgressBar
    int Base_Widget_AppCompat_ProgressBar_Horizontal -> Base_Widget_AppCompat_ProgressBar_Horizontal
    int Base_Widget_AppCompat_RatingBar -> Base_Widget_AppCompat_RatingBar
    int Base_Widget_AppCompat_SearchView -> Base_Widget_AppCompat_SearchView
    int Base_Widget_AppCompat_SearchView_ActionBar -> Base_Widget_AppCompat_SearchView_ActionBar
    int Base_Widget_AppCompat_SeekBar -> Base_Widget_AppCompat_SeekBar
    int Base_Widget_AppCompat_Spinner -> Base_Widget_AppCompat_Spinner
    int Base_Widget_AppCompat_Spinner_Underlined -> Base_Widget_AppCompat_Spinner_Underlined
    int Base_Widget_AppCompat_TextView_SpinnerItem -> Base_Widget_AppCompat_TextView_SpinnerItem
    int Base_Widget_AppCompat_Toolbar -> Base_Widget_AppCompat_Toolbar
    int Base_Widget_AppCompat_Toolbar_Button_Navigation -> Base_Widget_AppCompat_Toolbar_Button_Navigation
    int Platform_AppCompat -> Platform_AppCompat
    int Platform_AppCompat_Light -> Platform_AppCompat_Light
    int Platform_ThemeOverlay_AppCompat -> Platform_ThemeOverlay_AppCompat
    int Platform_ThemeOverlay_AppCompat_Dark -> Platform_ThemeOverlay_AppCompat_Dark
    int Platform_ThemeOverlay_AppCompat_Light -> Platform_ThemeOverlay_AppCompat_Light
    int Platform_V11_AppCompat -> Platform_V11_AppCompat
    int Platform_V11_AppCompat_Light -> Platform_V11_AppCompat_Light
    int Platform_V14_AppCompat -> Platform_V14_AppCompat
    int Platform_V14_AppCompat_Light -> Platform_V14_AppCompat_Light
    int Platform_Widget_AppCompat_Spinner -> Platform_Widget_AppCompat_Spinner
    int RtlOverlay_DialogWindowTitle_AppCompat -> RtlOverlay_DialogWindowTitle_AppCompat
    int RtlOverlay_Widget_AppCompat_ActionBar_TitleItem -> RtlOverlay_Widget_AppCompat_ActionBar_TitleItem
    int RtlOverlay_Widget_AppCompat_DialogTitle_Icon -> RtlOverlay_Widget_AppCompat_DialogTitle_Icon
    int RtlOverlay_Widget_AppCompat_PopupMenuItem -> RtlOverlay_Widget_AppCompat_PopupMenuItem
    int RtlOverlay_Widget_AppCompat_PopupMenuItem_InternalGroup -> RtlOverlay_Widget_AppCompat_PopupMenuItem_InternalGroup
    int RtlOverlay_Widget_AppCompat_PopupMenuItem_Text -> RtlOverlay_Widget_AppCompat_PopupMenuItem_Text
    int RtlOverlay_Widget_AppCompat_SearchView_MagIcon -> RtlOverlay_Widget_AppCompat_SearchView_MagIcon
    int RtlOverlay_Widget_AppCompat_Search_DropDown -> RtlOverlay_Widget_AppCompat_Search_DropDown
    int RtlOverlay_Widget_AppCompat_Search_DropDown_Icon1 -> RtlOverlay_Widget_AppCompat_Search_DropDown_Icon1
    int RtlOverlay_Widget_AppCompat_Search_DropDown_Icon2 -> RtlOverlay_Widget_AppCompat_Search_DropDown_Icon2
    int RtlOverlay_Widget_AppCompat_Search_DropDown_Query -> RtlOverlay_Widget_AppCompat_Search_DropDown_Query
    int RtlOverlay_Widget_AppCompat_Search_DropDown_Text -> RtlOverlay_Widget_AppCompat_Search_DropDown_Text
    int RtlUnderlay_Widget_AppCompat_ActionButton -> RtlUnderlay_Widget_AppCompat_ActionButton
    int RtlUnderlay_Widget_AppCompat_ActionButton_Overflow -> RtlUnderlay_Widget_AppCompat_ActionButton_Overflow
    int TextAppearance_AppCompat -> TextAppearance_AppCompat
    int TextAppearance_AppCompat_Body1 -> TextAppearance_AppCompat_Body1
    int TextAppearance_AppCompat_Body2 -> TextAppearance_AppCompat_Body2
    int TextAppearance_AppCompat_Button -> TextAppearance_AppCompat_Button
    int TextAppearance_AppCompat_Caption -> TextAppearance_AppCompat_Caption
    int TextAppearance_AppCompat_Display1 -> TextAppearance_AppCompat_Display1
    int TextAppearance_AppCompat_Display2 -> TextAppearance_AppCompat_Display2
    int TextAppearance_AppCompat_Display3 -> TextAppearance_AppCompat_Display3
    int TextAppearance_AppCompat_Display4 -> TextAppearance_AppCompat_Display4
    int TextAppearance_AppCompat_Headline -> TextAppearance_AppCompat_Headline
    int TextAppearance_AppCompat_Inverse -> TextAppearance_AppCompat_Inverse
    int TextAppearance_AppCompat_Large -> TextAppearance_AppCompat_Large
    int TextAppearance_AppCompat_Large_Inverse -> TextAppearance_AppCompat_Large_Inverse
    int TextAppearance_AppCompat_Light_SearchResult_Subtitle -> TextAppearance_AppCompat_Light_SearchResult_Subtitle
    int TextAppearance_AppCompat_Light_SearchResult_Title -> TextAppearance_AppCompat_Light_SearchResult_Title
    int TextAppearance_AppCompat_Light_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Light_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Light_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Light_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_Medium -> TextAppearance_AppCompat_Medium
    int TextAppearance_AppCompat_Medium_Inverse -> TextAppearance_AppCompat_Medium_Inverse
    int TextAppearance_AppCompat_Menu -> TextAppearance_AppCompat_Menu
    int TextAppearance_AppCompat_SearchResult_Subtitle -> TextAppearance_AppCompat_SearchResult_Subtitle
    int TextAppearance_AppCompat_SearchResult_Title -> TextAppearance_AppCompat_SearchResult_Title
    int TextAppearance_AppCompat_Small -> TextAppearance_AppCompat_Small
    int TextAppearance_AppCompat_Small_Inverse -> TextAppearance_AppCompat_Small_Inverse
    int TextAppearance_AppCompat_Subhead -> TextAppearance_AppCompat_Subhead
    int TextAppearance_AppCompat_Subhead_Inverse -> TextAppearance_AppCompat_Subhead_Inverse
    int TextAppearance_AppCompat_Title -> TextAppearance_AppCompat_Title
    int TextAppearance_AppCompat_Title_Inverse -> TextAppearance_AppCompat_Title_Inverse
    int TextAppearance_AppCompat_Widget_ActionBar_Menu -> TextAppearance_AppCompat_Widget_ActionBar_Menu
    int TextAppearance_AppCompat_Widget_ActionBar_Subtitle -> TextAppearance_AppCompat_Widget_ActionBar_Subtitle
    int TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_ActionBar_Title -> TextAppearance_AppCompat_Widget_ActionBar_Title
    int TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse -> TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse
    int TextAppearance_AppCompat_Widget_ActionMode_Subtitle -> TextAppearance_AppCompat_Widget_ActionMode_Subtitle
    int TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_ActionMode_Title -> TextAppearance_AppCompat_Widget_ActionMode_Title
    int TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse -> TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse
    int TextAppearance_AppCompat_Widget_Button -> TextAppearance_AppCompat_Widget_Button
    int TextAppearance_AppCompat_Widget_Button_Inverse -> TextAppearance_AppCompat_Widget_Button_Inverse
    int TextAppearance_AppCompat_Widget_DropDownItem -> TextAppearance_AppCompat_Widget_DropDownItem
    int TextAppearance_AppCompat_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_Widget_Switch -> TextAppearance_AppCompat_Widget_Switch
    int TextAppearance_AppCompat_Widget_TextView_SpinnerItem -> TextAppearance_AppCompat_Widget_TextView_SpinnerItem
    int TextAppearance_StatusBar_EventContent -> TextAppearance_StatusBar_EventContent
    int TextAppearance_StatusBar_EventContent_Info -> TextAppearance_StatusBar_EventContent_Info
    int TextAppearance_StatusBar_EventContent_Line2 -> TextAppearance_StatusBar_EventContent_Line2
    int TextAppearance_StatusBar_EventContent_Time -> TextAppearance_StatusBar_EventContent_Time
    int TextAppearance_StatusBar_EventContent_Title -> TextAppearance_StatusBar_EventContent_Title
    int TextAppearance_Widget_AppCompat_ExpandedMenu_Item -> TextAppearance_Widget_AppCompat_ExpandedMenu_Item
    int TextAppearance_Widget_AppCompat_Toolbar_Subtitle -> TextAppearance_Widget_AppCompat_Toolbar_Subtitle
    int TextAppearance_Widget_AppCompat_Toolbar_Title -> TextAppearance_Widget_AppCompat_Toolbar_Title
    int ThemeOverlay_AppCompat -> ThemeOverlay_AppCompat
    int ThemeOverlay_AppCompat_ActionBar -> ThemeOverlay_AppCompat_ActionBar
    int ThemeOverlay_AppCompat_Dark -> ThemeOverlay_AppCompat_Dark
    int ThemeOverlay_AppCompat_Dark_ActionBar -> ThemeOverlay_AppCompat_Dark_ActionBar
    int ThemeOverlay_AppCompat_Light -> ThemeOverlay_AppCompat_Light
    int Theme_AppCompat -> Theme_AppCompat
    int Theme_AppCompat_CompactMenu -> Theme_AppCompat_CompactMenu
    int Theme_AppCompat_Dialog -> Theme_AppCompat_Dialog
    int Theme_AppCompat_DialogWhenLarge -> Theme_AppCompat_DialogWhenLarge
    int Theme_AppCompat_Dialog_Alert -> Theme_AppCompat_Dialog_Alert
    int Theme_AppCompat_Dialog_MinWidth -> Theme_AppCompat_Dialog_MinWidth
    int Theme_AppCompat_Light -> Theme_AppCompat_Light
    int Theme_AppCompat_Light_DarkActionBar -> Theme_AppCompat_Light_DarkActionBar
    int Theme_AppCompat_Light_Dialog -> Theme_AppCompat_Light_Dialog
    int Theme_AppCompat_Light_DialogWhenLarge -> Theme_AppCompat_Light_DialogWhenLarge
    int Theme_AppCompat_Light_Dialog_Alert -> Theme_AppCompat_Light_Dialog_Alert
    int Theme_AppCompat_Light_Dialog_MinWidth -> Theme_AppCompat_Light_Dialog_MinWidth
    int Theme_AppCompat_Light_NoActionBar -> Theme_AppCompat_Light_NoActionBar
    int Theme_AppCompat_NoActionBar -> Theme_AppCompat_NoActionBar
    int Widget_AppCompat_ActionBar -> Widget_AppCompat_ActionBar
    int Widget_AppCompat_ActionBar_Solid -> Widget_AppCompat_ActionBar_Solid
    int Widget_AppCompat_ActionBar_TabBar -> Widget_AppCompat_ActionBar_TabBar
    int Widget_AppCompat_ActionBar_TabText -> Widget_AppCompat_ActionBar_TabText
    int Widget_AppCompat_ActionBar_TabView -> Widget_AppCompat_ActionBar_TabView
    int Widget_AppCompat_ActionButton -> Widget_AppCompat_ActionButton
    int Widget_AppCompat_ActionButton_CloseMode -> Widget_AppCompat_ActionButton_CloseMode
    int Widget_AppCompat_ActionButton_Overflow -> Widget_AppCompat_ActionButton_Overflow
    int Widget_AppCompat_ActionMode -> Widget_AppCompat_ActionMode
    int Widget_AppCompat_ActivityChooserView -> Widget_AppCompat_ActivityChooserView
    int Widget_AppCompat_AutoCompleteTextView -> Widget_AppCompat_AutoCompleteTextView
    int Widget_AppCompat_Button -> Widget_AppCompat_Button
    int Widget_AppCompat_ButtonBar -> Widget_AppCompat_ButtonBar
    int Widget_AppCompat_ButtonBar_AlertDialog -> Widget_AppCompat_ButtonBar_AlertDialog
    int Widget_AppCompat_Button_Borderless -> Widget_AppCompat_Button_Borderless
    int Widget_AppCompat_Button_Borderless_Colored -> Widget_AppCompat_Button_Borderless_Colored
    int Widget_AppCompat_Button_ButtonBar_AlertDialog -> Widget_AppCompat_Button_ButtonBar_AlertDialog
    int Widget_AppCompat_Button_Colored -> Widget_AppCompat_Button_Colored
    int Widget_AppCompat_Button_Small -> Widget_AppCompat_Button_Small
    int Widget_AppCompat_CompoundButton_CheckBox -> Widget_AppCompat_CompoundButton_CheckBox
    int Widget_AppCompat_CompoundButton_RadioButton -> Widget_AppCompat_CompoundButton_RadioButton
    int Widget_AppCompat_CompoundButton_Switch -> Widget_AppCompat_CompoundButton_Switch
    int Widget_AppCompat_DrawerArrowToggle -> Widget_AppCompat_DrawerArrowToggle
    int Widget_AppCompat_DropDownItem_Spinner -> Widget_AppCompat_DropDownItem_Spinner
    int Widget_AppCompat_EditText -> Widget_AppCompat_EditText
    int Widget_AppCompat_ImageButton -> Widget_AppCompat_ImageButton
    int Widget_AppCompat_Light_ActionBar -> Widget_AppCompat_Light_ActionBar
    int Widget_AppCompat_Light_ActionBar_Solid -> Widget_AppCompat_Light_ActionBar_Solid
    int Widget_AppCompat_Light_ActionBar_Solid_Inverse -> Widget_AppCompat_Light_ActionBar_Solid_Inverse
    int Widget_AppCompat_Light_ActionBar_TabBar -> Widget_AppCompat_Light_ActionBar_TabBar
    int Widget_AppCompat_Light_ActionBar_TabBar_Inverse -> Widget_AppCompat_Light_ActionBar_TabBar_Inverse
    int Widget_AppCompat_Light_ActionBar_TabText -> Widget_AppCompat_Light_ActionBar_TabText
    int Widget_AppCompat_Light_ActionBar_TabText_Inverse -> Widget_AppCompat_Light_ActionBar_TabText_Inverse
    int Widget_AppCompat_Light_ActionBar_TabView -> Widget_AppCompat_Light_ActionBar_TabView
    int Widget_AppCompat_Light_ActionBar_TabView_Inverse -> Widget_AppCompat_Light_ActionBar_TabView_Inverse
    int Widget_AppCompat_Light_ActionButton -> Widget_AppCompat_Light_ActionButton
    int Widget_AppCompat_Light_ActionButton_CloseMode -> Widget_AppCompat_Light_ActionButton_CloseMode
    int Widget_AppCompat_Light_ActionButton_Overflow -> Widget_AppCompat_Light_ActionButton_Overflow
    int Widget_AppCompat_Light_ActionMode_Inverse -> Widget_AppCompat_Light_ActionMode_Inverse
    int Widget_AppCompat_Light_ActivityChooserView -> Widget_AppCompat_Light_ActivityChooserView
    int Widget_AppCompat_Light_AutoCompleteTextView -> Widget_AppCompat_Light_AutoCompleteTextView
    int Widget_AppCompat_Light_DropDownItem_Spinner -> Widget_AppCompat_Light_DropDownItem_Spinner
    int Widget_AppCompat_Light_ListPopupWindow -> Widget_AppCompat_Light_ListPopupWindow
    int Widget_AppCompat_Light_ListView_DropDown -> Widget_AppCompat_Light_ListView_DropDown
    int Widget_AppCompat_Light_PopupMenu -> Widget_AppCompat_Light_PopupMenu
    int Widget_AppCompat_Light_PopupMenu_Overflow -> Widget_AppCompat_Light_PopupMenu_Overflow
    int Widget_AppCompat_Light_SearchView -> Widget_AppCompat_Light_SearchView
    int Widget_AppCompat_Light_Spinner_DropDown_ActionBar -> Widget_AppCompat_Light_Spinner_DropDown_ActionBar
    int Widget_AppCompat_ListPopupWindow -> Widget_AppCompat_ListPopupWindow
    int Widget_AppCompat_ListView -> Widget_AppCompat_ListView
    int Widget_AppCompat_ListView_DropDown -> Widget_AppCompat_ListView_DropDown
    int Widget_AppCompat_ListView_Menu -> Widget_AppCompat_ListView_Menu
    int Widget_AppCompat_PopupMenu -> Widget_AppCompat_PopupMenu
    int Widget_AppCompat_PopupMenu_Overflow -> Widget_AppCompat_PopupMenu_Overflow
    int Widget_AppCompat_PopupWindow -> Widget_AppCompat_PopupWindow
    int Widget_AppCompat_ProgressBar -> Widget_AppCompat_ProgressBar
    int Widget_AppCompat_ProgressBar_Horizontal -> Widget_AppCompat_ProgressBar_Horizontal
    int Widget_AppCompat_RatingBar -> Widget_AppCompat_RatingBar
    int Widget_AppCompat_SearchView -> Widget_AppCompat_SearchView
    int Widget_AppCompat_SearchView_ActionBar -> Widget_AppCompat_SearchView_ActionBar
    int Widget_AppCompat_SeekBar -> Widget_AppCompat_SeekBar
    int Widget_AppCompat_Spinner -> Widget_AppCompat_Spinner
    int Widget_AppCompat_Spinner_DropDown -> Widget_AppCompat_Spinner_DropDown
    int Widget_AppCompat_Spinner_DropDown_ActionBar -> Widget_AppCompat_Spinner_DropDown_ActionBar
    int Widget_AppCompat_Spinner_Underlined -> Widget_AppCompat_Spinner_Underlined
    int Widget_AppCompat_TextView_SpinnerItem -> Widget_AppCompat_TextView_SpinnerItem
    int Widget_AppCompat_Toolbar -> Widget_AppCompat_Toolbar
    int Widget_AppCompat_Toolbar_Button_Navigation -> Widget_AppCompat_Toolbar_Button_Navigation
android.support.v7.appcompat.R$styleable -> android.support.v7.b.l:
    int[] ActionBar -> ActionBar
    int[] ActionBarLayout -> ActionBarLayout
    int ActionBarLayout_android_layout_gravity -> ActionBarLayout_android_layout_gravity
    int ActionBar_background -> ActionBar_background
    int ActionBar_backgroundSplit -> ActionBar_backgroundSplit
    int ActionBar_backgroundStacked -> ActionBar_backgroundStacked
    int ActionBar_contentInsetEnd -> ActionBar_contentInsetEnd
    int ActionBar_contentInsetLeft -> ActionBar_contentInsetLeft
    int ActionBar_contentInsetRight -> ActionBar_contentInsetRight
    int ActionBar_contentInsetStart -> ActionBar_contentInsetStart
    int ActionBar_customNavigationLayout -> ActionBar_customNavigationLayout
    int ActionBar_displayOptions -> ActionBar_displayOptions
    int ActionBar_divider -> ActionBar_divider
    int ActionBar_elevation -> ActionBar_elevation
    int ActionBar_height -> ActionBar_height
    int ActionBar_hideOnContentScroll -> ActionBar_hideOnContentScroll
    int ActionBar_homeAsUpIndicator -> ActionBar_homeAsUpIndicator
    int ActionBar_homeLayout -> ActionBar_homeLayout
    int ActionBar_icon -> ActionBar_icon
    int ActionBar_indeterminateProgressStyle -> ActionBar_indeterminateProgressStyle
    int ActionBar_itemPadding -> ActionBar_itemPadding
    int ActionBar_logo -> ActionBar_logo
    int ActionBar_navigationMode -> ActionBar_navigationMode
    int ActionBar_popupTheme -> ActionBar_popupTheme
    int ActionBar_progressBarPadding -> ActionBar_progressBarPadding
    int ActionBar_progressBarStyle -> ActionBar_progressBarStyle
    int ActionBar_subtitle -> ActionBar_subtitle
    int ActionBar_subtitleTextStyle -> ActionBar_subtitleTextStyle
    int ActionBar_title -> ActionBar_title
    int ActionBar_titleTextStyle -> ActionBar_titleTextStyle
    int[] ActionMenuItemView -> ActionMenuItemView
    int ActionMenuItemView_android_minWidth -> ActionMenuItemView_android_minWidth
    int[] ActionMenuView -> ActionMenuView
    int[] ActionMode -> ActionMode
    int ActionMode_background -> ActionMode_background
    int ActionMode_backgroundSplit -> ActionMode_backgroundSplit
    int ActionMode_closeItemLayout -> ActionMode_closeItemLayout
    int ActionMode_height -> ActionMode_height
    int ActionMode_subtitleTextStyle -> ActionMode_subtitleTextStyle
    int ActionMode_titleTextStyle -> ActionMode_titleTextStyle
    int[] ActivityChooserView -> ActivityChooserView
    int ActivityChooserView_expandActivityOverflowButtonDrawable -> ActivityChooserView_expandActivityOverflowButtonDrawable
    int ActivityChooserView_initialActivityCount -> ActivityChooserView_initialActivityCount
    int[] AlertDialog -> AlertDialog
    int AlertDialog_android_layout -> AlertDialog_android_layout
    int AlertDialog_buttonPanelSideLayout -> AlertDialog_buttonPanelSideLayout
    int AlertDialog_listItemLayout -> AlertDialog_listItemLayout
    int AlertDialog_listLayout -> AlertDialog_listLayout
    int AlertDialog_multiChoiceItemLayout -> AlertDialog_multiChoiceItemLayout
    int AlertDialog_singleChoiceItemLayout -> AlertDialog_singleChoiceItemLayout
    int[] AppCompatTextView -> AppCompatTextView
    int AppCompatTextView_android_textAppearance -> AppCompatTextView_android_textAppearance
    int AppCompatTextView_textAllCaps -> AppCompatTextView_textAllCaps
    int[] ButtonBarLayout -> ButtonBarLayout
    int ButtonBarLayout_allowStacking -> ButtonBarLayout_allowStacking
    int[] CompoundButton -> CompoundButton
    int CompoundButton_android_button -> CompoundButton_android_button
    int CompoundButton_buttonTint -> CompoundButton_buttonTint
    int CompoundButton_buttonTintMode -> CompoundButton_buttonTintMode
    int[] DrawerArrowToggle -> DrawerArrowToggle
    int DrawerArrowToggle_arrowHeadLength -> DrawerArrowToggle_arrowHeadLength
    int DrawerArrowToggle_arrowShaftLength -> DrawerArrowToggle_arrowShaftLength
    int DrawerArrowToggle_barLength -> DrawerArrowToggle_barLength
    int DrawerArrowToggle_color -> DrawerArrowToggle_color
    int DrawerArrowToggle_drawableSize -> DrawerArrowToggle_drawableSize
    int DrawerArrowToggle_gapBetweenBars -> DrawerArrowToggle_gapBetweenBars
    int DrawerArrowToggle_spinBars -> DrawerArrowToggle_spinBars
    int DrawerArrowToggle_thickness -> DrawerArrowToggle_thickness
    int[] LinearLayoutCompat -> LinearLayoutCompat
    int[] LinearLayoutCompat_Layout -> LinearLayoutCompat_Layout
    int LinearLayoutCompat_Layout_android_layout_gravity -> LinearLayoutCompat_Layout_android_layout_gravity
    int LinearLayoutCompat_Layout_android_layout_height -> LinearLayoutCompat_Layout_android_layout_height
    int LinearLayoutCompat_Layout_android_layout_weight -> LinearLayoutCompat_Layout_android_layout_weight
    int LinearLayoutCompat_Layout_android_layout_width -> LinearLayoutCompat_Layout_android_layout_width
    int LinearLayoutCompat_android_baselineAligned -> LinearLayoutCompat_android_baselineAligned
    int LinearLayoutCompat_android_baselineAlignedChildIndex -> LinearLayoutCompat_android_baselineAlignedChildIndex
    int LinearLayoutCompat_android_gravity -> LinearLayoutCompat_android_gravity
    int LinearLayoutCompat_android_orientation -> LinearLayoutCompat_android_orientation
    int LinearLayoutCompat_android_weightSum -> LinearLayoutCompat_android_weightSum
    int LinearLayoutCompat_divider -> LinearLayoutCompat_divider
    int LinearLayoutCompat_dividerPadding -> LinearLayoutCompat_dividerPadding
    int LinearLayoutCompat_measureWithLargestChild -> LinearLayoutCompat_measureWithLargestChild
    int LinearLayoutCompat_showDividers -> LinearLayoutCompat_showDividers
    int[] ListPopupWindow -> ListPopupWindow
    int ListPopupWindow_android_dropDownHorizontalOffset -> ListPopupWindow_android_dropDownHorizontalOffset
    int ListPopupWindow_android_dropDownVerticalOffset -> ListPopupWindow_android_dropDownVerticalOffset
    int[] MenuGroup -> MenuGroup
    int MenuGroup_android_checkableBehavior -> MenuGroup_android_checkableBehavior
    int MenuGroup_android_enabled -> MenuGroup_android_enabled
    int MenuGroup_android_id -> MenuGroup_android_id
    int MenuGroup_android_menuCategory -> MenuGroup_android_menuCategory
    int MenuGroup_android_orderInCategory -> MenuGroup_android_orderInCategory
    int MenuGroup_android_visible -> MenuGroup_android_visible
    int[] MenuItem -> MenuItem
    int MenuItem_actionLayout -> MenuItem_actionLayout
    int MenuItem_actionProviderClass -> MenuItem_actionProviderClass
    int MenuItem_actionViewClass -> MenuItem_actionViewClass
    int MenuItem_android_alphabeticShortcut -> MenuItem_android_alphabeticShortcut
    int MenuItem_android_checkable -> MenuItem_android_checkable
    int MenuItem_android_checked -> MenuItem_android_checked
    int MenuItem_android_enabled -> MenuItem_android_enabled
    int MenuItem_android_icon -> MenuItem_android_icon
    int MenuItem_android_id -> MenuItem_android_id
    int MenuItem_android_menuCategory -> MenuItem_android_menuCategory
    int MenuItem_android_numericShortcut -> MenuItem_android_numericShortcut
    int MenuItem_android_onClick -> MenuItem_android_onClick
    int MenuItem_android_orderInCategory -> MenuItem_android_orderInCategory
    int MenuItem_android_title -> MenuItem_android_title
    int MenuItem_android_titleCondensed -> MenuItem_android_titleCondensed
    int MenuItem_android_visible -> MenuItem_android_visible
    int MenuItem_showAsAction -> MenuItem_showAsAction
    int[] MenuView -> MenuView
    int MenuView_android_headerBackground -> MenuView_android_headerBackground
    int MenuView_android_horizontalDivider -> MenuView_android_horizontalDivider
    int MenuView_android_itemBackground -> MenuView_android_itemBackground
    int MenuView_android_itemIconDisabledAlpha -> MenuView_android_itemIconDisabledAlpha
    int MenuView_android_itemTextAppearance -> MenuView_android_itemTextAppearance
    int MenuView_android_verticalDivider -> MenuView_android_verticalDivider
    int MenuView_android_windowAnimationStyle -> MenuView_android_windowAnimationStyle
    int MenuView_preserveIconSpacing -> MenuView_preserveIconSpacing
    int[] PopupWindow -> PopupWindow
    int[] PopupWindowBackgroundState -> PopupWindowBackgroundState
    int PopupWindowBackgroundState_state_above_anchor -> PopupWindowBackgroundState_state_above_anchor
    int PopupWindow_android_popupBackground -> PopupWindow_android_popupBackground
    int PopupWindow_overlapAnchor -> PopupWindow_overlapAnchor
    int[] SearchView -> SearchView
    int SearchView_android_focusable -> SearchView_android_focusable
    int SearchView_android_imeOptions -> SearchView_android_imeOptions
    int SearchView_android_inputType -> SearchView_android_inputType
    int SearchView_android_maxWidth -> SearchView_android_maxWidth
    int SearchView_closeIcon -> SearchView_closeIcon
    int SearchView_commitIcon -> SearchView_commitIcon
    int SearchView_defaultQueryHint -> SearchView_defaultQueryHint
    int SearchView_goIcon -> SearchView_goIcon
    int SearchView_iconifiedByDefault -> SearchView_iconifiedByDefault
    int SearchView_layout -> SearchView_layout
    int SearchView_queryBackground -> SearchView_queryBackground
    int SearchView_queryHint -> SearchView_queryHint
    int SearchView_searchHintIcon -> SearchView_searchHintIcon
    int SearchView_searchIcon -> SearchView_searchIcon
    int SearchView_submitBackground -> SearchView_submitBackground
    int SearchView_suggestionRowLayout -> SearchView_suggestionRowLayout
    int SearchView_voiceIcon -> SearchView_voiceIcon
    int[] Spinner -> Spinner
    int Spinner_android_dropDownWidth -> Spinner_android_dropDownWidth
    int Spinner_android_popupBackground -> Spinner_android_popupBackground
    int Spinner_android_prompt -> Spinner_android_prompt
    int Spinner_popupTheme -> Spinner_popupTheme
    int[] SwitchCompat -> SwitchCompat
    int SwitchCompat_android_textOff -> SwitchCompat_android_textOff
    int SwitchCompat_android_textOn -> SwitchCompat_android_textOn
    int SwitchCompat_android_thumb -> SwitchCompat_android_thumb
    int SwitchCompat_showText -> SwitchCompat_showText
    int SwitchCompat_splitTrack -> SwitchCompat_splitTrack
    int SwitchCompat_switchMinWidth -> SwitchCompat_switchMinWidth
    int SwitchCompat_switchPadding -> SwitchCompat_switchPadding
    int SwitchCompat_switchTextAppearance -> SwitchCompat_switchTextAppearance
    int SwitchCompat_thumbTextPadding -> SwitchCompat_thumbTextPadding
    int SwitchCompat_track -> SwitchCompat_track
    int[] TextAppearance -> TextAppearance
    int TextAppearance_android_shadowColor -> TextAppearance_android_shadowColor
    int TextAppearance_android_shadowDx -> TextAppearance_android_shadowDx
    int TextAppearance_android_shadowDy -> TextAppearance_android_shadowDy
    int TextAppearance_android_shadowRadius -> TextAppearance_android_shadowRadius
    int TextAppearance_android_textColor -> TextAppearance_android_textColor
    int TextAppearance_android_textSize -> TextAppearance_android_textSize
    int TextAppearance_android_textStyle -> TextAppearance_android_textStyle
    int TextAppearance_android_typeface -> TextAppearance_android_typeface
    int TextAppearance_textAllCaps -> TextAppearance_textAllCaps
    int[] Theme -> Theme
    int Theme_actionBarDivider -> Theme_actionBarDivider
    int Theme_actionBarItemBackground -> Theme_actionBarItemBackground
    int Theme_actionBarPopupTheme -> Theme_actionBarPopupTheme
    int Theme_actionBarSize -> Theme_actionBarSize
    int Theme_actionBarSplitStyle -> Theme_actionBarSplitStyle
    int Theme_actionBarStyle -> Theme_actionBarStyle
    int Theme_actionBarTabBarStyle -> Theme_actionBarTabBarStyle
    int Theme_actionBarTabStyle -> Theme_actionBarTabStyle
    int Theme_actionBarTabTextStyle -> Theme_actionBarTabTextStyle
    int Theme_actionBarTheme -> Theme_actionBarTheme
    int Theme_actionBarWidgetTheme -> Theme_actionBarWidgetTheme
    int Theme_actionButtonStyle -> Theme_actionButtonStyle
    int Theme_actionDropDownStyle -> Theme_actionDropDownStyle
    int Theme_actionMenuTextAppearance -> Theme_actionMenuTextAppearance
    int Theme_actionMenuTextColor -> Theme_actionMenuTextColor
    int Theme_actionModeBackground -> Theme_actionModeBackground
    int Theme_actionModeCloseButtonStyle -> Theme_actionModeCloseButtonStyle
    int Theme_actionModeCloseDrawable -> Theme_actionModeCloseDrawable
    int Theme_actionModeCopyDrawable -> Theme_actionModeCopyDrawable
    int Theme_actionModeCutDrawable -> Theme_actionModeCutDrawable
    int Theme_actionModeFindDrawable -> Theme_actionModeFindDrawable
    int Theme_actionModePasteDrawable -> Theme_actionModePasteDrawable
    int Theme_actionModePopupWindowStyle -> Theme_actionModePopupWindowStyle
    int Theme_actionModeSelectAllDrawable -> Theme_actionModeSelectAllDrawable
    int Theme_actionModeShareDrawable -> Theme_actionModeShareDrawable
    int Theme_actionModeSplitBackground -> Theme_actionModeSplitBackground
    int Theme_actionModeStyle -> Theme_actionModeStyle
    int Theme_actionModeWebSearchDrawable -> Theme_actionModeWebSearchDrawable
    int Theme_actionOverflowButtonStyle -> Theme_actionOverflowButtonStyle
    int Theme_actionOverflowMenuStyle -> Theme_actionOverflowMenuStyle
    int Theme_activityChooserViewStyle -> Theme_activityChooserViewStyle
    int Theme_alertDialogButtonGroupStyle -> Theme_alertDialogButtonGroupStyle
    int Theme_alertDialogCenterButtons -> Theme_alertDialogCenterButtons
    int Theme_alertDialogStyle -> Theme_alertDialogStyle
    int Theme_alertDialogTheme -> Theme_alertDialogTheme
    int Theme_android_windowAnimationStyle -> Theme_android_windowAnimationStyle
    int Theme_android_windowIsFloating -> Theme_android_windowIsFloating
    int Theme_autoCompleteTextViewStyle -> Theme_autoCompleteTextViewStyle
    int Theme_borderlessButtonStyle -> Theme_borderlessButtonStyle
    int Theme_buttonBarButtonStyle -> Theme_buttonBarButtonStyle
    int Theme_buttonBarNegativeButtonStyle -> Theme_buttonBarNegativeButtonStyle
    int Theme_buttonBarNeutralButtonStyle -> Theme_buttonBarNeutralButtonStyle
    int Theme_buttonBarPositiveButtonStyle -> Theme_buttonBarPositiveButtonStyle
    int Theme_buttonBarStyle -> Theme_buttonBarStyle
    int Theme_buttonStyle -> Theme_buttonStyle
    int Theme_buttonStyleSmall -> Theme_buttonStyleSmall
    int Theme_checkboxStyle -> Theme_checkboxStyle
    int Theme_checkedTextViewStyle -> Theme_checkedTextViewStyle
    int Theme_colorAccent -> Theme_colorAccent
    int Theme_colorButtonNormal -> Theme_colorButtonNormal
    int Theme_colorControlActivated -> Theme_colorControlActivated
    int Theme_colorControlHighlight -> Theme_colorControlHighlight
    int Theme_colorControlNormal -> Theme_colorControlNormal
    int Theme_colorPrimary -> Theme_colorPrimary
    int Theme_colorPrimaryDark -> Theme_colorPrimaryDark
    int Theme_colorSwitchThumbNormal -> Theme_colorSwitchThumbNormal
    int Theme_controlBackground -> Theme_controlBackground
    int Theme_dialogPreferredPadding -> Theme_dialogPreferredPadding
    int Theme_dialogTheme -> Theme_dialogTheme
    int Theme_dividerHorizontal -> Theme_dividerHorizontal
    int Theme_dividerVertical -> Theme_dividerVertical
    int Theme_dropDownListViewStyle -> Theme_dropDownListViewStyle
    int Theme_dropdownListPreferredItemHeight -> Theme_dropdownListPreferredItemHeight
    int Theme_editTextBackground -> Theme_editTextBackground
    int Theme_editTextColor -> Theme_editTextColor
    int Theme_editTextStyle -> Theme_editTextStyle
    int Theme_homeAsUpIndicator -> Theme_homeAsUpIndicator
    int Theme_imageButtonStyle -> Theme_imageButtonStyle
    int Theme_listChoiceBackgroundIndicator -> Theme_listChoiceBackgroundIndicator
    int Theme_listDividerAlertDialog -> Theme_listDividerAlertDialog
    int Theme_listPopupWindowStyle -> Theme_listPopupWindowStyle
    int Theme_listPreferredItemHeight -> Theme_listPreferredItemHeight
    int Theme_listPreferredItemHeightLarge -> Theme_listPreferredItemHeightLarge
    int Theme_listPreferredItemHeightSmall -> Theme_listPreferredItemHeightSmall
    int Theme_listPreferredItemPaddingLeft -> Theme_listPreferredItemPaddingLeft
    int Theme_listPreferredItemPaddingRight -> Theme_listPreferredItemPaddingRight
    int Theme_panelBackground -> Theme_panelBackground
    int Theme_panelMenuListTheme -> Theme_panelMenuListTheme
    int Theme_panelMenuListWidth -> Theme_panelMenuListWidth
    int Theme_popupMenuStyle -> Theme_popupMenuStyle
    int Theme_popupWindowStyle -> Theme_popupWindowStyle
    int Theme_radioButtonStyle -> Theme_radioButtonStyle
    int Theme_ratingBarStyle -> Theme_ratingBarStyle
    int Theme_searchViewStyle -> Theme_searchViewStyle
    int Theme_seekBarStyle -> Theme_seekBarStyle
    int Theme_selectableItemBackground -> Theme_selectableItemBackground
    int Theme_selectableItemBackgroundBorderless -> Theme_selectableItemBackgroundBorderless
    int Theme_spinnerDropDownItemStyle -> Theme_spinnerDropDownItemStyle
    int Theme_spinnerStyle -> Theme_spinnerStyle
    int Theme_switchStyle -> Theme_switchStyle
    int Theme_textAppearanceLargePopupMenu -> Theme_textAppearanceLargePopupMenu
    int Theme_textAppearanceListItem -> Theme_textAppearanceListItem
    int Theme_textAppearanceListItemSmall -> Theme_textAppearanceListItemSmall
    int Theme_textAppearanceSearchResultSubtitle -> Theme_textAppearanceSearchResultSubtitle
    int Theme_textAppearanceSearchResultTitle -> Theme_textAppearanceSearchResultTitle
    int Theme_textAppearanceSmallPopupMenu -> Theme_textAppearanceSmallPopupMenu
    int Theme_textColorAlertDialogListItem -> Theme_textColorAlertDialogListItem
    int Theme_textColorSearchUrl -> Theme_textColorSearchUrl
    int Theme_toolbarNavigationButtonStyle -> Theme_toolbarNavigationButtonStyle
    int Theme_toolbarStyle -> Theme_toolbarStyle
    int Theme_windowActionBar -> Theme_windowActionBar
    int Theme_windowActionBarOverlay -> Theme_windowActionBarOverlay
    int Theme_windowActionModeOverlay -> Theme_windowActionModeOverlay
    int Theme_windowFixedHeightMajor -> Theme_windowFixedHeightMajor
    int Theme_windowFixedHeightMinor -> Theme_windowFixedHeightMinor
    int Theme_windowFixedWidthMajor -> Theme_windowFixedWidthMajor
    int Theme_windowFixedWidthMinor -> Theme_windowFixedWidthMinor
    int Theme_windowMinWidthMajor -> Theme_windowMinWidthMajor
    int Theme_windowMinWidthMinor -> Theme_windowMinWidthMinor
    int Theme_windowNoTitle -> Theme_windowNoTitle
    int[] Toolbar -> Toolbar
    int Toolbar_android_gravity -> Toolbar_android_gravity
    int Toolbar_android_minHeight -> Toolbar_android_minHeight
    int Toolbar_collapseContentDescription -> Toolbar_collapseContentDescription
    int Toolbar_collapseIcon -> Toolbar_collapseIcon
    int Toolbar_contentInsetEnd -> Toolbar_contentInsetEnd
    int Toolbar_contentInsetLeft -> Toolbar_contentInsetLeft
    int Toolbar_contentInsetRight -> Toolbar_contentInsetRight
    int Toolbar_contentInsetStart -> Toolbar_contentInsetStart
    int Toolbar_logo -> Toolbar_logo
    int Toolbar_logoDescription -> Toolbar_logoDescription
    int Toolbar_maxButtonHeight -> Toolbar_maxButtonHeight
    int Toolbar_navigationContentDescription -> Toolbar_navigationContentDescription
    int Toolbar_navigationIcon -> Toolbar_navigationIcon
    int Toolbar_popupTheme -> Toolbar_popupTheme
    int Toolbar_subtitle -> Toolbar_subtitle
    int Toolbar_subtitleTextAppearance -> Toolbar_subtitleTextAppearance
    int Toolbar_subtitleTextColor -> Toolbar_subtitleTextColor
    int Toolbar_title -> Toolbar_title
    int Toolbar_titleMarginBottom -> Toolbar_titleMarginBottom
    int Toolbar_titleMarginEnd -> Toolbar_titleMarginEnd
    int Toolbar_titleMarginStart -> Toolbar_titleMarginStart
    int Toolbar_titleMarginTop -> Toolbar_titleMarginTop
    int Toolbar_titleMargins -> Toolbar_titleMargins
    int Toolbar_titleTextAppearance -> Toolbar_titleTextAppearance
    int Toolbar_titleTextColor -> Toolbar_titleTextColor
    int[] View -> View
    int[] ViewBackgroundHelper -> ViewBackgroundHelper
    int ViewBackgroundHelper_android_background -> ViewBackgroundHelper_android_background
    int ViewBackgroundHelper_backgroundTint -> ViewBackgroundHelper_backgroundTint
    int ViewBackgroundHelper_backgroundTintMode -> ViewBackgroundHelper_backgroundTintMode
    int[] ViewStubCompat -> ViewStubCompat
    int ViewStubCompat_android_id -> ViewStubCompat_android_id
    int ViewStubCompat_android_inflatedId -> ViewStubCompat_android_inflatedId
    int ViewStubCompat_android_layout -> ViewStubCompat_android_layout
    int View_android_focusable -> View_android_focusable
    int View_android_theme -> View_android_theme
    int View_paddingEnd -> View_paddingEnd
    int View_paddingStart -> View_paddingStart
    int View_theme -> View_theme
    void <clinit>() -> <clinit>
android.support.v7.graphics.drawable.DrawableUtils -> android.support.v7.c.a.a:
    android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode) -> a
android.support.v7.graphics.drawable.DrawableWrapper -> android.support.v7.c.a.b:
    android.graphics.drawable.Drawable mDrawable -> a
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void draw(android.graphics.Canvas) -> draw
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void setChangingConfigurations(int) -> setChangingConfigurations
    int getChangingConfigurations() -> getChangingConfigurations
    void setDither(boolean) -> setDither
    void setFilterBitmap(boolean) -> setFilterBitmap
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    boolean isStateful() -> isStateful
    boolean setState(int[]) -> setState
    int[] getState() -> getState
    void jumpToCurrentState() -> jumpToCurrentState
    android.graphics.drawable.Drawable getCurrent() -> getCurrent
    boolean setVisible(boolean,boolean) -> setVisible
    int getOpacity() -> getOpacity
    android.graphics.Region getTransparentRegion() -> getTransparentRegion
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    boolean getPadding(android.graphics.Rect) -> getPadding
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
    boolean onLevelChange(int) -> onLevelChange
    void setAutoMirrored(boolean) -> setAutoMirrored
    boolean isAutoMirrored() -> isAutoMirrored
    void setTint(int) -> setTint
    void setTintList(android.content.res.ColorStateList) -> setTintList
    void setTintMode(android.graphics.PorterDuff$Mode) -> setTintMode
    void setHotspot(float,float) -> setHotspot
    void setHotspotBounds(int,int,int,int) -> setHotspotBounds
    void setWrappedDrawable(android.graphics.drawable.Drawable) -> a
android.support.v7.text.AllCapsTransformationMethod -> android.support.v7.d.a:
    java.util.Locale mLocale -> a
    void <init>(android.content.Context) -> <init>
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
    void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect) -> onFocusChanged
android.support.v7.transition.ActionBarTransition -> android.support.v7.e.a:
    void beginDelayedTransition(android.view.ViewGroup) -> a
android.support.v7.view.ActionBarPolicy -> android.support.v7.view.a:
    android.content.Context mContext -> a
    android.support.v7.view.ActionBarPolicy get(android.content.Context) -> a
    void <init>(android.content.Context) -> <init>
    int getMaxActionButtons() -> a
    boolean showsOverflowMenuButton() -> b
    int getEmbeddedMenuWidthLimit() -> c
    boolean hasEmbeddedTabs() -> d
    int getTabContainerHeight() -> e
    boolean enableHomeButtonByDefault() -> f
    int getStackedTabMaxWidth() -> g
android.support.v7.view.ActionMode -> android.support.v7.view.b:
    java.lang.Object mTag -> a
    boolean mTitleOptionalHint -> b
    void <init>() -> <init>
    void setTag(java.lang.Object) -> a
    java.lang.Object getTag() -> j
    void setTitle(java.lang.CharSequence) -> b
    void setTitle(int) -> a
    void setSubtitle(java.lang.CharSequence) -> a
    void setSubtitle(int) -> b
    void setTitleOptionalHint(boolean) -> a
    boolean getTitleOptionalHint() -> k
    boolean isTitleOptional() -> h
    void setCustomView(android.view.View) -> a
    void invalidate() -> d
    void finish() -> c
    android.view.Menu getMenu() -> b
    java.lang.CharSequence getTitle() -> f
    java.lang.CharSequence getSubtitle() -> g
    android.view.View getCustomView() -> i
    android.view.MenuInflater getMenuInflater() -> a
android.support.v7.view.ActionMode$Callback -> android.support.v7.view.c:
    boolean onCreateActionMode(android.support.v7.view.ActionMode,android.view.Menu) -> a
    boolean onPrepareActionMode(android.support.v7.view.ActionMode,android.view.Menu) -> b
    boolean onActionItemClicked(android.support.v7.view.ActionMode,android.view.MenuItem) -> a
    void onDestroyActionMode(android.support.v7.view.ActionMode) -> a
android.support.v7.view.CollapsibleActionView -> android.support.v7.view.d:
    void onActionViewExpanded() -> a
    void onActionViewCollapsed() -> b
android.support.v7.view.ContextThemeWrapper -> android.support.v7.view.e:
    int mThemeResource -> a
    android.content.res.Resources$Theme mTheme -> b
    android.view.LayoutInflater mInflater -> c
    void <init>(android.content.Context,int) -> <init>
    void <init>(android.content.Context,android.content.res.Resources$Theme) -> <init>
    void setTheme(int) -> setTheme
    int getThemeResId() -> a
    android.content.res.Resources$Theme getTheme() -> getTheme
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean) -> a
    void initializeTheme() -> b
android.support.v7.view.StandaloneActionMode -> android.support.v7.view.f:
    android.content.Context mContext -> a
    android.support.v7.widget.ActionBarContextView mContextView -> b
    android.support.v7.view.ActionMode$Callback mCallback -> c
    java.lang.ref.WeakReference mCustomView -> d
    boolean mFinished -> e
    boolean mFocusable -> f
    android.support.v7.view.menu.MenuBuilder mMenu -> g
    void <init>(android.content.Context,android.support.v7.widget.ActionBarContextView,android.support.v7.view.ActionMode$Callback,boolean) -> <init>
    void setTitle(java.lang.CharSequence) -> b
    void setSubtitle(java.lang.CharSequence) -> a
    void setTitle(int) -> a
    void setSubtitle(int) -> b
    void setTitleOptionalHint(boolean) -> a
    boolean isTitleOptional() -> h
    void setCustomView(android.view.View) -> a
    void invalidate() -> d
    void finish() -> c
    android.view.Menu getMenu() -> b
    java.lang.CharSequence getTitle() -> f
    java.lang.CharSequence getSubtitle() -> g
    android.view.View getCustomView() -> i
    android.view.MenuInflater getMenuInflater() -> a
    boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.view.menu.MenuBuilder) -> a
android.support.v7.view.SupportActionModeWrapper -> android.support.v7.view.g:
    android.content.Context mContext -> a
    android.support.v7.view.ActionMode mWrappedObject -> b
    void <init>(android.content.Context,android.support.v7.view.ActionMode) -> <init>
    java.lang.Object getTag() -> getTag
    void setTag(java.lang.Object) -> setTag
    void setTitle(java.lang.CharSequence) -> setTitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    void invalidate() -> invalidate
    void finish() -> finish
    android.view.Menu getMenu() -> getMenu
    java.lang.CharSequence getTitle() -> getTitle
    void setTitle(int) -> setTitle
    java.lang.CharSequence getSubtitle() -> getSubtitle
    void setSubtitle(int) -> setSubtitle
    android.view.View getCustomView() -> getCustomView
    void setCustomView(android.view.View) -> setCustomView
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    boolean getTitleOptionalHint() -> getTitleOptionalHint
    void setTitleOptionalHint(boolean) -> setTitleOptionalHint
    boolean isTitleOptional() -> isTitleOptional
android.support.v7.view.SupportActionModeWrapper$CallbackWrapper -> android.support.v7.view.h:
    android.view.ActionMode$Callback mWrappedCallback -> a
    android.content.Context mContext -> b
    java.util.ArrayList mActionModes -> c
    android.support.v4.util.SimpleArrayMap mMenus -> d
    void <init>(android.content.Context,android.view.ActionMode$Callback) -> <init>
    boolean onCreateActionMode(android.support.v7.view.ActionMode,android.view.Menu) -> a
    boolean onPrepareActionMode(android.support.v7.view.ActionMode,android.view.Menu) -> b
    boolean onActionItemClicked(android.support.v7.view.ActionMode,android.view.MenuItem) -> a
    void onDestroyActionMode(android.support.v7.view.ActionMode) -> a
    android.view.Menu getMenuWrapper(android.view.Menu) -> a
    android.view.ActionMode getActionModeWrapper(android.support.v7.view.ActionMode) -> b
android.support.v7.view.SupportMenuInflater -> android.support.v7.view.i:
    java.lang.Class[] ACTION_VIEW_CONSTRUCTOR_SIGNATURE -> a
    java.lang.Class[] ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE -> b
    java.lang.Object[] mActionViewConstructorArguments -> c
    java.lang.Object[] mActionProviderConstructorArguments -> d
    android.content.Context mContext -> e
    java.lang.Object mRealOwner -> f
    void <init>(android.content.Context) -> <init>
    void inflate(int,android.view.Menu) -> inflate
    void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.view.Menu) -> a
    java.lang.Object getRealOwner() -> c
    java.lang.Object findRealOwner(java.lang.Object) -> a
    android.content.Context access$100(android.support.v7.view.SupportMenuInflater) -> a
    java.lang.Class[] access$200() -> a
    java.lang.Object[] access$300(android.support.v7.view.SupportMenuInflater) -> b
    java.lang.Object access$400(android.support.v7.view.SupportMenuInflater) -> c
    java.lang.Class[] access$500() -> b
    java.lang.Object[] access$600(android.support.v7.view.SupportMenuInflater) -> d
    void <clinit>() -> <clinit>
android.support.v7.view.SupportMenuInflater$InflatedOnMenuItemClickListener -> android.support.v7.view.j:
    java.lang.Class[] PARAM_TYPES -> a
    java.lang.Object mRealOwner -> b
    java.lang.reflect.Method mMethod -> c
    void <init>(java.lang.Object,java.lang.String) -> <init>
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void <clinit>() -> <clinit>
android.support.v7.view.SupportMenuInflater$MenuState -> android.support.v7.view.k:
    android.view.Menu menu -> b
    int groupId -> c
    int groupCategory -> d
    int groupOrder -> e
    int groupCheckable -> f
    boolean groupVisible -> g
    boolean groupEnabled -> h
    boolean itemAdded -> i
    int itemId -> j
    int itemCategoryOrder -> k
    java.lang.CharSequence itemTitle -> l
    java.lang.CharSequence itemTitleCondensed -> m
    int itemIconResId -> n
    char itemAlphabeticShortcut -> o
    char itemNumericShortcut -> p
    int itemCheckable -> q
    boolean itemChecked -> r
    boolean itemVisible -> s
    boolean itemEnabled -> t
    int itemShowAsAction -> u
    int itemActionViewLayout -> v
    java.lang.String itemActionViewClassName -> w
    java.lang.String itemActionProviderClassName -> x
    java.lang.String itemListenerMethodName -> y
    android.support.v4.view.ActionProvider itemActionProvider -> z
    android.support.v7.view.SupportMenuInflater this$0 -> a
    void <init>(android.support.v7.view.SupportMenuInflater,android.view.Menu) -> <init>
    void resetGroup() -> a
    void readGroup(android.util.AttributeSet) -> a
    void readItem(android.util.AttributeSet) -> b
    char getShortcut(java.lang.String) -> a
    void setItem(android.view.MenuItem) -> a
    void addItem() -> b
    android.view.SubMenu addSubMenuItem() -> c
    boolean hasAddedItem() -> d
    java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    android.support.v4.view.ActionProvider access$000(android.support.v7.view.SupportMenuInflater$MenuState) -> a
android.support.v7.view.ViewPropertyAnimatorCompatSet -> android.support.v7.view.l:
    java.util.ArrayList mAnimators -> a
    long mDuration -> b
    android.view.animation.Interpolator mInterpolator -> c
    android.support.v4.view.ViewPropertyAnimatorListener mListener -> d
    boolean mIsStarted -> e
    android.support.v4.view.ViewPropertyAnimatorListenerAdapter mProxyListener -> f
    void <init>() -> <init>
    android.support.v7.view.ViewPropertyAnimatorCompatSet play(android.support.v4.view.ViewPropertyAnimatorCompat) -> a
    android.support.v7.view.ViewPropertyAnimatorCompatSet playSequentially(android.support.v4.view.ViewPropertyAnimatorCompat,android.support.v4.view.ViewPropertyAnimatorCompat) -> a
    void start() -> a
    void onAnimationsEnded() -> c
    void cancel() -> b
    android.support.v7.view.ViewPropertyAnimatorCompatSet setDuration(long) -> a
    android.support.v7.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator) -> a
    android.support.v7.view.ViewPropertyAnimatorCompatSet setListener(android.support.v4.view.ViewPropertyAnimatorListener) -> a
    android.support.v4.view.ViewPropertyAnimatorListener access$000(android.support.v7.view.ViewPropertyAnimatorCompatSet) -> a
    void access$100(android.support.v7.view.ViewPropertyAnimatorCompatSet) -> b
    java.util.ArrayList access$200(android.support.v7.view.ViewPropertyAnimatorCompatSet) -> c
android.support.v7.view.ViewPropertyAnimatorCompatSet$1 -> android.support.v7.view.m:
    boolean mProxyStarted -> b
    int mProxyEndCount -> c
    android.support.v7.view.ViewPropertyAnimatorCompatSet this$0 -> a
    void <init>(android.support.v7.view.ViewPropertyAnimatorCompatSet) -> <init>
    void onAnimationStart(android.view.View) -> a
    void onEnd() -> a
    void onAnimationEnd(android.view.View) -> b
android.support.v7.view.WindowCallbackWrapper -> android.support.v7.view.n:
    android.view.Window$Callback mWrapped -> d
    void <init>(android.view.Window$Callback) -> <init>
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent) -> dispatchKeyShortcutEvent
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean dispatchTrackballEvent(android.view.MotionEvent) -> dispatchTrackballEvent
    boolean dispatchGenericMotionEvent(android.view.MotionEvent) -> dispatchGenericMotionEvent
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.View onCreatePanelView(int) -> onCreatePanelView
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onWindowAttributesChanged(android.view.WindowManager$LayoutParams) -> onWindowAttributesChanged
    void onContentChanged() -> onContentChanged
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean onSearchRequested(android.view.SearchEvent) -> onSearchRequested
    boolean onSearchRequested() -> onSearchRequested
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback) -> onWindowStartingActionMode
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int) -> onWindowStartingActionMode
    void onActionModeStarted(android.view.ActionMode) -> onActionModeStarted
    void onActionModeFinished(android.view.ActionMode) -> onActionModeFinished
android.support.v7.view.menu.ActionMenuItem -> android.support.v7.view.menu.a:
    int mId -> a
    int mGroup -> b
    int mCategoryOrder -> c
    int mOrdering -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mTitleCondensed -> f
    android.content.Intent mIntent -> g
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> i
    android.graphics.drawable.Drawable mIconDrawable -> j
    int mIconResId -> k
    android.content.Context mContext -> l
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> m
    int mFlags -> n
    void <init>(android.content.Context,int,int,int,int,java.lang.CharSequence) -> <init>
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    int getGroupId() -> getGroupId
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.content.Intent getIntent() -> getIntent
    int getItemId() -> getItemId
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    char getNumericShortcut() -> getNumericShortcut
    int getOrder() -> getOrder
    android.view.SubMenu getSubMenu() -> getSubMenu
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    boolean hasSubMenu() -> hasSubMenu
    boolean isCheckable() -> isCheckable
    boolean isChecked() -> isChecked
    boolean isEnabled() -> isEnabled
    boolean isVisible() -> isVisible
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    android.view.MenuItem setChecked(boolean) -> setChecked
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.view.MenuItem setVisible(boolean) -> setVisible
    void setShowAsAction(int) -> setShowAsAction
    android.support.v4.internal.view.SupportMenuItem setActionView(android.view.View) -> a
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.support.v4.internal.view.SupportMenuItem setActionView(int) -> a
    android.support.v4.view.ActionProvider getSupportActionProvider() -> a
    android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider) -> a
    android.support.v4.internal.view.SupportMenuItem setShowAsActionFlags(int) -> b
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.support.v4.internal.view.SupportMenuItem setSupportOnActionExpandListener(android.support.v4.view.MenuItemCompat$OnActionExpandListener) -> a
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
android.support.v7.view.menu.ActionMenuItemView -> android.support.v7.view.menu.ActionMenuItemView:
    android.support.v7.view.menu.MenuItemImpl mItemData -> a
    java.lang.CharSequence mTitle -> b
    android.graphics.drawable.Drawable mIcon -> c
    android.support.v7.view.menu.MenuBuilder$ItemInvoker mItemInvoker -> d
    android.support.v7.widget.ListPopupWindow$ForwardingListener mForwardingListener -> e
    android.support.v7.view.menu.ActionMenuItemView$PopupCallback mPopupCallback -> f
    boolean mAllowTextWithIcon -> g
    boolean mExpandedFormat -> h
    int mMinWidth -> i
    int mSavedPaddingLeft -> j
    int mMaxIconSize -> k
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setPadding(int,int,int,int) -> setPadding
    android.support.v7.view.menu.MenuItemImpl getItemData() -> getItemData
    void initialize(android.support.v7.view.menu.MenuItemImpl,int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onClick(android.view.View) -> onClick
    void setItemInvoker(android.support.v7.view.menu.MenuBuilder$ItemInvoker) -> setItemInvoker
    void setPopupCallback(android.support.v7.view.menu.ActionMenuItemView$PopupCallback) -> setPopupCallback
    boolean prefersCondensedTitle() -> a
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setExpandedFormat(boolean) -> setExpandedFormat
    void updateTextButtonVisibility() -> e
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    boolean hasText() -> b
    void setTitle(java.lang.CharSequence) -> setTitle
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
    boolean onLongClick(android.view.View) -> onLongClick
    void onMeasure(int,int) -> onMeasure
    android.support.v7.view.menu.ActionMenuItemView$PopupCallback access$000(android.support.v7.view.menu.ActionMenuItemView) -> a
    android.support.v7.view.menu.MenuBuilder$ItemInvoker access$100(android.support.v7.view.menu.ActionMenuItemView) -> b
    android.support.v7.view.menu.MenuItemImpl access$200(android.support.v7.view.menu.ActionMenuItemView) -> c
android.support.v7.view.menu.ActionMenuItemView$ActionMenuItemForwardingListener -> android.support.v7.view.menu.b:
    android.support.v7.view.menu.ActionMenuItemView this$0 -> a
    void <init>(android.support.v7.view.menu.ActionMenuItemView) -> <init>
    android.support.v7.widget.ListPopupWindow getPopup() -> a
    boolean onForwardingStarted() -> b
android.support.v7.view.menu.ActionMenuItemView$PopupCallback -> android.support.v7.view.menu.c:
    void <init>() -> <init>
    android.support.v7.widget.ListPopupWindow getPopup() -> a
android.support.v7.view.menu.BaseMenuPresenter -> android.support.v7.view.menu.d:
    android.content.Context mSystemContext -> a
    android.content.Context mContext -> b
    android.support.v7.view.menu.MenuBuilder mMenu -> c
    android.view.LayoutInflater mSystemInflater -> d
    android.view.LayoutInflater mInflater -> e
    android.support.v7.view.menu.MenuPresenter$Callback mCallback -> g
    int mMenuLayoutRes -> h
    int mItemLayoutRes -> i
    android.support.v7.view.menu.MenuView mMenuView -> f
    int mId -> j
    void <init>(android.content.Context,int,int) -> <init>
    void initForMenu(android.content.Context,android.support.v7.view.menu.MenuBuilder) -> a
    android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    void updateMenuView(boolean) -> b
    void addItemView(android.view.View,int) -> a
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    void setCallback(android.support.v7.view.menu.MenuPresenter$Callback) -> a
    android.support.v7.view.menu.MenuPresenter$Callback getCallback() -> a
    android.support.v7.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup) -> b
    android.view.View getItemView(android.support.v7.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(android.support.v7.view.menu.MenuItemImpl,android.support.v7.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem(int,android.support.v7.view.menu.MenuItemImpl) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder) -> a
    boolean flagActionItems() -> b
    boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> b
    void setId(int) -> a
android.support.v7.view.menu.BaseMenuWrapper -> android.support.v7.view.menu.e:
    android.content.Context mContext -> a
    java.util.Map mMenuItems -> c
    java.util.Map mSubMenus -> d
    void <init>(android.content.Context,java.lang.Object) -> <init>
    android.view.MenuItem getMenuItemWrapper(android.view.MenuItem) -> a
    android.view.SubMenu getSubMenuWrapper(android.view.SubMenu) -> a
    void internalClear() -> a
    void internalRemoveGroup(int) -> a
    void internalRemoveItem(int) -> b
android.support.v7.view.menu.BaseWrapper -> android.support.v7.view.menu.f:
    java.lang.Object mWrappedObject -> b
    void <init>(java.lang.Object) -> <init>
android.support.v7.view.menu.ExpandedMenuView -> android.support.v7.view.menu.ExpandedMenuView:
    int[] TINT_ATTRS -> a
    android.support.v7.view.menu.MenuBuilder mMenu -> b
    int mAnimations -> c
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void initialize(android.support.v7.view.menu.MenuBuilder) -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean invokeItem(android.support.v7.view.menu.MenuItemImpl) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    int getWindowAnimations() -> getWindowAnimations
    void <clinit>() -> <clinit>
android.support.v7.view.menu.ListMenuItemView -> android.support.v7.view.menu.ListMenuItemView:
    android.support.v7.view.menu.MenuItemImpl mItemData -> a
    android.widget.ImageView mIconView -> b
    android.widget.RadioButton mRadioButton -> c
    android.widget.TextView mTitleView -> d
    android.widget.CheckBox mCheckBox -> e
    android.widget.TextView mShortcutView -> f
    android.graphics.drawable.Drawable mBackground -> g
    int mTextAppearance -> h
    android.content.Context mTextAppearanceContext -> i
    boolean mPreserveIconSpacing -> j
    int mMenuType -> k
    android.content.Context mContext -> l
    android.view.LayoutInflater mInflater -> m
    boolean mForceShowIcon -> n
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void onFinishInflate() -> onFinishInflate
    void initialize(android.support.v7.view.menu.MenuItemImpl,int) -> a
    void setForceShowIcon(boolean) -> setForceShowIcon
    void setTitle(java.lang.CharSequence) -> setTitle
    android.support.v7.view.menu.MenuItemImpl getItemData() -> getItemData
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setShortcut(boolean,char) -> a
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void onMeasure(int,int) -> onMeasure
    void insertIconView() -> b
    void insertRadioButton() -> c
    void insertCheckBox() -> d
    boolean prefersCondensedTitle() -> a
    android.view.LayoutInflater getInflater() -> getInflater
android.support.v7.view.menu.ListMenuPresenter -> android.support.v7.view.menu.g:
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> b
    android.support.v7.view.menu.MenuBuilder mMenu -> c
    android.support.v7.view.menu.ExpandedMenuView mMenuView -> d
    int mItemIndexOffset -> h
    int mThemeRes -> e
    int mItemLayoutRes -> f
    android.support.v7.view.menu.MenuPresenter$Callback mCallback -> i
    android.support.v7.view.menu.ListMenuPresenter$MenuAdapter mAdapter -> g
    void <init>(android.content.Context,int) -> <init>
    void <init>(int,int) -> <init>
    void initForMenu(android.content.Context,android.support.v7.view.menu.MenuBuilder) -> a
    android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    android.widget.ListAdapter getAdapter() -> a
    void updateMenuView(boolean) -> b
    void setCallback(android.support.v7.view.menu.MenuPresenter$Callback) -> a
    boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean flagActionItems() -> b
    boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> b
    int access$000(android.support.v7.view.menu.ListMenuPresenter) -> a
android.support.v7.view.menu.ListMenuPresenter$MenuAdapter -> android.support.v7.view.menu.h:
    int mExpandedIndex -> b
    android.support.v7.view.menu.ListMenuPresenter this$0 -> a
    void <init>(android.support.v7.view.menu.ListMenuPresenter) -> <init>
    int getCount() -> getCount
    android.support.v7.view.menu.MenuItemImpl getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void findExpandedIndex() -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    java.lang.Object getItem(int) -> getItem
android.support.v7.view.menu.MenuBuilder -> android.support.v7.view.menu.i:
    int[] sCategoryToOrder -> d
    android.content.Context mContext -> e
    android.content.res.Resources mResources -> f
    boolean mQwertyMode -> g
    boolean mShortcutsVisible -> h
    android.support.v7.view.menu.MenuBuilder$Callback mCallback -> i
    java.util.ArrayList mItems -> j
    java.util.ArrayList mVisibleItems -> k
    boolean mIsVisibleItemsStale -> l
    java.util.ArrayList mActionItems -> m
    java.util.ArrayList mNonActionItems -> n
    boolean mIsActionItemsStale -> o
    int mDefaultShowAsAction -> p
    android.view.ContextMenu$ContextMenuInfo mCurrentMenuInfo -> q
    java.lang.CharSequence mHeaderTitle -> a
    android.graphics.drawable.Drawable mHeaderIcon -> b
    android.view.View mHeaderView -> c
    boolean mPreventDispatchingItemsChanged -> r
    boolean mItemsChangedWhileDispatchPrevented -> s
    boolean mOptionalIconsVisible -> t
    boolean mIsClosing -> u
    java.util.ArrayList mTempShortcutItemList -> v
    java.util.concurrent.CopyOnWriteArrayList mPresenters -> w
    android.support.v7.view.menu.MenuItemImpl mExpandedItem -> x
    boolean mOverrideVisibleItems -> y
    void <init>(android.content.Context) -> <init>
    android.support.v7.view.menu.MenuBuilder setDefaultShowAsAction(int) -> a
    void addMenuPresenter(android.support.v7.view.menu.MenuPresenter) -> a
    void addMenuPresenter(android.support.v7.view.menu.MenuPresenter,android.content.Context) -> a
    void removeMenuPresenter(android.support.v7.view.menu.MenuPresenter) -> b
    void dispatchPresenterUpdate(boolean) -> d
    boolean dispatchSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder,android.support.v7.view.menu.MenuPresenter) -> a
    void saveActionViewStates(android.os.Bundle) -> a
    void restoreActionViewStates(android.os.Bundle) -> b
    java.lang.String getActionViewStatesKey() -> a
    void setCallback(android.support.v7.view.menu.MenuBuilder$Callback) -> a
    android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence) -> a
    android.support.v7.view.menu.MenuItemImpl createNewMenuItem(int,int,int,int,java.lang.CharSequence,int) -> a
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    void removeItem(int) -> removeItem
    void removeGroup(int) -> removeGroup
    void removeItemAtInt(int,boolean) -> a
    void clear() -> clear
    void setExclusiveItemChecked(android.view.MenuItem) -> a
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupVisible(int,boolean) -> setGroupVisible
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    boolean hasVisibleItems() -> hasVisibleItems
    android.view.MenuItem findItem(int) -> findItem
    int findItemIndex(int) -> b
    int findGroupIndex(int) -> c
    int findGroupIndex(int,int) -> a
    int size() -> size
    android.view.MenuItem getItem(int) -> getItem
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    void setQwertyMode(boolean) -> setQwertyMode
    int getOrdering(int) -> d
    boolean isQwertyMode() -> b
    void setShortcutsVisibleInner(boolean) -> e
    boolean isShortcutsVisible() -> c
    android.content.res.Resources getResources() -> d
    android.content.Context getContext() -> e
    boolean dispatchMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void changeMenuMode() -> f
    int findInsertIndex(java.util.ArrayList,int) -> a
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent) -> a
    android.support.v7.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent) -> a
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    boolean performItemAction(android.view.MenuItem,int) -> a
    boolean performItemAction(android.view.MenuItem,android.support.v7.view.menu.MenuPresenter,int) -> a
    void close(boolean) -> a
    void close() -> close
    void onItemsChanged(boolean) -> b
    void stopDispatchingItemsChanged() -> g
    void startDispatchingItemsChanged() -> h
    void onItemVisibleChanged(android.support.v7.view.menu.MenuItemImpl) -> a
    void onItemActionRequestChanged(android.support.v7.view.menu.MenuItemImpl) -> b
    java.util.ArrayList getVisibleItems() -> i
    void flagActionItems() -> j
    java.util.ArrayList getActionItems() -> k
    java.util.ArrayList getNonActionItems() -> l
    void clearHeader() -> clearHeader
    void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View) -> a
    android.support.v7.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence) -> a
    android.support.v7.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable) -> a
    android.support.v7.view.menu.MenuBuilder setHeaderViewInt(android.view.View) -> a
    java.lang.CharSequence getHeaderTitle() -> m
    android.graphics.drawable.Drawable getHeaderIcon() -> n
    android.view.View getHeaderView() -> o
    android.support.v7.view.menu.MenuBuilder getRootMenu() -> p
    boolean getOptionalIconsVisible() -> q
    boolean expandItemActionView(android.support.v7.view.menu.MenuItemImpl) -> c
    boolean collapseItemActionView(android.support.v7.view.menu.MenuItemImpl) -> d
    android.support.v7.view.menu.MenuItemImpl getExpandedItem() -> r
    void setOverrideVisibleItems(boolean) -> c
    void <clinit>() -> <clinit>
android.support.v7.view.menu.MenuBuilder$Callback -> android.support.v7.view.menu.j:
    boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.view.menu.MenuBuilder) -> a
android.support.v7.view.menu.MenuBuilder$ItemInvoker -> android.support.v7.view.menu.k:
    boolean invokeItem(android.support.v7.view.menu.MenuItemImpl) -> a
android.support.v7.view.menu.MenuDialogHelper -> android.support.v7.view.menu.l:
    android.support.v7.view.menu.MenuBuilder mMenu -> b
    android.support.v7.app.AlertDialog mDialog -> c
    android.support.v7.view.menu.ListMenuPresenter mPresenter -> a
    android.support.v7.view.menu.MenuPresenter$Callback mPresenterCallback -> d
    void <init>(android.support.v7.view.menu.MenuBuilder) -> <init>
    void show(android.os.IBinder) -> a
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
    void dismiss() -> a
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder) -> a
    void onClick(android.content.DialogInterface,int) -> onClick
android.support.v7.view.menu.MenuItemImpl -> android.support.v7.view.menu.m:
    int mId -> a
    int mGroup -> b
    int mCategoryOrder -> c
    int mOrdering -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mTitleCondensed -> f
    android.content.Intent mIntent -> g
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> i
    android.graphics.drawable.Drawable mIconDrawable -> j
    int mIconResId -> k
    android.support.v7.view.menu.MenuBuilder mMenu -> l
    android.support.v7.view.menu.SubMenuBuilder mSubMenu -> m
    java.lang.Runnable mItemCallback -> n
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> o
    int mFlags -> p
    int mShowAsAction -> q
    android.view.View mActionView -> r
    android.support.v4.view.ActionProvider mActionProvider -> s
    android.support.v4.view.MenuItemCompat$OnActionExpandListener mOnActionExpandListener -> t
    boolean mIsActionViewExpanded -> u
    android.view.ContextMenu$ContextMenuInfo mMenuInfo -> v
    java.lang.String sPrependShortcutLabel -> w
    java.lang.String sEnterShortcutLabel -> x
    java.lang.String sDeleteShortcutLabel -> y
    java.lang.String sSpaceShortcutLabel -> z
    void <init>(android.support.v7.view.menu.MenuBuilder,int,int,int,int,java.lang.CharSequence,int) -> <init>
    boolean invoke() -> b
    boolean isEnabled() -> isEnabled
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    int getGroupId() -> getGroupId
    int getItemId() -> getItemId
    int getOrder() -> getOrder
    int getOrdering() -> c
    android.content.Intent getIntent() -> getIntent
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    char getNumericShortcut() -> getNumericShortcut
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    char getShortcut() -> d
    java.lang.String getShortcutLabel() -> e
    boolean shouldShowShortcut() -> f
    android.view.SubMenu getSubMenu() -> getSubMenu
    boolean hasSubMenu() -> hasSubMenu
    void setSubMenu(android.support.v7.view.menu.SubMenuBuilder) -> a
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleForItemView(android.support.v7.view.menu.MenuView$ItemView) -> a
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    boolean isCheckable() -> isCheckable
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    void setExclusiveCheckable(boolean) -> a
    boolean isExclusiveCheckable() -> g
    boolean isChecked() -> isChecked
    android.view.MenuItem setChecked(boolean) -> setChecked
    void setCheckedInt(boolean) -> b
    boolean isVisible() -> isVisible
    boolean setVisibleInt(boolean) -> c
    android.view.MenuItem setVisible(boolean) -> setVisible
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    java.lang.String toString() -> toString
    void setMenuInfo(android.view.ContextMenu$ContextMenuInfo) -> a
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    void actionFormatChanged() -> h
    boolean shouldShowIcon() -> i
    boolean isActionButton() -> j
    boolean requestsActionButton() -> k
    boolean requiresActionButton() -> l
    void setIsActionButton(boolean) -> d
    boolean showsTextAsAction() -> m
    void setShowAsAction(int) -> setShowAsAction
    android.support.v4.internal.view.SupportMenuItem setActionView(android.view.View) -> a
    android.support.v4.internal.view.SupportMenuItem setActionView(int) -> a
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.support.v4.view.ActionProvider getSupportActionProvider() -> a
    android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider) -> a
    android.support.v4.internal.view.SupportMenuItem setShowAsActionFlags(int) -> b
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    android.support.v4.internal.view.SupportMenuItem setSupportOnActionExpandListener(android.support.v4.view.MenuItemCompat$OnActionExpandListener) -> a
    boolean hasCollapsibleActionView() -> n
    void setActionViewExpanded(boolean) -> e
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
    android.support.v7.view.menu.MenuBuilder access$000(android.support.v7.view.menu.MenuItemImpl) -> a
android.support.v7.view.menu.MenuItemImpl$1 -> android.support.v7.view.menu.n:
    android.support.v7.view.menu.MenuItemImpl this$0 -> a
    void <init>(android.support.v7.view.menu.MenuItemImpl) -> <init>
    void onActionProviderVisibilityChanged(boolean) -> a
android.support.v7.view.menu.MenuItemWrapperICS -> android.support.v7.view.menu.o:
    java.lang.reflect.Method mSetExclusiveCheckableMethod -> c
    void <init>(android.content.Context,android.support.v4.internal.view.SupportMenuItem) -> <init>
    int getItemId() -> getItemId
    int getGroupId() -> getGroupId
    int getOrder() -> getOrder
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    java.lang.CharSequence getTitle() -> getTitle
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    android.content.Intent getIntent() -> getIntent
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    char getNumericShortcut() -> getNumericShortcut
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    boolean isCheckable() -> isCheckable
    android.view.MenuItem setChecked(boolean) -> setChecked
    boolean isChecked() -> isChecked
    android.view.MenuItem setVisible(boolean) -> setVisible
    boolean isVisible() -> isVisible
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    boolean isEnabled() -> isEnabled
    boolean hasSubMenu() -> hasSubMenu
    android.view.SubMenu getSubMenu() -> getSubMenu
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    void setShowAsAction(int) -> setShowAsAction
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    void setExclusiveCheckable(boolean) -> a
    android.support.v7.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.view.ActionProvider) -> a
android.support.v7.view.menu.MenuItemWrapperICS$ActionProviderWrapper -> android.support.v7.view.menu.p:
    android.view.ActionProvider mInner -> a
    android.support.v7.view.menu.MenuItemWrapperICS this$0 -> b
    void <init>(android.support.v7.view.menu.MenuItemWrapperICS,android.content.Context,android.view.ActionProvider) -> <init>
    android.view.View onCreateActionView() -> a
    boolean onPerformDefaultAction() -> d
    boolean hasSubMenu() -> e
    void onPrepareSubMenu(android.view.SubMenu) -> a
android.support.v7.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper -> android.support.v7.view.menu.q:
    android.view.CollapsibleActionView mWrappedView -> a
    void <init>(android.view.View) -> <init>
    void onActionViewExpanded() -> a
    void onActionViewCollapsed() -> b
    android.view.View getWrappedView() -> c
android.support.v7.view.menu.MenuItemWrapperICS$OnActionExpandListenerWrapper -> android.support.v7.view.menu.r:
    android.support.v7.view.menu.MenuItemWrapperICS this$0 -> a
    void <init>(android.support.v7.view.menu.MenuItemWrapperICS,android.view.MenuItem$OnActionExpandListener) -> <init>
    boolean onMenuItemActionExpand(android.view.MenuItem) -> a
    boolean onMenuItemActionCollapse(android.view.MenuItem) -> b
android.support.v7.view.menu.MenuItemWrapperICS$OnMenuItemClickListenerWrapper -> android.support.v7.view.menu.s:
    android.support.v7.view.menu.MenuItemWrapperICS this$0 -> a
    void <init>(android.support.v7.view.menu.MenuItemWrapperICS,android.view.MenuItem$OnMenuItemClickListener) -> <init>
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
android.support.v7.view.menu.MenuItemWrapperJB -> android.support.v7.view.menu.t:
    void <init>(android.content.Context,android.support.v4.internal.view.SupportMenuItem) -> <init>
    android.support.v7.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.view.ActionProvider) -> a
android.support.v7.view.menu.MenuItemWrapperJB$ActionProviderWrapperJB -> android.support.v7.view.menu.u:
    android.support.v4.view.ActionProvider$VisibilityListener mListener -> c
    android.support.v7.view.menu.MenuItemWrapperJB this$0 -> d
    void <init>(android.support.v7.view.menu.MenuItemWrapperJB,android.content.Context,android.view.ActionProvider) -> <init>
    android.view.View onCreateActionView(android.view.MenuItem) -> a
    boolean overridesItemVisibility() -> b
    boolean isVisible() -> c
    void setVisibilityListener(android.support.v4.view.ActionProvider$VisibilityListener) -> a
    void onActionProviderVisibilityChanged(boolean) -> onActionProviderVisibilityChanged
android.support.v7.view.menu.MenuPopupHelper -> android.support.v7.view.menu.v:
    int ITEM_LAYOUT -> a
    android.content.Context mContext -> c
    android.view.LayoutInflater mInflater -> d
    android.support.v7.view.menu.MenuBuilder mMenu -> e
    android.support.v7.view.menu.MenuPopupHelper$MenuAdapter mAdapter -> f
    boolean mOverflowOnly -> g
    int mPopupMaxWidth -> h
    int mPopupStyleAttr -> i
    int mPopupStyleRes -> j
    android.view.View mAnchorView -> k
    android.support.v7.widget.ListPopupWindow mPopup -> l
    android.view.ViewTreeObserver mTreeObserver -> m
    android.support.v7.view.menu.MenuPresenter$Callback mPresenterCallback -> n
    boolean mForceShowIcon -> b
    android.view.ViewGroup mMeasureParent -> o
    boolean mHasContentWidth -> p
    int mContentWidth -> q
    int mDropDownGravity -> r
    void <init>(android.content.Context,android.support.v7.view.menu.MenuBuilder,android.view.View) -> <init>
    void <init>(android.content.Context,android.support.v7.view.menu.MenuBuilder,android.view.View,boolean,int) -> <init>
    void <init>(android.content.Context,android.support.v7.view.menu.MenuBuilder,android.view.View,boolean,int,int) -> <init>
    void setAnchorView(android.view.View) -> a
    void setForceShowIcon(boolean) -> a
    void setGravity(int) -> a
    void show() -> a
    android.support.v7.widget.ListPopupWindow getPopup() -> c
    boolean tryShow() -> d
    void dismiss() -> e
    void onDismiss() -> onDismiss
    boolean isShowing() -> f
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    int measureContentWidth() -> g
    void onGlobalLayout() -> onGlobalLayout
    void initForMenu(android.content.Context,android.support.v7.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    void setCallback(android.support.v7.view.menu.MenuPresenter$Callback) -> a
    boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> b
    boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> b
    boolean access$100(android.support.v7.view.menu.MenuPopupHelper) -> a
    android.view.LayoutInflater access$200(android.support.v7.view.menu.MenuPopupHelper) -> b
    android.support.v7.view.menu.MenuBuilder access$300(android.support.v7.view.menu.MenuPopupHelper) -> c
    void <clinit>() -> <clinit>
android.support.v7.view.menu.MenuPopupHelper$MenuAdapter -> android.support.v7.view.menu.w:
    android.support.v7.view.menu.MenuBuilder mAdapterMenu -> b
    int mExpandedIndex -> c
    android.support.v7.view.menu.MenuPopupHelper this$0 -> a
    void <init>(android.support.v7.view.menu.MenuPopupHelper,android.support.v7.view.menu.MenuBuilder) -> <init>
    int getCount() -> getCount
    android.support.v7.view.menu.MenuItemImpl getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void findExpandedIndex() -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    java.lang.Object getItem(int) -> getItem
    android.support.v7.view.menu.MenuBuilder access$000(android.support.v7.view.menu.MenuPopupHelper$MenuAdapter) -> a
android.support.v7.view.menu.MenuPresenter -> android.support.v7.view.menu.x:
    void initForMenu(android.content.Context,android.support.v7.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> b
    boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> b
android.support.v7.view.menu.MenuPresenter$Callback -> android.support.v7.view.menu.y:
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder) -> a
android.support.v7.view.menu.MenuView -> android.support.v7.view.menu.z:
    void initialize(android.support.v7.view.menu.MenuBuilder) -> a
android.support.v7.view.menu.MenuView$ItemView -> android.support.v7.view.menu.aa:
    void initialize(android.support.v7.view.menu.MenuItemImpl,int) -> a
    android.support.v7.view.menu.MenuItemImpl getItemData() -> getItemData
    boolean prefersCondensedTitle() -> a
android.support.v7.view.menu.MenuWrapperFactory -> android.support.v7.view.menu.ab:
    android.view.Menu wrapSupportMenu(android.content.Context,android.support.v4.internal.view.SupportMenu) -> a
    android.view.MenuItem wrapSupportMenuItem(android.content.Context,android.support.v4.internal.view.SupportMenuItem) -> a
    android.view.SubMenu wrapSupportSubMenu(android.content.Context,android.support.v4.internal.view.SupportSubMenu) -> a
android.support.v7.view.menu.MenuWrapperICS -> android.support.v7.view.menu.ac:
    void <init>(android.content.Context,android.support.v4.internal.view.SupportMenu) -> <init>
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    void removeItem(int) -> removeItem
    void removeGroup(int) -> removeGroup
    void clear() -> clear
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupVisible(int,boolean) -> setGroupVisible
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    boolean hasVisibleItems() -> hasVisibleItems
    android.view.MenuItem findItem(int) -> findItem
    int size() -> size
    android.view.MenuItem getItem(int) -> getItem
    void close() -> close
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    void setQwertyMode(boolean) -> setQwertyMode
android.support.v7.view.menu.SubMenuBuilder -> android.support.v7.view.menu.ad:
    android.support.v7.view.menu.MenuBuilder mParentMenu -> d
    android.support.v7.view.menu.MenuItemImpl mItem -> e
    void <init>(android.content.Context,android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> <init>
    void setQwertyMode(boolean) -> setQwertyMode
    boolean isQwertyMode() -> b
    boolean isShortcutsVisible() -> c
    android.view.Menu getParentMenu() -> s
    android.view.MenuItem getItem() -> getItem
    void setCallback(android.support.v7.view.menu.MenuBuilder$Callback) -> a
    android.support.v7.view.menu.MenuBuilder getRootMenu() -> p
    boolean dispatchMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    android.view.SubMenu setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.SubMenu setIcon(int) -> setIcon
    android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable) -> setHeaderIcon
    android.view.SubMenu setHeaderIcon(int) -> setHeaderIcon
    android.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> setHeaderTitle
    android.view.SubMenu setHeaderTitle(int) -> setHeaderTitle
    android.view.SubMenu setHeaderView(android.view.View) -> setHeaderView
    boolean expandItemActionView(android.support.v7.view.menu.MenuItemImpl) -> c
    boolean collapseItemActionView(android.support.v7.view.menu.MenuItemImpl) -> d
    java.lang.String getActionViewStatesKey() -> a
android.support.v7.view.menu.SubMenuWrapperICS -> android.support.v7.view.menu.ae:
    void <init>(android.content.Context,android.support.v4.internal.view.SupportSubMenu) -> <init>
    android.support.v4.internal.view.SupportSubMenu getWrappedObject() -> b
    android.view.SubMenu setHeaderTitle(int) -> setHeaderTitle
    android.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> setHeaderTitle
    android.view.SubMenu setHeaderIcon(int) -> setHeaderIcon
    android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable) -> setHeaderIcon
    android.view.SubMenu setHeaderView(android.view.View) -> setHeaderView
    void clearHeader() -> clearHeader
    android.view.SubMenu setIcon(int) -> setIcon
    android.view.SubMenu setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem getItem() -> getItem
android.support.v7.widget.AbsActionBarView -> android.support.v7.widget.a:
    android.support.v7.widget.AbsActionBarView$VisibilityAnimListener mVisAnimListener -> a
    android.content.Context mPopupContext -> b
    android.support.v7.widget.ActionMenuView mMenuView -> c
    android.support.v7.widget.ActionMenuPresenter mActionMenuPresenter -> d
    int mContentHeight -> e
    android.support.v4.view.ViewPropertyAnimatorCompat mVisibilityAnim -> f
    boolean mEatingTouch -> g
    boolean mEatingHover -> h
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    void setContentHeight(int) -> setContentHeight
    int getContentHeight() -> getContentHeight
    int getAnimatedVisibility() -> getAnimatedVisibility
    android.support.v4.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long) -> a
    void setVisibility(int) -> setVisibility
    boolean showOverflowMenu() -> a
    int measureChildView(android.view.View,int,int,int) -> a
    int next(int,int,boolean) -> a
    int positionChild(android.view.View,int,int,int,boolean) -> a
    void access$001(android.support.v7.widget.AbsActionBarView,int) -> a
    void access$101(android.support.v7.widget.AbsActionBarView,int) -> b
android.support.v7.widget.AbsActionBarView$VisibilityAnimListener -> android.support.v7.widget.b:
    boolean mCanceled -> c
    int mFinalVisibility -> a
    android.support.v7.widget.AbsActionBarView this$0 -> b
    void <init>(android.support.v7.widget.AbsActionBarView) -> <init>
    android.support.v7.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(android.support.v4.view.ViewPropertyAnimatorCompat,int) -> a
    void onAnimationStart(android.view.View) -> a
    void onAnimationEnd(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
android.support.v7.widget.ActionBarBackgroundDrawable -> android.support.v7.widget.c:
    android.support.v7.widget.ActionBarContainer mContainer -> a
    void <init>(android.support.v7.widget.ActionBarContainer) -> <init>
    void draw(android.graphics.Canvas) -> draw
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
android.support.v7.widget.ActionBarBackgroundDrawableV21 -> android.support.v7.widget.d:
    void <init>(android.support.v7.widget.ActionBarContainer) -> <init>
    void getOutline(android.graphics.Outline) -> getOutline
android.support.v7.widget.ActionBarContainer -> android.support.v7.widget.ActionBarContainer:
    boolean mIsTransitioning -> f
    android.view.View mTabContainer -> g
    android.view.View mActionBarView -> h
    android.view.View mContextView -> i
    android.graphics.drawable.Drawable mBackground -> a
    android.graphics.drawable.Drawable mStackedBackground -> b
    android.graphics.drawable.Drawable mSplitBackground -> c
    boolean mIsSplit -> d
    boolean mIsStacked -> e
    int mHeight -> j
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void onFinishInflate() -> onFinishInflate
    void setPrimaryBackground(android.graphics.drawable.Drawable) -> setPrimaryBackground
    void setStackedBackground(android.graphics.drawable.Drawable) -> setStackedBackground
    void setSplitBackground(android.graphics.drawable.Drawable) -> setSplitBackground
    void setVisibility(int) -> setVisibility
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    void jumpDrawablesToCurrentState() -> jumpDrawablesToCurrentState
    void setTransitioning(boolean) -> setTransitioning
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setTabContainer(android.support.v7.widget.ScrollingTabContainerView) -> setTabContainer
    android.view.View getTabContainer() -> getTabContainer
    android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback) -> startActionModeForChild
    boolean isCollapsed(android.view.View) -> a
    int getMeasuredHeightWithMargins(android.view.View) -> b
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
android.support.v7.widget.ActionBarContextView -> android.support.v7.widget.ActionBarContextView:
    java.lang.CharSequence mTitle -> g
    java.lang.CharSequence mSubtitle -> h
    android.view.View mClose -> i
    android.view.View mCustomView -> j
    android.widget.LinearLayout mTitleLayout -> k
    android.widget.TextView mTitleView -> l
    android.widget.TextView mSubtitleView -> m
    int mTitleStyleRes -> n
    int mSubtitleStyleRes -> o
    boolean mTitleOptional -> p
    int mCloseItemLayout -> q
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setContentHeight(int) -> setContentHeight
    void setCustomView(android.view.View) -> setCustomView
    void setTitle(java.lang.CharSequence) -> setTitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getSubtitle() -> getSubtitle
    void initTitle() -> e
    void initForMode(android.support.v7.view.ActionMode) -> a
    void closeMode() -> b
    void killMode() -> c
    boolean showOverflowMenu() -> a
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void setTitleOptional(boolean) -> setTitleOptional
    boolean isTitleOptional() -> d
    void setVisibility(int) -> setVisibility
    android.support.v4.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long) -> a
    int getAnimatedVisibility() -> getAnimatedVisibility
    int getContentHeight() -> getContentHeight
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
android.support.v7.widget.ActionBarContextView$1 -> android.support.v7.widget.e:
    android.support.v7.view.ActionMode val$mode -> a
    android.support.v7.widget.ActionBarContextView this$0 -> b
    void <init>(android.support.v7.widget.ActionBarContextView,android.support.v7.view.ActionMode) -> <init>
    void onClick(android.view.View) -> onClick
android.support.v7.widget.ActionBarOverlayLayout -> android.support.v7.widget.ActionBarOverlayLayout:
    int mActionBarHeight -> b
    int mWindowVisibility -> c
    android.support.v7.widget.ContentFrameLayout mContent -> d
    android.support.v7.widget.ActionBarContainer mActionBarTop -> e
    android.support.v7.widget.DecorToolbar mDecorToolbar -> f
    android.graphics.drawable.Drawable mWindowContentOverlay -> g
    boolean mIgnoreWindowContentOverlay -> h
    boolean mOverlayMode -> i
    boolean mHasNonEmbeddedTabs -> j
    boolean mHideOnContentScroll -> k
    boolean mAnimatingForFling -> l
    int mHideOnContentScrollReference -> m
    int mLastSystemUiVisibility -> n
    android.graphics.Rect mBaseContentInsets -> o
    android.graphics.Rect mLastBaseContentInsets -> p
    android.graphics.Rect mContentInsets -> q
    android.graphics.Rect mBaseInnerInsets -> r
    android.graphics.Rect mInnerInsets -> s
    android.graphics.Rect mLastInnerInsets -> t
    android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback mActionBarVisibilityCallback -> u
    int ACTION_BAR_ANIMATE_DELAY -> v
    android.support.v4.widget.ScrollerCompat mFlingEstimator -> w
    android.support.v4.view.ViewPropertyAnimatorCompat mCurrentActionBarTopAnimator -> x
    android.support.v4.view.ViewPropertyAnimatorListener mTopAnimatorListener -> y
    java.lang.Runnable mRemoveActionBarHideOffset -> z
    java.lang.Runnable mAddActionBarHideOffset -> A
    int[] ATTRS -> a
    android.support.v4.view.NestedScrollingParentHelper mParentHelper -> B
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void init(android.content.Context) -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setActionBarVisibilityCallback(android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback) -> setActionBarVisibilityCallback
    void setOverlayMode(boolean) -> setOverlayMode
    boolean isInOverlayMode() -> a
    void setHasNonEmbeddedTabs(boolean) -> setHasNonEmbeddedTabs
    void setShowingForActionMode(boolean) -> setShowingForActionMode
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onWindowSystemUiVisibilityChanged(int) -> onWindowSystemUiVisibilityChanged
    void onWindowVisibilityChanged(int) -> onWindowVisibilityChanged
    boolean applyInsets(android.view.View,android.graphics.Rect,boolean,boolean,boolean,boolean) -> a
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    android.support.v7.widget.ActionBarOverlayLayout$LayoutParams generateDefaultLayoutParams() -> b
    android.support.v7.widget.ActionBarOverlayLayout$LayoutParams generateLayoutParams(android.util.AttributeSet) -> a
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void draw(android.graphics.Canvas) -> draw
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    boolean onStartNestedScroll(android.view.View,android.view.View,int) -> onStartNestedScroll
    void onNestedScrollAccepted(android.view.View,android.view.View,int) -> onNestedScrollAccepted
    void onNestedScroll(android.view.View,int,int,int,int) -> onNestedScroll
    void onStopNestedScroll(android.view.View) -> onStopNestedScroll
    boolean onNestedFling(android.view.View,float,float,boolean) -> onNestedFling
    void onNestedPreScroll(android.view.View,int,int,int[]) -> onNestedPreScroll
    boolean onNestedPreFling(android.view.View,float,float) -> onNestedPreFling
    int getNestedScrollAxes() -> getNestedScrollAxes
    void pullChildren() -> c
    android.support.v7.widget.DecorToolbar getDecorToolbar(android.view.View) -> a
    void setHideOnContentScrollEnabled(boolean) -> setHideOnContentScrollEnabled
    int getActionBarHideOffset() -> getActionBarHideOffset
    void setActionBarHideOffset(int) -> setActionBarHideOffset
    void haltActionBarHideOffsetAnimations() -> k
    void postRemoveActionBarHideOffset() -> l
    void postAddActionBarHideOffset() -> m
    void removeActionBarHideOffset() -> n
    void addActionBarHideOffset() -> o
    boolean shouldHideActionBarOnFling(float,float) -> a
    void setWindowCallback(android.view.Window$Callback) -> setWindowCallback
    void setWindowTitle(java.lang.CharSequence) -> setWindowTitle
    java.lang.CharSequence getTitle() -> getTitle
    void initFeature(int) -> a
    void setUiOptions(int) -> setUiOptions
    void setIcon(int) -> setIcon
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void setLogo(int) -> setLogo
    boolean canShowOverflowMenu() -> d
    boolean isOverflowMenuShowing() -> e
    boolean isOverflowMenuShowPending() -> f
    boolean showOverflowMenu() -> g
    boolean hideOverflowMenu() -> h
    void setMenuPrepared() -> i
    void setMenu(android.view.Menu,android.support.v7.view.menu.MenuPresenter$Callback) -> a
    void dismissPopups() -> j
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.support.v4.view.ViewPropertyAnimatorCompat access$002(android.support.v7.widget.ActionBarOverlayLayout,android.support.v4.view.ViewPropertyAnimatorCompat) -> a
    boolean access$102(android.support.v7.widget.ActionBarOverlayLayout,boolean) -> a
    void access$200(android.support.v7.widget.ActionBarOverlayLayout) -> a
    android.support.v4.view.ViewPropertyAnimatorListener access$300(android.support.v7.widget.ActionBarOverlayLayout) -> b
    android.support.v7.widget.ActionBarContainer access$400(android.support.v7.widget.ActionBarOverlayLayout) -> c
    void <clinit>() -> <clinit>
android.support.v7.widget.ActionBarOverlayLayout$1 -> android.support.v7.widget.f:
    android.support.v7.widget.ActionBarOverlayLayout this$0 -> a
    void <init>(android.support.v7.widget.ActionBarOverlayLayout) -> <init>
    void onAnimationEnd(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
android.support.v7.widget.ActionBarOverlayLayout$2 -> android.support.v7.widget.g:
    android.support.v7.widget.ActionBarOverlayLayout this$0 -> a
    void <init>(android.support.v7.widget.ActionBarOverlayLayout) -> <init>
    void run() -> run
android.support.v7.widget.ActionBarOverlayLayout$3 -> android.support.v7.widget.h:
    android.support.v7.widget.ActionBarOverlayLayout this$0 -> a
    void <init>(android.support.v7.widget.ActionBarOverlayLayout) -> <init>
    void run() -> run
android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback -> android.support.v7.widget.i:
    void onWindowVisibilityChanged(int) -> a
    void showForSystem() -> g
    void hideForSystem() -> h
    void enableContentAnimations(boolean) -> g
    void onContentScrollStarted() -> i
    void onContentScrollStopped() -> j
android.support.v7.widget.ActionBarOverlayLayout$LayoutParams -> android.support.v7.widget.j:
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(int,int) -> <init>
    void <init>(android.view.ViewGroup$LayoutParams) -> <init>
android.support.v7.widget.ActionMenuPresenter -> android.support.v7.widget.k:
    android.support.v7.widget.ActionMenuPresenter$OverflowMenuButton mOverflowButton -> i
    android.graphics.drawable.Drawable mPendingOverflowIcon -> j
    boolean mPendingOverflowIconSet -> k
    boolean mReserveOverflow -> l
    boolean mReserveOverflowSet -> m
    int mWidthLimit -> n
    int mActionItemWidthLimit -> o
    int mMaxItems -> p
    boolean mMaxItemsSet -> q
    boolean mStrictWidthLimit -> r
    boolean mWidthLimitSet -> s
    boolean mExpandedActionViewsExclusive -> t
    int mMinCellSize -> u
    android.util.SparseBooleanArray mActionButtonGroups -> v
    android.view.View mScrapActionButtonView -> w
    android.support.v7.widget.ActionMenuPresenter$OverflowPopup mOverflowPopup -> x
    android.support.v7.widget.ActionMenuPresenter$ActionButtonSubmenu mActionButtonPopup -> y
    android.support.v7.widget.ActionMenuPresenter$OpenOverflowRunnable mPostedOpenRunnable -> z
    android.support.v7.widget.ActionMenuPresenter$ActionMenuPopupCallback mPopupCallback -> A
    android.support.v7.widget.ActionMenuPresenter$PopupPresenterCallback mPopupPresenterCallback -> g
    int mOpenSubMenuId -> h
    void <init>(android.content.Context) -> <init>
    void initForMenu(android.content.Context,android.support.v7.view.menu.MenuBuilder) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void setReserveOverflow(boolean) -> c
    void setExpandedActionViewsExclusive(boolean) -> d
    void setOverflowIcon(android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable getOverflowIcon() -> c
    android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    android.view.View getItemView(android.support.v7.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(android.support.v7.view.menu.MenuItemImpl,android.support.v7.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem(int,android.support.v7.view.menu.MenuItemImpl) -> a
    void updateMenuView(boolean) -> b
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder) -> a
    android.view.View findViewForItem(android.view.MenuItem) -> a
    boolean showOverflowMenu() -> d
    boolean hideOverflowMenu() -> e
    boolean dismissPopupMenus() -> f
    boolean hideSubMenus() -> g
    boolean isOverflowMenuShowing() -> h
    boolean isOverflowMenuShowPending() -> i
    boolean flagActionItems() -> b
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    void onSubUiVisibilityChanged(boolean) -> a
    void setMenuView(android.support.v7.widget.ActionMenuView) -> a
    android.support.v7.widget.ActionMenuPresenter$OverflowPopup access$200(android.support.v7.widget.ActionMenuPresenter) -> a
    android.support.v7.widget.ActionMenuPresenter$OpenOverflowRunnable access$300(android.support.v7.widget.ActionMenuPresenter) -> b
    android.support.v7.view.menu.MenuBuilder access$400(android.support.v7.widget.ActionMenuPresenter) -> c
    android.support.v7.view.menu.MenuBuilder access$500(android.support.v7.widget.ActionMenuPresenter) -> d
    android.support.v7.widget.ActionMenuPresenter$OverflowPopup access$202(android.support.v7.widget.ActionMenuPresenter,android.support.v7.widget.ActionMenuPresenter$OverflowPopup) -> a
    android.support.v7.widget.ActionMenuPresenter$OverflowMenuButton access$600(android.support.v7.widget.ActionMenuPresenter) -> e
    android.support.v7.view.menu.MenuView access$700(android.support.v7.widget.ActionMenuPresenter) -> f
    android.support.v7.widget.ActionMenuPresenter$ActionButtonSubmenu access$802(android.support.v7.widget.ActionMenuPresenter,android.support.v7.widget.ActionMenuPresenter$ActionButtonSubmenu) -> a
    android.support.v7.view.menu.MenuBuilder access$900(android.support.v7.widget.ActionMenuPresenter) -> g
    android.support.v7.view.menu.MenuView access$1000(android.support.v7.widget.ActionMenuPresenter) -> h
    android.support.v7.widget.ActionMenuPresenter$OpenOverflowRunnable access$302(android.support.v7.widget.ActionMenuPresenter,android.support.v7.widget.ActionMenuPresenter$OpenOverflowRunnable) -> a
    android.support.v7.widget.ActionMenuPresenter$ActionButtonSubmenu access$800(android.support.v7.widget.ActionMenuPresenter) -> i
android.support.v7.widget.ActionMenuPresenter$1 -> android.support.v7.widget.l:
android.support.v7.widget.ActionMenuPresenter$ActionButtonSubmenu -> android.support.v7.widget.m:
    android.support.v7.view.menu.SubMenuBuilder mSubMenu -> d
    android.support.v7.widget.ActionMenuPresenter this$0 -> c
    void <init>(android.support.v7.widget.ActionMenuPresenter,android.content.Context,android.support.v7.view.menu.SubMenuBuilder) -> <init>
    void onDismiss() -> onDismiss
android.support.v7.widget.ActionMenuPresenter$ActionMenuPopupCallback -> android.support.v7.widget.n:
    android.support.v7.widget.ActionMenuPresenter this$0 -> a
    void <init>(android.support.v7.widget.ActionMenuPresenter) -> <init>
    android.support.v7.widget.ListPopupWindow getPopup() -> a
    void <init>(android.support.v7.widget.ActionMenuPresenter,android.support.v7.widget.ActionMenuPresenter$1) -> <init>
android.support.v7.widget.ActionMenuPresenter$OpenOverflowRunnable -> android.support.v7.widget.o:
    android.support.v7.widget.ActionMenuPresenter$OverflowPopup mPopup -> b
    android.support.v7.widget.ActionMenuPresenter this$0 -> a
    void <init>(android.support.v7.widget.ActionMenuPresenter,android.support.v7.widget.ActionMenuPresenter$OverflowPopup) -> <init>
    void run() -> run
android.support.v7.widget.ActionMenuPresenter$OverflowMenuButton -> android.support.v7.widget.p:
    float[] mTempPts -> b
    android.support.v7.widget.ActionMenuPresenter this$0 -> a
    void <init>(android.support.v7.widget.ActionMenuPresenter,android.content.Context) -> <init>
    boolean performClick() -> performClick
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
    boolean setFrame(int,int,int,int) -> setFrame
android.support.v7.widget.ActionMenuPresenter$OverflowMenuButton$1 -> android.support.v7.widget.q:
    android.support.v7.widget.ActionMenuPresenter val$this$0 -> a
    android.support.v7.widget.ActionMenuPresenter$OverflowMenuButton this$1 -> b
    void <init>(android.support.v7.widget.ActionMenuPresenter$OverflowMenuButton,android.view.View,android.support.v7.widget.ActionMenuPresenter) -> <init>
    android.support.v7.widget.ListPopupWindow getPopup() -> a
    boolean onForwardingStarted() -> b
    boolean onForwardingStopped() -> c
android.support.v7.widget.ActionMenuPresenter$OverflowPopup -> android.support.v7.widget.r:
    android.support.v7.widget.ActionMenuPresenter this$0 -> c
    void <init>(android.support.v7.widget.ActionMenuPresenter,android.content.Context,android.support.v7.view.menu.MenuBuilder,android.view.View,boolean) -> <init>
    void onDismiss() -> onDismiss
android.support.v7.widget.ActionMenuPresenter$PopupPresenterCallback -> android.support.v7.widget.s:
    android.support.v7.widget.ActionMenuPresenter this$0 -> a
    void <init>(android.support.v7.widget.ActionMenuPresenter) -> <init>
    boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    void <init>(android.support.v7.widget.ActionMenuPresenter,android.support.v7.widget.ActionMenuPresenter$1) -> <init>
android.support.v7.widget.ActionMenuView -> android.support.v7.widget.ActionMenuView:
    android.support.v7.view.menu.MenuBuilder mMenu -> a
    android.content.Context mPopupContext -> b
    int mPopupTheme -> c
    boolean mReserveOverflow -> d
    android.support.v7.widget.ActionMenuPresenter mPresenter -> e
    android.support.v7.view.menu.MenuPresenter$Callback mActionMenuPresenterCallback -> f
    android.support.v7.view.menu.MenuBuilder$Callback mMenuBuilderCallback -> g
    boolean mFormatItems -> h
    int mFormatItemsWidth -> i
    int mMinCellSize -> j
    int mGeneratedItemPadding -> k
    android.support.v7.widget.ActionMenuView$OnMenuItemClickListener mOnMenuItemClickListener -> l
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void setPopupTheme(int) -> setPopupTheme
    int getPopupTheme() -> getPopupTheme
    void setPresenter(android.support.v7.widget.ActionMenuPresenter) -> setPresenter
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setOnMenuItemClickListener(android.support.v7.widget.ActionMenuView$OnMenuItemClickListener) -> setOnMenuItemClickListener
    void onMeasure(int,int) -> onMeasure
    void onMeasureExactFormat(int,int) -> c
    int measureChildForCells(android.view.View,int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOverflowIcon(android.graphics.drawable.Drawable) -> setOverflowIcon
    android.graphics.drawable.Drawable getOverflowIcon() -> getOverflowIcon
    boolean isOverflowReserved() -> a
    void setOverflowReserved(boolean) -> setOverflowReserved
    android.support.v7.widget.ActionMenuView$LayoutParams generateDefaultLayoutParams() -> b
    android.support.v7.widget.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet) -> a
    android.support.v7.widget.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> a
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.support.v7.widget.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams() -> c
    boolean invokeItem(android.support.v7.view.menu.MenuItemImpl) -> a
    int getWindowAnimations() -> getWindowAnimations
    void initialize(android.support.v7.view.menu.MenuBuilder) -> a
    android.view.Menu getMenu() -> getMenu
    void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter$Callback,android.support.v7.view.menu.MenuBuilder$Callback) -> a
    android.support.v7.view.menu.MenuBuilder peekMenu() -> d
    boolean showOverflowMenu() -> e
    boolean hideOverflowMenu() -> f
    boolean isOverflowMenuShowing() -> g
    boolean isOverflowMenuShowPending() -> h
    void dismissPopupMenus() -> i
    boolean hasSupportDividerBeforeChildAt(int) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void setExpandedActionViewsExclusive(boolean) -> setExpandedActionViewsExclusive
    android.support.v7.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> b
    android.support.v7.widget.LinearLayoutCompat$LayoutParams generateDefaultLayoutParams() -> j
    android.support.v7.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.util.AttributeSet) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.support.v7.widget.ActionMenuView$OnMenuItemClickListener access$200(android.support.v7.widget.ActionMenuView) -> a
    android.support.v7.view.menu.MenuBuilder$Callback access$300(android.support.v7.widget.ActionMenuView) -> b
android.support.v7.widget.ActionMenuView$1 -> android.support.v7.widget.t:
android.support.v7.widget.ActionMenuView$ActionMenuChildView -> android.support.v7.widget.u:
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
android.support.v7.widget.ActionMenuView$ActionMenuPresenterCallback -> android.support.v7.widget.v:
    android.support.v7.widget.ActionMenuView this$0 -> a
    void <init>(android.support.v7.widget.ActionMenuView) -> <init>
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder) -> a
    void <init>(android.support.v7.widget.ActionMenuView,android.support.v7.widget.ActionMenuView$1) -> <init>
android.support.v7.widget.ActionMenuView$LayoutParams -> android.support.v7.widget.w:
    boolean isOverflowButton -> a
    int cellsUsed -> b
    int extraPixels -> c
    boolean expandable -> d
    boolean preventEdgeOffset -> e
    boolean expanded -> f
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.view.ViewGroup$LayoutParams) -> <init>
    void <init>(android.support.v7.widget.ActionMenuView$LayoutParams) -> <init>
    void <init>(int,int) -> <init>
android.support.v7.widget.ActionMenuView$MenuBuilderCallback -> android.support.v7.widget.x:
    android.support.v7.widget.ActionMenuView this$0 -> a
    void <init>(android.support.v7.widget.ActionMenuView) -> <init>
    boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.view.menu.MenuBuilder) -> a
    void <init>(android.support.v7.widget.ActionMenuView,android.support.v7.widget.ActionMenuView$1) -> <init>
android.support.v7.widget.ActionMenuView$OnMenuItemClickListener -> android.support.v7.widget.y:
    boolean onMenuItemClick(android.view.MenuItem) -> a
android.support.v7.widget.ActivityChooserModel -> android.support.v7.widget.z:
    java.lang.String LOG_TAG -> a
    java.lang.Object sRegistryLock -> b
    java.util.Map sDataModelRegistry -> c
    java.lang.Object mInstanceLock -> d
    java.util.List mActivities -> e
    java.util.List mHistoricalRecords -> f
    android.content.Context mContext -> g
    java.lang.String mHistoryFileName -> h
    android.content.Intent mIntent -> i
    android.support.v7.widget.ActivityChooserModel$ActivitySorter mActivitySorter -> j
    int mHistoryMaxSize -> k
    boolean mCanReadHistoricalData -> l
    boolean mReadShareHistoryCalled -> m
    boolean mHistoricalRecordsChanged -> n
    boolean mReloadActivities -> o
    android.support.v7.widget.ActivityChooserModel$OnChooseActivityListener mActivityChoserModelPolicy -> p
    int getActivityCount() -> a
    android.content.pm.ResolveInfo getActivity(int) -> a
    int getActivityIndex(android.content.pm.ResolveInfo) -> a
    android.content.Intent chooseActivity(int) -> b
    android.content.pm.ResolveInfo getDefaultActivity() -> b
    void setDefaultActivity(int) -> c
    void persistHistoricalDataIfNeeded() -> d
    void ensureConsistentState() -> e
    boolean sortActivitiesIfNeeded() -> f
    boolean loadActivitiesIfNeeded() -> g
    boolean readHistoricalDataIfNeeded() -> h
    boolean addHisoricalRecord(android.support.v7.widget.ActivityChooserModel$HistoricalRecord) -> a
    void pruneExcessiveHistoricalRecordsIfNeeded() -> i
    void readHistoricalDataImpl() -> j
    android.content.Context access$200(android.support.v7.widget.ActivityChooserModel) -> a
    java.lang.String access$300() -> c
    java.lang.String access$400(android.support.v7.widget.ActivityChooserModel) -> b
    boolean access$502(android.support.v7.widget.ActivityChooserModel,boolean) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.ActivityChooserModel$1 -> android.support.v7.widget.aa:
android.support.v7.widget.ActivityChooserModel$ActivityResolveInfo -> android.support.v7.widget.ab:
    android.content.pm.ResolveInfo resolveInfo -> a
    float weight -> b
    android.support.v7.widget.ActivityChooserModel this$0 -> c
    void <init>(android.support.v7.widget.ActivityChooserModel,android.content.pm.ResolveInfo) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(android.support.v7.widget.ActivityChooserModel$ActivityResolveInfo) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
android.support.v7.widget.ActivityChooserModel$ActivitySorter -> android.support.v7.widget.ac:
    void sort(android.content.Intent,java.util.List,java.util.List) -> a
android.support.v7.widget.ActivityChooserModel$HistoricalRecord -> android.support.v7.widget.ad:
    android.content.ComponentName activity -> a
    long time -> b
    float weight -> c
    void <init>(java.lang.String,long,float) -> <init>
    void <init>(android.content.ComponentName,long,float) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
android.support.v7.widget.ActivityChooserModel$OnChooseActivityListener -> android.support.v7.widget.ae:
    boolean onChooseActivity(android.support.v7.widget.ActivityChooserModel,android.content.Intent) -> a
android.support.v7.widget.ActivityChooserModel$PersistHistoryAsyncTask -> android.support.v7.widget.af:
    android.support.v7.widget.ActivityChooserModel this$0 -> a
    void <init>(android.support.v7.widget.ActivityChooserModel) -> <init>
    java.lang.Void doInBackground(java.lang.Object[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(android.support.v7.widget.ActivityChooserModel,android.support.v7.widget.ActivityChooserModel$1) -> <init>
android.support.v7.widget.ActivityChooserView -> android.support.v7.widget.ActivityChooserView:
    android.support.v7.widget.ActivityChooserView$ActivityChooserViewAdapter mAdapter -> b
    android.support.v7.widget.ActivityChooserView$Callbacks mCallbacks -> c
    android.support.v7.widget.LinearLayoutCompat mActivityChooserContent -> d
    android.widget.FrameLayout mExpandActivityOverflowButton -> e
    android.widget.ImageView mExpandActivityOverflowButtonImage -> f
    android.widget.FrameLayout mDefaultActivityButton -> g
    int mListPopupMaxWidth -> h
    android.support.v4.view.ActionProvider mProvider -> a
    android.database.DataSetObserver mModelDataSetOberver -> i
    android.view.ViewTreeObserver$OnGlobalLayoutListener mOnGlobalLayoutListener -> j
    android.support.v7.widget.ListPopupWindow mListPopupWindow -> k
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> l
    boolean mIsSelectingDefaultActivity -> m
    int mInitialActivityCount -> n
    boolean mIsAttachedToWindow -> o
    int mDefaultActionButtonContentDescription -> p
    void setActivityChooserModel(android.support.v7.widget.ActivityChooserModel) -> setActivityChooserModel
    void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable) -> setExpandActivityOverflowButtonDrawable
    void setExpandActivityOverflowButtonContentDescription(int) -> setExpandActivityOverflowButtonContentDescription
    void setProvider(android.support.v4.view.ActionProvider) -> setProvider
    boolean showPopup() -> a
    void showPopupUnchecked(int) -> a
    boolean dismissPopup() -> b
    boolean isShowingPopup() -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.support.v7.widget.ActivityChooserModel getDataModel() -> getDataModel
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> setOnDismissListener
    void setInitialActivityCount(int) -> setInitialActivityCount
    void setDefaultActionButtonContentDescription(int) -> setDefaultActionButtonContentDescription
    android.support.v7.widget.ListPopupWindow getListPopupWindow() -> getListPopupWindow
    android.support.v7.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(android.support.v7.widget.ActivityChooserView) -> a
    void access$500(android.support.v7.widget.ActivityChooserView,int) -> a
    boolean access$600(android.support.v7.widget.ActivityChooserView) -> b
    android.widget.FrameLayout access$700(android.support.v7.widget.ActivityChooserView) -> c
    android.widget.FrameLayout access$800(android.support.v7.widget.ActivityChooserView) -> d
    boolean access$602(android.support.v7.widget.ActivityChooserView,boolean) -> a
    int access$900(android.support.v7.widget.ActivityChooserView) -> e
    android.widget.PopupWindow$OnDismissListener access$1000(android.support.v7.widget.ActivityChooserView) -> f
    android.database.DataSetObserver access$1100(android.support.v7.widget.ActivityChooserView) -> g
android.support.v7.widget.ActivityChooserView$ActivityChooserViewAdapter -> android.support.v7.widget.ag:
    android.support.v7.widget.ActivityChooserModel mDataModel -> b
    int mMaxActivityCount -> c
    boolean mShowDefaultActivity -> d
    boolean mHighlightDefaultActivity -> e
    boolean mShowFooterView -> f
    android.support.v7.widget.ActivityChooserView this$0 -> a
    void setDataModel(android.support.v7.widget.ActivityChooserModel) -> a
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int measureContentWidth() -> a
    void setMaxActivityCount(int) -> a
    android.content.pm.ResolveInfo getDefaultActivity() -> b
    void setShowFooterView(boolean) -> a
    int getActivityCount() -> c
    android.support.v7.widget.ActivityChooserModel getDataModel() -> d
    void setShowDefaultActivity(boolean,boolean) -> a
    boolean getShowDefaultActivity() -> e
android.support.v7.widget.ActivityChooserView$Callbacks -> android.support.v7.widget.ah:
    android.support.v7.widget.ActivityChooserView this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onClick(android.view.View) -> onClick
    boolean onLongClick(android.view.View) -> onLongClick
    void onDismiss() -> onDismiss
    void notifyOnDismissListener() -> a
android.support.v7.widget.ActivityChooserView$InnerLayout -> android.support.v7.widget.ActivityChooserView$InnerLayout:
    int[] TINT_ATTRS -> a
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatAutoCompleteTextView -> android.support.v7.widget.ai:
    int[] TINT_ATTRS -> a
    android.support.v7.widget.TintManager mTintManager -> b
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> c
    android.support.v7.widget.AppCompatTextHelper mTextHelper -> d
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setDropDownBackgroundResource(int) -> setDropDownBackgroundResource
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void drawableStateChanged() -> drawableStateChanged
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatBackgroundHelper -> android.support.v7.widget.aj:
    android.view.View mView -> a
    android.support.v7.widget.TintManager mTintManager -> b
    android.support.v7.widget.TintInfo mInternalBackgroundTint -> c
    android.support.v7.widget.TintInfo mBackgroundTint -> d
    void <init>(android.view.View,android.support.v7.widget.TintManager) -> <init>
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    void onSetBackgroundResource(int) -> a
    void onSetBackgroundDrawable(android.graphics.drawable.Drawable) -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> b
    void applySupportBackgroundTint() -> c
    void setInternalBackgroundTint(android.content.res.ColorStateList) -> b
android.support.v7.widget.AppCompatButton -> android.support.v7.widget.ak:
    android.support.v7.widget.TintManager mTintManager -> a
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    android.support.v7.widget.AppCompatTextHelper mTextHelper -> c
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void drawableStateChanged() -> drawableStateChanged
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void setSupportAllCaps(boolean) -> setSupportAllCaps
android.support.v7.widget.AppCompatCheckBox -> android.support.v7.widget.al:
    android.support.v7.widget.TintManager mTintManager -> a
    android.support.v7.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setButtonDrawable(android.graphics.drawable.Drawable) -> setButtonDrawable
    void setButtonDrawable(int) -> setButtonDrawable
    int getCompoundPaddingLeft() -> getCompoundPaddingLeft
    void setSupportButtonTintList(android.content.res.ColorStateList) -> setSupportButtonTintList
    android.content.res.ColorStateList getSupportButtonTintList() -> getSupportButtonTintList
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> setSupportButtonTintMode
    android.graphics.PorterDuff$Mode getSupportButtonTintMode() -> getSupportButtonTintMode
android.support.v7.widget.AppCompatCheckedTextView -> android.support.v7.widget.am:
    int[] TINT_ATTRS -> a
    android.support.v7.widget.TintManager mTintManager -> b
    android.support.v7.widget.AppCompatTextHelper mTextHelper -> c
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setCheckMarkDrawable(int) -> setCheckMarkDrawable
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
    void drawableStateChanged() -> drawableStateChanged
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatCompoundButtonHelper -> android.support.v7.widget.an:
    android.widget.CompoundButton mView -> a
    android.support.v7.widget.TintManager mTintManager -> b
    android.content.res.ColorStateList mButtonTintList -> c
    android.graphics.PorterDuff$Mode mButtonTintMode -> d
    boolean mHasButtonTint -> e
    boolean mHasButtonTintMode -> f
    boolean mSkipNextApply -> g
    void <init>(android.widget.CompoundButton,android.support.v7.widget.TintManager) -> <init>
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    void setSupportButtonTintList(android.content.res.ColorStateList) -> a
    android.content.res.ColorStateList getSupportButtonTintList() -> a
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> a
    android.graphics.PorterDuff$Mode getSupportButtonTintMode() -> b
    void onSetButtonDrawable() -> c
    void applyButtonTint() -> d
    int getCompoundPaddingLeft(int) -> a
android.support.v7.widget.AppCompatEditText -> android.support.v7.widget.ao:
    android.support.v7.widget.TintManager mTintManager -> a
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    android.support.v7.widget.AppCompatTextHelper mTextHelper -> c
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void drawableStateChanged() -> drawableStateChanged
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
android.support.v7.widget.AppCompatImageButton -> android.support.v7.widget.ap:
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    android.support.v7.widget.AppCompatImageHelper mImageHelper -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setImageResource(int) -> setImageResource
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void drawableStateChanged() -> drawableStateChanged
android.support.v7.widget.AppCompatImageHelper -> android.support.v7.widget.aq:
    int[] VIEW_ATTRS -> a
    android.widget.ImageView mView -> b
    android.support.v7.widget.TintManager mTintManager -> c
    void <init>(android.widget.ImageView,android.support.v7.widget.TintManager) -> <init>
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    void setImageResource(int) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatImageView -> android.support.v7.widget.ar:
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    android.support.v7.widget.AppCompatImageHelper mImageHelper -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setImageResource(int) -> setImageResource
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void drawableStateChanged() -> drawableStateChanged
android.support.v7.widget.AppCompatMultiAutoCompleteTextView -> android.support.v7.widget.as:
    int[] TINT_ATTRS -> a
    android.support.v7.widget.TintManager mTintManager -> b
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> c
    android.support.v7.widget.AppCompatTextHelper mTextHelper -> d
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setDropDownBackgroundResource(int) -> setDropDownBackgroundResource
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void drawableStateChanged() -> drawableStateChanged
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatPopupWindow -> android.support.v7.widget.at:
    boolean COMPAT_OVERLAP_ANCHOR -> a
    boolean mOverlapAnchor -> b
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void showAsDropDown(android.view.View,int,int) -> showAsDropDown
    void showAsDropDown(android.view.View,int,int,int) -> showAsDropDown
    void update(android.view.View,int,int,int,int) -> update
    void wrapOnScrollChangedListener(android.widget.PopupWindow) -> a
    void setSupportOverlapAnchor(boolean) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatPopupWindow$1 -> android.support.v7.widget.au:
    java.lang.reflect.Field val$fieldAnchor -> a
    android.widget.PopupWindow val$popup -> b
    android.view.ViewTreeObserver$OnScrollChangedListener val$originalListener -> c
    void <init>(java.lang.reflect.Field,android.widget.PopupWindow,android.view.ViewTreeObserver$OnScrollChangedListener) -> <init>
    void onScrollChanged() -> onScrollChanged
android.support.v7.widget.AppCompatProgressBarHelper -> android.support.v7.widget.av:
    int[] TINT_ATTRS -> b
    android.widget.ProgressBar mView -> c
    android.support.v7.widget.TintManager mTintManager -> a
    android.graphics.Bitmap mSampleTile -> d
    void <init>(android.widget.ProgressBar,android.support.v7.widget.TintManager) -> <init>
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean) -> a
    android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.shapes.Shape getDrawableShape() -> b
    android.graphics.Bitmap getSampleTime() -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatRadioButton -> android.support.v7.widget.aw:
    android.support.v7.widget.TintManager mTintManager -> a
    android.support.v7.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setButtonDrawable(android.graphics.drawable.Drawable) -> setButtonDrawable
    void setButtonDrawable(int) -> setButtonDrawable
    int getCompoundPaddingLeft() -> getCompoundPaddingLeft
    void setSupportButtonTintList(android.content.res.ColorStateList) -> setSupportButtonTintList
    android.content.res.ColorStateList getSupportButtonTintList() -> getSupportButtonTintList
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> setSupportButtonTintMode
    android.graphics.PorterDuff$Mode getSupportButtonTintMode() -> getSupportButtonTintMode
android.support.v7.widget.AppCompatRatingBar -> android.support.v7.widget.ax:
    android.support.v7.widget.AppCompatProgressBarHelper mAppCompatProgressBarHelper -> a
    android.support.v7.widget.TintManager mTintManager -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void onMeasure(int,int) -> onMeasure
android.support.v7.widget.AppCompatSeekBar -> android.support.v7.widget.ay:
    android.support.v7.widget.AppCompatSeekBarHelper mAppCompatSeekBarHelper -> a
    android.support.v7.widget.TintManager mTintManager -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
android.support.v7.widget.AppCompatSeekBarHelper -> android.support.v7.widget.az:
    int[] TINT_ATTRS -> b
    android.widget.SeekBar mView -> c
    void <init>(android.widget.SeekBar,android.support.v7.widget.TintManager) -> <init>
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatSpinner -> android.support.v7.widget.ba:
    boolean IS_AT_LEAST_M -> a
    boolean IS_AT_LEAST_JB -> b
    int[] ATTRS_ANDROID_SPINNERMODE -> c
    android.support.v7.widget.TintManager mTintManager -> d
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> e
    android.content.Context mPopupContext -> f
    android.support.v7.widget.ListPopupWindow$ForwardingListener mForwardingListener -> g
    android.widget.SpinnerAdapter mTempAdapter -> h
    boolean mPopupSet -> i
    android.support.v7.widget.AppCompatSpinner$DropdownPopup mPopup -> j
    int mDropDownWidth -> k
    android.graphics.Rect mTempRect -> l
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme) -> <init>
    android.content.Context getPopupContext() -> getPopupContext
    void setPopupBackgroundDrawable(android.graphics.drawable.Drawable) -> setPopupBackgroundDrawable
    void setPopupBackgroundResource(int) -> setPopupBackgroundResource
    android.graphics.drawable.Drawable getPopupBackground() -> getPopupBackground
    void setDropDownVerticalOffset(int) -> setDropDownVerticalOffset
    int getDropDownVerticalOffset() -> getDropDownVerticalOffset
    void setDropDownHorizontalOffset(int) -> setDropDownHorizontalOffset
    int getDropDownHorizontalOffset() -> getDropDownHorizontalOffset
    void setDropDownWidth(int) -> setDropDownWidth
    int getDropDownWidth() -> getDropDownWidth
    void setAdapter(android.widget.SpinnerAdapter) -> setAdapter
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onMeasure(int,int) -> onMeasure
    boolean performClick() -> performClick
    void setPrompt(java.lang.CharSequence) -> setPrompt
    java.lang.CharSequence getPrompt() -> getPrompt
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void drawableStateChanged() -> drawableStateChanged
    int compatMeasureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable) -> a
    void setAdapter(android.widget.Adapter) -> setAdapter
    android.support.v7.widget.AppCompatSpinner$DropdownPopup access$000(android.support.v7.widget.AppCompatSpinner) -> a
    boolean access$100() -> a
    android.graphics.Rect access$300(android.support.v7.widget.AppCompatSpinner) -> b
    int access$400(android.support.v7.widget.AppCompatSpinner) -> c
    int access$500(android.support.v7.widget.AppCompatSpinner,android.widget.SpinnerAdapter,android.graphics.drawable.Drawable) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatSpinner$1 -> android.support.v7.widget.bb:
    android.support.v7.widget.AppCompatSpinner$DropdownPopup val$popup -> a
    android.support.v7.widget.AppCompatSpinner this$0 -> b
    void <init>(android.support.v7.widget.AppCompatSpinner,android.view.View,android.support.v7.widget.AppCompatSpinner$DropdownPopup) -> <init>
    android.support.v7.widget.ListPopupWindow getPopup() -> a
    boolean onForwardingStarted() -> b
android.support.v7.widget.AppCompatSpinner$DropDownAdapter -> android.support.v7.widget.bc:
    android.widget.SpinnerAdapter mAdapter -> a
    android.widget.ListAdapter mListAdapter -> b
    void <init>(android.widget.SpinnerAdapter,android.content.res.Resources$Theme) -> <init>
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    boolean hasStableIds() -> hasStableIds
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    boolean isEmpty() -> isEmpty
android.support.v7.widget.AppCompatSpinner$DropdownPopup -> android.support.v7.widget.bd:
    java.lang.CharSequence mHintText -> c
    android.widget.ListAdapter mAdapter -> d
    android.graphics.Rect mVisibleRect -> e
    android.support.v7.widget.AppCompatSpinner this$0 -> a
    void <init>(android.support.v7.widget.AppCompatSpinner,android.content.Context,android.util.AttributeSet,int) -> <init>
    void setAdapter(android.widget.ListAdapter) -> a
    java.lang.CharSequence getHintText() -> a
    void setPromptText(java.lang.CharSequence) -> a
    void computeContentWidth() -> b
    void show() -> c
    boolean isVisibleToUser(android.view.View) -> b
    android.widget.ListAdapter access$200(android.support.v7.widget.AppCompatSpinner$DropdownPopup) -> a
    boolean access$600(android.support.v7.widget.AppCompatSpinner$DropdownPopup,android.view.View) -> a
    void access$701(android.support.v7.widget.AppCompatSpinner$DropdownPopup) -> b
android.support.v7.widget.AppCompatSpinner$DropdownPopup$1 -> android.support.v7.widget.be:
    android.support.v7.widget.AppCompatSpinner val$this$0 -> a
    android.support.v7.widget.AppCompatSpinner$DropdownPopup this$1 -> b
    void <init>(android.support.v7.widget.AppCompatSpinner$DropdownPopup,android.support.v7.widget.AppCompatSpinner) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v7.widget.AppCompatSpinner$DropdownPopup$2 -> android.support.v7.widget.bf:
    android.support.v7.widget.AppCompatSpinner$DropdownPopup this$1 -> a
    void <init>(android.support.v7.widget.AppCompatSpinner$DropdownPopup) -> <init>
    void onGlobalLayout() -> onGlobalLayout
android.support.v7.widget.AppCompatSpinner$DropdownPopup$3 -> android.support.v7.widget.bg:
    android.view.ViewTreeObserver$OnGlobalLayoutListener val$layoutListener -> a
    android.support.v7.widget.AppCompatSpinner$DropdownPopup this$1 -> b
    void <init>(android.support.v7.widget.AppCompatSpinner$DropdownPopup,android.view.ViewTreeObserver$OnGlobalLayoutListener) -> <init>
    void onDismiss() -> onDismiss
android.support.v7.widget.AppCompatTextHelper -> android.support.v7.widget.bh:
    int[] VIEW_ATTRS -> b
    int[] TEXT_APPEARANCE_ATTRS -> c
    android.widget.TextView mView -> a
    android.support.v7.widget.TintInfo mDrawableLeftTint -> d
    android.support.v7.widget.TintInfo mDrawableTopTint -> e
    android.support.v7.widget.TintInfo mDrawableRightTint -> f
    android.support.v7.widget.TintInfo mDrawableBottomTint -> g
    android.support.v7.widget.AppCompatTextHelper create(android.widget.TextView) -> a
    void <init>(android.widget.TextView) -> <init>
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    void onSetTextAppearance(android.content.Context,int) -> a
    void setAllCaps(boolean) -> a
    void applyCompoundDrawablesTints() -> a
    void applyCompoundDrawableTint(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo) -> a
    android.support.v7.widget.TintInfo createTintInfo(android.content.Context,android.support.v7.widget.TintManager,int) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatTextHelperV17 -> android.support.v7.widget.bi:
    int[] VIEW_ATTRS_v17 -> b
    android.support.v7.widget.TintInfo mDrawableStartTint -> c
    android.support.v7.widget.TintInfo mDrawableEndTint -> d
    void <init>(android.widget.TextView) -> <init>
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    void applyCompoundDrawablesTints() -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.AppCompatTextView -> android.support.v7.widget.bj:
    android.support.v7.widget.TintManager mTintManager -> a
    android.support.v7.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    android.support.v7.widget.AppCompatTextHelper mTextHelper -> c
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setBackgroundResource(int) -> setBackgroundResource
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> setSupportBackgroundTintList
    android.content.res.ColorStateList getSupportBackgroundTintList() -> getSupportBackgroundTintList
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> setSupportBackgroundTintMode
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> getSupportBackgroundTintMode
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
    void drawableStateChanged() -> drawableStateChanged
android.support.v7.widget.ButtonBarLayout -> android.support.v7.widget.ButtonBarLayout:
    boolean mAllowStacking -> a
    int mLastWidthSize -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void setAllowStacking(boolean) -> setAllowStacking
    void onMeasure(int,int) -> onMeasure
    void setStacked(boolean) -> setStacked
    boolean isStacked() -> a
android.support.v7.widget.ContentFrameLayout -> android.support.v7.widget.ContentFrameLayout:
    android.util.TypedValue mMinWidthMajor -> a
    android.util.TypedValue mMinWidthMinor -> b
    android.util.TypedValue mFixedWidthMajor -> c
    android.util.TypedValue mFixedWidthMinor -> d
    android.util.TypedValue mFixedHeightMajor -> e
    android.util.TypedValue mFixedHeightMinor -> f
    android.graphics.Rect mDecorPadding -> g
    android.support.v7.widget.ContentFrameLayout$OnAttachListener mAttachListener -> h
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void dispatchFitSystemWindows(android.graphics.Rect) -> a
    void setAttachListener(android.support.v7.widget.ContentFrameLayout$OnAttachListener) -> setAttachListener
    void setDecorPadding(int,int,int,int) -> a
    void onMeasure(int,int) -> onMeasure
    android.util.TypedValue getMinWidthMajor() -> getMinWidthMajor
    android.util.TypedValue getMinWidthMinor() -> getMinWidthMinor
    android.util.TypedValue getFixedWidthMajor() -> getFixedWidthMajor
    android.util.TypedValue getFixedWidthMinor() -> getFixedWidthMinor
    android.util.TypedValue getFixedHeightMajor() -> getFixedHeightMajor
    android.util.TypedValue getFixedHeightMinor() -> getFixedHeightMinor
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
android.support.v7.widget.ContentFrameLayout$OnAttachListener -> android.support.v7.widget.bk:
    void onDetachedFromWindow() -> b
    void onAttachedFromWindow() -> a
android.support.v7.widget.DecorContentParent -> android.support.v7.widget.bl:
    void setWindowCallback(android.view.Window$Callback) -> setWindowCallback
    void setWindowTitle(java.lang.CharSequence) -> setWindowTitle
    void initFeature(int) -> a
    boolean canShowOverflowMenu() -> d
    boolean isOverflowMenuShowing() -> e
    boolean isOverflowMenuShowPending() -> f
    boolean showOverflowMenu() -> g
    boolean hideOverflowMenu() -> h
    void setMenuPrepared() -> i
    void setMenu(android.view.Menu,android.support.v7.view.menu.MenuPresenter$Callback) -> a
    void dismissPopups() -> j
android.support.v7.widget.DecorToolbar -> android.support.v7.widget.bm:
    android.view.ViewGroup getViewGroup() -> a
    android.content.Context getContext() -> b
    boolean hasExpandedActionView() -> c
    void collapseActionView() -> d
    void setWindowCallback(android.view.Window$Callback) -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    java.lang.CharSequence getTitle() -> e
    void initProgress() -> f
    void initIndeterminateProgress() -> g
    void setIcon(int) -> a
    void setIcon(android.graphics.drawable.Drawable) -> a
    void setLogo(int) -> b
    boolean canShowOverflowMenu() -> h
    boolean isOverflowMenuShowing() -> i
    boolean isOverflowMenuShowPending() -> j
    boolean showOverflowMenu() -> k
    boolean hideOverflowMenu() -> l
    void setMenuPrepared() -> m
    void setMenu(android.view.Menu,android.support.v7.view.menu.MenuPresenter$Callback) -> a
    void dismissPopupMenus() -> n
    int getDisplayOptions() -> o
    void setDisplayOptions(int) -> c
    void setEmbeddedTabView(android.support.v7.widget.ScrollingTabContainerView) -> a
    void setCollapsible(boolean) -> a
    void setHomeButtonEnabled(boolean) -> b
    int getNavigationMode() -> p
    android.support.v4.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long) -> a
    void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter$Callback,android.support.v7.view.menu.MenuBuilder$Callback) -> a
    android.view.Menu getMenu() -> q
android.support.v7.widget.DialogTitle -> android.support.v7.widget.DialogTitle:
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context) -> <init>
    void onMeasure(int,int) -> onMeasure
android.support.v7.widget.FitWindowsFrameLayout -> android.support.v7.widget.FitWindowsFrameLayout:
    android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener mListener -> a
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void setOnFitSystemWindowsListener(android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener) -> setOnFitSystemWindowsListener
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
android.support.v7.widget.FitWindowsLinearLayout -> android.support.v7.widget.FitWindowsLinearLayout:
    android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener mListener -> a
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void setOnFitSystemWindowsListener(android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener) -> setOnFitSystemWindowsListener
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
android.support.v7.widget.FitWindowsViewGroup -> android.support.v7.widget.bn:
    void setOnFitSystemWindowsListener(android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener) -> setOnFitSystemWindowsListener
android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener -> android.support.v7.widget.bo:
    void onFitSystemWindows(android.graphics.Rect) -> a
android.support.v7.widget.LinearLayoutCompat -> android.support.v7.widget.bp:
    boolean mBaselineAligned -> a
    int mBaselineAlignedChildIndex -> b
    int mBaselineChildTop -> c
    int mOrientation -> d
    int mGravity -> e
    int mTotalLength -> f
    float mWeightSum -> g
    boolean mUseLargestChild -> h
    int[] mMaxAscent -> i
    int[] mMaxDescent -> j
    android.graphics.drawable.Drawable mDivider -> k
    int mDividerWidth -> l
    int mDividerHeight -> m
    int mShowDividers -> n
    int mDividerPadding -> o
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setShowDividers(int) -> setShowDividers
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    int getShowDividers() -> getShowDividers
    android.graphics.drawable.Drawable getDividerDrawable() -> getDividerDrawable
    void setDividerDrawable(android.graphics.drawable.Drawable) -> setDividerDrawable
    void setDividerPadding(int) -> setDividerPadding
    int getDividerPadding() -> getDividerPadding
    int getDividerWidth() -> getDividerWidth
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawDividersVertical(android.graphics.Canvas) -> a
    void drawDividersHorizontal(android.graphics.Canvas) -> b
    void drawHorizontalDivider(android.graphics.Canvas,int) -> a
    void drawVerticalDivider(android.graphics.Canvas,int) -> b
    void setBaselineAligned(boolean) -> setBaselineAligned
    void setMeasureWithLargestChildEnabled(boolean) -> setMeasureWithLargestChildEnabled
    int getBaseline() -> getBaseline
    int getBaselineAlignedChildIndex() -> getBaselineAlignedChildIndex
    void setBaselineAlignedChildIndex(int) -> setBaselineAlignedChildIndex
    android.view.View getVirtualChildAt(int) -> b
    int getVirtualChildCount() -> getVirtualChildCount
    float getWeightSum() -> getWeightSum
    void setWeightSum(float) -> setWeightSum
    void onMeasure(int,int) -> onMeasure
    boolean hasDividerBeforeChildAt(int) -> c
    void measureVertical(int,int) -> a
    void forceUniformWidth(int,int) -> c
    void measureHorizontal(int,int) -> b
    void forceUniformHeight(int,int) -> d
    int getChildrenSkipCount(android.view.View,int) -> a
    int measureNullChild(int) -> d
    void measureChildBeforeLayout(android.view.View,int,int,int,int,int) -> a
    int getLocationOffset(android.view.View) -> a
    int getNextLocationOffset(android.view.View) -> b
    void onLayout(boolean,int,int,int,int) -> onLayout
    void layoutVertical(int,int,int,int) -> a
    void layoutHorizontal(int,int,int,int) -> b
    void setChildFrame(android.view.View,int,int,int,int) -> a
    void setOrientation(int) -> setOrientation
    int getOrientation() -> getOrientation
    void setGravity(int) -> setGravity
    void setHorizontalGravity(int) -> setHorizontalGravity
    void setVerticalGravity(int) -> setVerticalGravity
    android.support.v7.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.util.AttributeSet) -> b
    android.support.v7.widget.LinearLayoutCompat$LayoutParams generateDefaultLayoutParams() -> j
    android.support.v7.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> b
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
android.support.v7.widget.LinearLayoutCompat$LayoutParams -> android.support.v7.widget.bq:
    float weight -> g
    int gravity -> h
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(int,int) -> <init>
    void <init>(android.view.ViewGroup$LayoutParams) -> <init>
android.support.v7.widget.ListPopupWindow -> android.support.v7.widget.br:
    java.lang.reflect.Method sClipToWindowEnabledMethod -> a
    java.lang.reflect.Method sGetMaxAvailableHeightMethod -> c
    android.content.Context mContext -> d
    android.widget.PopupWindow mPopup -> e
    android.widget.ListAdapter mAdapter -> f
    android.support.v7.widget.ListPopupWindow$DropDownListView mDropDownList -> g
    int mDropDownHeight -> h
    int mDropDownWidth -> i
    int mDropDownHorizontalOffset -> j
    int mDropDownVerticalOffset -> k
    int mDropDownWindowLayoutType -> l
    boolean mDropDownVerticalOffsetSet -> m
    int mDropDownGravity -> n
    boolean mDropDownAlwaysVisible -> o
    boolean mForceIgnoreOutsideTouch -> p
    int mListItemExpandMaximum -> b
    android.view.View mPromptView -> q
    int mPromptPosition -> r
    android.database.DataSetObserver mObserver -> s
    android.view.View mDropDownAnchorView -> t
    android.graphics.drawable.Drawable mDropDownListHighlight -> u
    android.widget.AdapterView$OnItemClickListener mItemClickListener -> v
    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener -> w
    android.support.v7.widget.ListPopupWindow$ResizePopupRunnable mResizePopupRunnable -> x
    android.support.v7.widget.ListPopupWindow$PopupTouchInterceptor mTouchInterceptor -> y
    android.support.v7.widget.ListPopupWindow$PopupScrollListener mScrollListener -> z
    android.support.v7.widget.ListPopupWindow$ListSelectorHider mHideSelector -> A
    java.lang.Runnable mShowDropDownRunnable -> B
    android.os.Handler mHandler -> C
    android.graphics.Rect mTempRect -> D
    boolean mModal -> E
    int mLayoutDirection -> F
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int,int) -> <init>
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptPosition(int) -> a
    void setModal(boolean) -> a
    android.graphics.drawable.Drawable getBackground() -> d
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> a
    android.view.View getAnchorView() -> e
    void setAnchorView(android.view.View) -> a
    int getHorizontalOffset() -> f
    void setHorizontalOffset(int) -> b
    int getVerticalOffset() -> g
    void setVerticalOffset(int) -> c
    void setDropDownGravity(int) -> d
    int getWidth() -> h
    void setWidth(int) -> e
    void setContentWidth(int) -> f
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> a
    void show() -> c
    void dismiss() -> i
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    void removePromptView() -> a
    void setInputMethodMode(int) -> g
    void setSelection(int) -> h
    void clearListSelection() -> j
    boolean isShowing() -> k
    boolean isInputMethodNotNeeded() -> l
    android.widget.ListView getListView() -> m
    int buildDropDown() -> b
    void setPopupClipToScreenEnabled(boolean) -> b
    int getMaxAvailableHeight(android.view.View,int,boolean) -> a
    android.support.v7.widget.ListPopupWindow$DropDownListView access$600(android.support.v7.widget.ListPopupWindow) -> a
    android.widget.PopupWindow access$1100(android.support.v7.widget.ListPopupWindow) -> b
    android.support.v7.widget.ListPopupWindow$ResizePopupRunnable access$1200(android.support.v7.widget.ListPopupWindow) -> c
    android.os.Handler access$1300(android.support.v7.widget.ListPopupWindow) -> d
    void <clinit>() -> <clinit>
android.support.v7.widget.ListPopupWindow$1 -> android.support.v7.widget.bs:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    android.support.v7.widget.ListPopupWindow getPopup() -> a
android.support.v7.widget.ListPopupWindow$2 -> android.support.v7.widget.bt:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow) -> <init>
    void run() -> run
android.support.v7.widget.ListPopupWindow$3 -> android.support.v7.widget.bu:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow) -> <init>
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
android.support.v7.widget.ListPopupWindow$DropDownListView -> android.support.v7.widget.bv:
    boolean mListSelectionHidden -> g
    boolean mHijackFocus -> h
    boolean mDrawsInPressedState -> i
    android.support.v4.view.ViewPropertyAnimatorCompat mClickAnimation -> j
    android.support.v4.widget.ListViewAutoScrollHelper mScrollHelper -> k
    void <init>(android.content.Context,boolean) -> <init>
    boolean onForwardedEvent(android.view.MotionEvent,int) -> a
    void clickPressedItem(android.view.View,int) -> a
    void clearPressedItem() -> d
    void setPressedItem(android.view.View,int,float,float) -> a
    boolean touchModeDrawsInPressedStateCompat() -> a
    boolean isInTouchMode() -> isInTouchMode
    boolean hasWindowFocus() -> hasWindowFocus
    boolean isFocused() -> isFocused
    boolean hasFocus() -> hasFocus
    boolean access$502(android.support.v7.widget.ListPopupWindow$DropDownListView,boolean) -> a
android.support.v7.widget.ListPopupWindow$ForwardingListener -> android.support.v7.widget.bw:
    float mScaledTouchSlop -> a
    int mTapTimeout -> b
    int mLongPressTimeout -> c
    android.view.View mSrc -> d
    java.lang.Runnable mDisallowIntercept -> e
    java.lang.Runnable mTriggerLongPress -> f
    boolean mForwarding -> g
    boolean mWasLongPress -> h
    int mActivePointerId -> i
    int[] mTmpLocation -> j
    void <init>(android.view.View) -> <init>
    android.support.v7.widget.ListPopupWindow getPopup() -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onForwardingStarted() -> b
    boolean onForwardingStopped() -> c
    boolean onTouchObserved(android.view.MotionEvent) -> a
    void clearCallbacks() -> d
    void onLongPress() -> e
    boolean onTouchForwarded(android.view.MotionEvent) -> b
    boolean pointInView(android.view.View,float,float,float) -> a
    boolean toLocalMotionEvent(android.view.View,android.view.MotionEvent) -> a
    boolean toGlobalMotionEvent(android.view.View,android.view.MotionEvent) -> b
    android.view.View access$900(android.support.v7.widget.ListPopupWindow$ForwardingListener) -> a
    void access$1000(android.support.v7.widget.ListPopupWindow$ForwardingListener) -> b
android.support.v7.widget.ListPopupWindow$ForwardingListener$DisallowIntercept -> android.support.v7.widget.bx:
    android.support.v7.widget.ListPopupWindow$ForwardingListener this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow$ForwardingListener) -> <init>
    void run() -> run
    void <init>(android.support.v7.widget.ListPopupWindow$ForwardingListener,android.support.v7.widget.ListPopupWindow$1) -> <init>
android.support.v7.widget.ListPopupWindow$ForwardingListener$TriggerLongPress -> android.support.v7.widget.by:
    android.support.v7.widget.ListPopupWindow$ForwardingListener this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow$ForwardingListener) -> <init>
    void run() -> run
    void <init>(android.support.v7.widget.ListPopupWindow$ForwardingListener,android.support.v7.widget.ListPopupWindow$1) -> <init>
android.support.v7.widget.ListPopupWindow$ListSelectorHider -> android.support.v7.widget.bz:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow) -> <init>
    void run() -> run
    void <init>(android.support.v7.widget.ListPopupWindow,android.support.v7.widget.ListPopupWindow$1) -> <init>
android.support.v7.widget.ListPopupWindow$PopupDataSetObserver -> android.support.v7.widget.ca:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow) -> <init>
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
    void <init>(android.support.v7.widget.ListPopupWindow,android.support.v7.widget.ListPopupWindow$1) -> <init>
android.support.v7.widget.ListPopupWindow$PopupScrollListener -> android.support.v7.widget.cb:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow) -> <init>
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void <init>(android.support.v7.widget.ListPopupWindow,android.support.v7.widget.ListPopupWindow$1) -> <init>
android.support.v7.widget.ListPopupWindow$PopupTouchInterceptor -> android.support.v7.widget.cc:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void <init>(android.support.v7.widget.ListPopupWindow,android.support.v7.widget.ListPopupWindow$1) -> <init>
android.support.v7.widget.ListPopupWindow$ResizePopupRunnable -> android.support.v7.widget.cd:
    android.support.v7.widget.ListPopupWindow this$0 -> a
    void <init>(android.support.v7.widget.ListPopupWindow) -> <init>
    void run() -> run
    void <init>(android.support.v7.widget.ListPopupWindow,android.support.v7.widget.ListPopupWindow$1) -> <init>
android.support.v7.widget.ListViewCompat -> android.support.v7.widget.ce:
    int[] STATE_SET_NOTHING -> g
    android.graphics.Rect mSelectorRect -> a
    int mSelectionLeftPadding -> b
    int mSelectionTopPadding -> c
    int mSelectionRightPadding -> d
    int mSelectionBottomPadding -> e
    int mMotionPosition -> f
    java.lang.reflect.Field mIsChildViewEnabled -> h
    android.support.v7.widget.ListViewCompat$GateKeeperDrawable mSelector -> i
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setSelector(android.graphics.drawable.Drawable) -> setSelector
    void drawableStateChanged() -> drawableStateChanged
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void updateSelectorStateCompat() -> b
    boolean shouldShowSelectorCompat() -> c
    boolean touchModeDrawsInPressedStateCompat() -> a
    void drawSelectorCompat(android.graphics.Canvas) -> a
    void positionSelectorLikeTouchCompat(int,android.view.View,float,float) -> a
    void positionSelectorLikeFocusCompat(int,android.view.View) -> a
    void positionSelectorCompat(int,android.view.View) -> b
    int measureHeightOfChildrenCompat(int,int,int,int,int) -> a
    void setSelectorEnabled(boolean) -> setSelectorEnabled
    void <clinit>() -> <clinit>
android.support.v7.widget.ListViewCompat$GateKeeperDrawable -> android.support.v7.widget.cf:
    boolean mEnabled -> a
    void <init>(android.graphics.drawable.Drawable) -> <init>
    void setEnabled(boolean) -> a
    boolean setState(int[]) -> setState
    void draw(android.graphics.Canvas) -> draw
    void setHotspot(float,float) -> setHotspot
    void setHotspotBounds(int,int,int,int) -> setHotspotBounds
    boolean setVisible(boolean,boolean) -> setVisible
android.support.v7.widget.ResourcesWrapper -> android.support.v7.widget.cg:
    android.content.res.Resources mResources -> a
    void <init>(android.content.res.Resources) -> <init>
    java.lang.CharSequence getText(int) -> getText
    java.lang.CharSequence getQuantityText(int,int) -> getQuantityText
    java.lang.String getString(int) -> getString
    java.lang.String getString(int,java.lang.Object[]) -> getString
    java.lang.String getQuantityString(int,int,java.lang.Object[]) -> getQuantityString
    java.lang.String getQuantityString(int,int) -> getQuantityString
    java.lang.CharSequence getText(int,java.lang.CharSequence) -> getText
    java.lang.CharSequence[] getTextArray(int) -> getTextArray
    java.lang.String[] getStringArray(int) -> getStringArray
    int[] getIntArray(int) -> getIntArray
    android.content.res.TypedArray obtainTypedArray(int) -> obtainTypedArray
    float getDimension(int) -> getDimension
    int getDimensionPixelOffset(int) -> getDimensionPixelOffset
    int getDimensionPixelSize(int) -> getDimensionPixelSize
    float getFraction(int,int,int) -> getFraction
    android.graphics.drawable.Drawable getDrawable(int) -> getDrawable
    android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme) -> getDrawable
    android.graphics.drawable.Drawable getDrawableForDensity(int,int) -> getDrawableForDensity
    android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme) -> getDrawableForDensity
    android.graphics.Movie getMovie(int) -> getMovie
    int getColor(int) -> getColor
    android.content.res.ColorStateList getColorStateList(int) -> getColorStateList
    boolean getBoolean(int) -> getBoolean
    int getInteger(int) -> getInteger
    android.content.res.XmlResourceParser getLayout(int) -> getLayout
    android.content.res.XmlResourceParser getAnimation(int) -> getAnimation
    android.content.res.XmlResourceParser getXml(int) -> getXml
    java.io.InputStream openRawResource(int) -> openRawResource
    java.io.InputStream openRawResource(int,android.util.TypedValue) -> openRawResource
    android.content.res.AssetFileDescriptor openRawResourceFd(int) -> openRawResourceFd
    void getValue(int,android.util.TypedValue,boolean) -> getValue
    void getValueForDensity(int,int,android.util.TypedValue,boolean) -> getValueForDensity
    void getValue(java.lang.String,android.util.TypedValue,boolean) -> getValue
    android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[]) -> obtainAttributes
    void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics) -> updateConfiguration
    android.util.DisplayMetrics getDisplayMetrics() -> getDisplayMetrics
    android.content.res.Configuration getConfiguration() -> getConfiguration
    int getIdentifier(java.lang.String,java.lang.String,java.lang.String) -> getIdentifier
    java.lang.String getResourceName(int) -> getResourceName
    java.lang.String getResourcePackageName(int) -> getResourcePackageName
    java.lang.String getResourceTypeName(int) -> getResourceTypeName
    java.lang.String getResourceEntryName(int) -> getResourceEntryName
    void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle) -> parseBundleExtras
    void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle) -> parseBundleExtra
android.support.v7.widget.RtlSpacingHelper -> android.support.v7.widget.ch:
    int mLeft -> a
    int mRight -> b
    int mStart -> c
    int mEnd -> d
    int mExplicitLeft -> e
    int mExplicitRight -> f
    boolean mIsRtl -> g
    boolean mIsRelative -> h
    void <init>() -> <init>
    int getLeft() -> a
    int getRight() -> b
    int getStart() -> c
    int getEnd() -> d
    void setRelative(int,int) -> a
    void setAbsolute(int,int) -> b
    void setDirection(boolean) -> a
android.support.v7.widget.ScrollingTabContainerView -> android.support.v7.widget.ci:
    java.lang.Runnable mTabSelector -> a
    android.support.v7.widget.ScrollingTabContainerView$TabClickListener mTabClickListener -> d
    android.support.v7.widget.LinearLayoutCompat mTabLayout -> e
    android.widget.Spinner mTabSpinner -> f
    boolean mAllowCollapse -> g
    int mMaxTabWidth -> b
    int mStackedTabMaxWidth -> c
    int mContentHeight -> h
    int mSelectedTabIndex -> i
    android.view.animation.Interpolator sAlphaInterpolator -> j
    void onMeasure(int,int) -> onMeasure
    boolean isCollapsed() -> a
    void setAllowCollapse(boolean) -> setAllowCollapse
    void performCollapse() -> b
    boolean performExpand() -> c
    void setTabSelected(int) -> setTabSelected
    void setContentHeight(int) -> setContentHeight
    android.widget.Spinner createSpinner() -> d
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void animateToTab(int) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.support.v7.widget.ScrollingTabContainerView$TabView createTabView(android.support.v7.app.ActionBar$Tab,boolean) -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    android.support.v7.widget.LinearLayoutCompat access$200(android.support.v7.widget.ScrollingTabContainerView) -> a
    android.support.v7.widget.ScrollingTabContainerView$TabView access$300(android.support.v7.widget.ScrollingTabContainerView,android.support.v7.app.ActionBar$Tab,boolean) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.ScrollingTabContainerView$1 -> android.support.v7.widget.cj:
    android.view.View val$tabView -> a
    android.support.v7.widget.ScrollingTabContainerView this$0 -> b
    void <init>(android.support.v7.widget.ScrollingTabContainerView,android.view.View) -> <init>
    void run() -> run
android.support.v7.widget.ScrollingTabContainerView$TabAdapter -> android.support.v7.widget.ck:
    android.support.v7.widget.ScrollingTabContainerView this$0 -> a
    void <init>(android.support.v7.widget.ScrollingTabContainerView) -> <init>
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void <init>(android.support.v7.widget.ScrollingTabContainerView,android.support.v7.widget.ScrollingTabContainerView$1) -> <init>
android.support.v7.widget.ScrollingTabContainerView$TabClickListener -> android.support.v7.widget.cl:
    android.support.v7.widget.ScrollingTabContainerView this$0 -> a
    void <init>(android.support.v7.widget.ScrollingTabContainerView) -> <init>
    void onClick(android.view.View) -> onClick
    void <init>(android.support.v7.widget.ScrollingTabContainerView,android.support.v7.widget.ScrollingTabContainerView$1) -> <init>
android.support.v7.widget.ScrollingTabContainerView$TabView -> android.support.v7.widget.cm:
    int[] BG_ATTRS -> b
    android.support.v7.app.ActionBar$Tab mTab -> c
    android.widget.TextView mTextView -> d
    android.widget.ImageView mIconView -> e
    android.view.View mCustomView -> f
    android.support.v7.widget.ScrollingTabContainerView this$0 -> a
    void <init>(android.support.v7.widget.ScrollingTabContainerView,android.content.Context,android.support.v7.app.ActionBar$Tab,boolean) -> <init>
    void bindTab(android.support.v7.app.ActionBar$Tab) -> a
    void setSelected(boolean) -> setSelected
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onMeasure(int,int) -> onMeasure
    void update() -> a
    boolean onLongClick(android.view.View) -> onLongClick
    android.support.v7.app.ActionBar$Tab getTab() -> b
android.support.v7.widget.SearchView -> android.support.v7.widget.SearchView:
    boolean IS_AT_LEAST_FROYO -> b
    android.support.v7.widget.SearchView$SearchAutoComplete mSearchSrcTextView -> c
    android.view.View mSearchEditFrame -> d
    android.view.View mSubmitArea -> e
    android.widget.ImageView mSearchButton -> f
    android.widget.ImageView mGoButton -> g
    android.widget.ImageView mCloseButton -> h
    android.widget.ImageView mVoiceButton -> i
    android.widget.ImageView mCollapsedIcon -> j
    android.graphics.drawable.Drawable mSearchHintIcon -> k
    int mSuggestionRowLayout -> l
    int mSuggestionCommitIconResId -> m
    android.content.Intent mVoiceWebSearchIntent -> n
    android.content.Intent mVoiceAppSearchIntent -> o
    java.lang.CharSequence mDefaultQueryHint -> p
    android.support.v7.widget.SearchView$OnQueryTextListener mOnQueryChangeListener -> q
    android.support.v7.widget.SearchView$OnCloseListener mOnCloseListener -> r
    android.view.View$OnFocusChangeListener mOnQueryTextFocusChangeListener -> s
    android.support.v7.widget.SearchView$OnSuggestionListener mOnSuggestionListener -> t
    android.view.View$OnClickListener mOnSearchClickListener -> u
    boolean mIconifiedByDefault -> v
    boolean mIconified -> w
    android.support.v4.widget.CursorAdapter mSuggestionsAdapter -> x
    boolean mSubmitButtonEnabled -> y
    java.lang.CharSequence mQueryHint -> z
    boolean mQueryRefinement -> A
    boolean mClearingFocus -> B
    int mMaxWidth -> C
    boolean mVoiceButtonEnabled -> D
    java.lang.CharSequence mUserQuery -> E
    boolean mExpandedInActionView -> F
    int mCollapsedImeOptions -> G
    android.app.SearchableInfo mSearchable -> H
    android.os.Bundle mAppSearchData -> I
    android.support.v7.widget.SearchView$AutoCompleteTextViewReflector HIDDEN_METHOD_INVOKER -> a
    java.lang.Runnable mShowImeRunnable -> J
    java.lang.Runnable mUpdateDrawableStateRunnable -> K
    java.lang.Runnable mReleaseCursorRunnable -> L
    java.util.WeakHashMap mOutsideDrawablesCache -> M
    int getSuggestionRowLayout() -> getSuggestionRowLayout
    int getSuggestionCommitIconResId() -> getSuggestionCommitIconResId
    void setSearchableInfo(android.app.SearchableInfo) -> setSearchableInfo
    void setAppSearchData(android.os.Bundle) -> setAppSearchData
    void setImeOptions(int) -> setImeOptions
    int getImeOptions() -> getImeOptions
    void setInputType(int) -> setInputType
    int getInputType() -> getInputType
    boolean requestFocus(int,android.graphics.Rect) -> requestFocus
    void clearFocus() -> clearFocus
    void setOnQueryTextListener(android.support.v7.widget.SearchView$OnQueryTextListener) -> setOnQueryTextListener
    void setOnCloseListener(android.support.v7.widget.SearchView$OnCloseListener) -> setOnCloseListener
    void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener) -> setOnQueryTextFocusChangeListener
    void setOnSuggestionListener(android.support.v7.widget.SearchView$OnSuggestionListener) -> setOnSuggestionListener
    void setOnSearchClickListener(android.view.View$OnClickListener) -> setOnSearchClickListener
    java.lang.CharSequence getQuery() -> getQuery
    void setQuery(java.lang.CharSequence,boolean) -> a
    void setQueryHint(java.lang.CharSequence) -> setQueryHint
    java.lang.CharSequence getQueryHint() -> getQueryHint
    void setIconifiedByDefault(boolean) -> setIconifiedByDefault
    void setIconified(boolean) -> setIconified
    boolean isIconified() -> c
    void setSubmitButtonEnabled(boolean) -> setSubmitButtonEnabled
    void setQueryRefinementEnabled(boolean) -> setQueryRefinementEnabled
    void setSuggestionsAdapter(android.support.v4.widget.CursorAdapter) -> setSuggestionsAdapter
    android.support.v4.widget.CursorAdapter getSuggestionsAdapter() -> getSuggestionsAdapter
    void setMaxWidth(int) -> setMaxWidth
    int getMaxWidth() -> getMaxWidth
    void onMeasure(int,int) -> onMeasure
    int getPreferredWidth() -> getPreferredWidth
    void updateViewsVisibility(boolean) -> a
    boolean hasVoiceSearch() -> e
    boolean isSubmitAreaEnabled() -> f
    void updateSubmitButton(boolean) -> b
    void updateSubmitArea() -> g
    void updateCloseButton() -> h
    void postUpdateFocusedState() -> i
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setImeVisibility(boolean) -> setImeVisibility
    void onQueryRefine(java.lang.CharSequence) -> a
    java.lang.CharSequence getDecoratedHint(java.lang.CharSequence) -> b
    void updateQueryHint() -> k
    void updateSearchAutoComplete() -> l
    void updateVoiceButton(boolean) -> c
    void onSubmitQuery() -> m
    void dismissSuggestions() -> n
    void onCloseClicked() -> o
    void onSearchClicked() -> p
    void onTextFocusChanged() -> d
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onActionViewCollapsed() -> b
    void onActionViewExpanded() -> a
    void setQuery(java.lang.CharSequence) -> setQuery
    void launchQuerySearch(int,java.lang.String,java.lang.String) -> a
    android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,int,java.lang.String) -> a
    void forceSuggestionQuery() -> q
    boolean isLandscapeMode(android.content.Context) -> a
    void access$2100(android.support.v7.widget.SearchView,boolean) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.SearchView$AutoCompleteTextViewReflector -> android.support.v7.widget.cn:
    java.lang.reflect.Method doBeforeTextChanged -> a
    java.lang.reflect.Method doAfterTextChanged -> b
    java.lang.reflect.Method ensureImeVisible -> c
    java.lang.reflect.Method showSoftInputUnchecked -> d
    void <init>() -> <init>
    void doBeforeTextChanged(android.widget.AutoCompleteTextView) -> a
    void doAfterTextChanged(android.widget.AutoCompleteTextView) -> b
    void ensureImeVisible(android.widget.AutoCompleteTextView,boolean) -> a
android.support.v7.widget.SearchView$OnCloseListener -> android.support.v7.widget.co:
    boolean onClose() -> a
android.support.v7.widget.SearchView$OnQueryTextListener -> android.support.v7.widget.cp:
    boolean onQueryTextSubmit(java.lang.String) -> a
android.support.v7.widget.SearchView$OnSuggestionListener -> android.support.v7.widget.cq:
android.support.v7.widget.SearchView$SearchAutoComplete -> android.support.v7.widget.SearchView$SearchAutoComplete:
    int mThreshold -> a
    android.support.v7.widget.SearchView mSearchView -> b
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setSearchView(android.support.v7.widget.SearchView) -> setSearchView
    void setThreshold(int) -> setThreshold
    void replaceText(java.lang.CharSequence) -> replaceText
    void performCompletion() -> performCompletion
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    boolean enoughToFilter() -> enoughToFilter
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
android.support.v7.widget.SuggestionsAdapter -> android.support.v7.widget.cr:
    android.app.SearchManager mSearchManager -> j
    android.support.v7.widget.SearchView mSearchView -> k
    android.app.SearchableInfo mSearchable -> l
    android.content.Context mProviderContext -> m
    java.util.WeakHashMap mOutsideDrawablesCache -> n
    int mCommitIconResId -> o
    boolean mClosed -> p
    int mQueryRefinement -> q
    android.content.res.ColorStateList mUrlColor -> r
    int mText1Col -> s
    int mText2Col -> t
    int mText2UrlCol -> u
    int mIconName1Col -> v
    int mIconName2Col -> w
    int mFlagsCol -> x
    void <init>(android.content.Context,android.support.v7.widget.SearchView,android.app.SearchableInfo,java.util.WeakHashMap) -> <init>
    void setQueryRefinement(int) -> a
    boolean hasStableIds() -> hasStableIds
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    void notifyDataSetInvalidated() -> notifyDataSetInvalidated
    void updateSpinnerState(android.database.Cursor) -> d
    void changeCursor(android.database.Cursor) -> a
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void onClick(android.view.View) -> onClick
    java.lang.CharSequence formatUrl(java.lang.CharSequence) -> b
    void setViewText(android.widget.TextView,java.lang.CharSequence) -> a
    android.graphics.drawable.Drawable getIcon1(android.database.Cursor) -> e
    android.graphics.drawable.Drawable getIcon2(android.database.Cursor) -> f
    void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String) -> a
    android.graphics.drawable.Drawable getDrawable(android.net.Uri) -> b
    android.graphics.drawable.Drawable checkIconCache(java.lang.String) -> b
    void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor) -> g
    android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName) -> a
    android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName) -> b
    java.lang.String getColumnString(android.database.Cursor,java.lang.String) -> a
    java.lang.String getStringOrNull(android.database.Cursor,int) -> a
    android.graphics.drawable.Drawable getDrawableFromResourceUri(android.net.Uri) -> a
    android.database.Cursor getSearchManagerSuggestions(android.app.SearchableInfo,java.lang.String,int) -> a
android.support.v7.widget.SuggestionsAdapter$ChildViewCache -> android.support.v7.widget.cs:
    android.widget.TextView mText1 -> a
    android.widget.TextView mText2 -> b
    android.widget.ImageView mIcon1 -> c
    android.widget.ImageView mIcon2 -> d
    android.widget.ImageView mIconRefine -> e
    void <init>(android.view.View) -> <init>
android.support.v7.widget.ThemeUtils -> android.support.v7.widget.ct:
    java.lang.ThreadLocal TL_TYPED_VALUE -> i
    int[] DISABLED_STATE_SET -> a
    int[] FOCUSED_STATE_SET -> b
    int[] ACTIVATED_STATE_SET -> c
    int[] PRESSED_STATE_SET -> d
    int[] CHECKED_STATE_SET -> e
    int[] SELECTED_STATE_SET -> f
    int[] NOT_PRESSED_OR_FOCUSED_STATE_SET -> g
    int[] EMPTY_STATE_SET -> h
    int[] TEMP_ARRAY -> j
    int getThemeAttrColor(android.content.Context,int) -> a
    android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int) -> b
    int getDisabledThemeAttrColor(android.content.Context,int) -> c
    android.util.TypedValue getTypedValue() -> a
    int getThemeAttrColor(android.content.Context,int,float) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.ThemedSpinnerAdapter -> android.support.v7.widget.cu:
    void setDropDownViewTheme(android.content.res.Resources$Theme) -> a
    android.content.res.Resources$Theme getDropDownViewTheme() -> a
android.support.v7.widget.TintContextWrapper -> android.support.v7.widget.cv:
    android.content.res.Resources mResources -> a
    android.content.Context wrap(android.content.Context) -> a
    void <init>(android.content.Context) -> <init>
    android.content.res.Resources getResources() -> getResources
android.support.v7.widget.TintContextWrapper$TintResources -> android.support.v7.widget.cw:
    android.support.v7.widget.TintManager mTintManager -> a
    void <init>(android.content.res.Resources,android.support.v7.widget.TintManager) -> <init>
    android.graphics.drawable.Drawable getDrawable(int) -> getDrawable
android.support.v7.widget.TintInfo -> android.support.v7.widget.cx:
    android.content.res.ColorStateList mTintList -> a
    android.graphics.PorterDuff$Mode mTintMode -> b
    boolean mHasTintMode -> c
    boolean mHasTintList -> d
    void <init>() -> <init>
android.support.v7.widget.TintManager -> android.support.v7.widget.cy:
    boolean SHOULD_BE_USED -> a
    android.graphics.PorterDuff$Mode DEFAULT_MODE -> b
    java.util.WeakHashMap INSTANCE_CACHE -> c
    android.support.v7.widget.TintManager$ColorFilterLruCache COLOR_FILTER_CACHE -> d
    int[] COLORFILTER_TINT_COLOR_CONTROL_NORMAL -> e
    int[] TINT_COLOR_CONTROL_NORMAL -> f
    int[] COLORFILTER_COLOR_CONTROL_ACTIVATED -> g
    int[] COLORFILTER_COLOR_BACKGROUND_MULTIPLY -> h
    int[] TINT_COLOR_CONTROL_STATE_LIST -> i
    int[] TINT_CHECKABLE_BUTTON_LIST -> j
    java.lang.ref.WeakReference mContextRef -> k
    android.util.SparseArray mTintLists -> l
    android.content.res.ColorStateList mDefaultColorStateList -> m
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> a
    android.support.v7.widget.TintManager get(android.content.Context) -> a
    void <init>(android.content.Context) -> <init>
    android.graphics.drawable.Drawable getDrawable(int) -> a
    android.graphics.drawable.Drawable getDrawable(int,boolean) -> a
    boolean tintDrawableUsingColorFilter(int,android.graphics.drawable.Drawable) -> a
    boolean arrayContains(int[],int) -> a
    boolean isInTintList(int) -> d
    android.graphics.PorterDuff$Mode getTintMode(int) -> b
    android.content.res.ColorStateList getTintList(int) -> c
    android.content.res.ColorStateList getDefaultColorStateList(android.content.Context) -> b
    android.content.res.ColorStateList createCheckableButtonColorStateList(android.content.Context) -> c
    android.content.res.ColorStateList createSwitchTrackColorStateList(android.content.Context) -> d
    android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context) -> e
    android.content.res.ColorStateList createEditTextColorStateList(android.content.Context) -> f
    android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context) -> g
    android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context) -> h
    android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int) -> b
    android.content.res.ColorStateList createSpinnerColorStateList(android.content.Context) -> i
    android.content.res.ColorStateList createSeekbarThumbColorStateList(android.content.Context) -> j
    void tintDrawable(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo,int[]) -> a
    boolean shouldMutateBackground(android.graphics.drawable.Drawable) -> a
    android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[]) -> a
    android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode) -> a
    void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode) -> a
    void <clinit>() -> <clinit>
android.support.v7.widget.TintManager$ColorFilterLruCache -> android.support.v7.widget.cz:
    void <init>(int) -> <init>
    android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode) -> a
    android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter) -> a
    int generateCacheKey(int,android.graphics.PorterDuff$Mode) -> b
android.support.v7.widget.TintTypedArray -> android.support.v7.widget.da:
    android.content.Context mContext -> a
    android.content.res.TypedArray mWrapped -> b
    android.support.v7.widget.TintManager mTintManager -> c
    android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[]) -> a
    android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int) -> a
    void <init>(android.content.Context,android.content.res.TypedArray) -> <init>
    android.graphics.drawable.Drawable getDrawable(int) -> a
    android.graphics.drawable.Drawable getDrawableIfKnown(int) -> b
    java.lang.CharSequence getText(int) -> c
    java.lang.String getString(int) -> d
    boolean getBoolean(int,boolean) -> a
    int getInt(int,int) -> a
    float getFloat(int,float) -> a
    int getColor(int,int) -> b
    int getInteger(int,int) -> c
    int getDimensionPixelOffset(int,int) -> d
    int getDimensionPixelSize(int,int) -> e
    int getLayoutDimension(int,int) -> f
    int getResourceId(int,int) -> g
    boolean hasValue(int) -> e
    void recycle() -> a
    android.support.v7.widget.TintManager getTintManager() -> b
android.support.v7.widget.Toolbar -> android.support.v7.widget.Toolbar:
    android.support.v7.widget.ActionMenuView mMenuView -> b
    android.widget.TextView mTitleTextView -> c
    android.widget.TextView mSubtitleTextView -> d
    android.widget.ImageButton mNavButtonView -> e
    android.widget.ImageView mLogoView -> f
    android.graphics.drawable.Drawable mCollapseIcon -> g
    java.lang.CharSequence mCollapseDescription -> h
    android.widget.ImageButton mCollapseButtonView -> i
    android.view.View mExpandedActionView -> a
    android.content.Context mPopupContext -> j
    int mPopupTheme -> k
    int mTitleTextAppearance -> l
    int mSubtitleTextAppearance -> m
    int mButtonGravity -> n
    int mMaxButtonHeight -> o
    int mTitleMarginStart -> p
    int mTitleMarginEnd -> q
    int mTitleMarginTop -> r
    int mTitleMarginBottom -> s
    android.support.v7.widget.RtlSpacingHelper mContentInsets -> t
    int mGravity -> u
    java.lang.CharSequence mTitleText -> v
    java.lang.CharSequence mSubtitleText -> w
    int mTitleTextColor -> x
    int mSubtitleTextColor -> y
    boolean mEatingTouch -> z
    boolean mEatingHover -> A
    java.util.ArrayList mTempViews -> B
    java.util.ArrayList mHiddenViews -> C
    int[] mTempMargins -> D
    android.support.v7.widget.Toolbar$OnMenuItemClickListener mOnMenuItemClickListener -> E
    android.support.v7.widget.ActionMenuView$OnMenuItemClickListener mMenuViewItemClickListener -> F
    android.support.v7.widget.ToolbarWidgetWrapper mWrapper -> G
    android.support.v7.widget.ActionMenuPresenter mOuterActionMenuPresenter -> H
    android.support.v7.widget.Toolbar$ExpandedActionViewMenuPresenter mExpandedMenuPresenter -> I
    android.support.v7.view.menu.MenuPresenter$Callback mActionMenuPresenterCallback -> J
    android.support.v7.view.menu.MenuBuilder$Callback mMenuBuilderCallback -> K
    boolean mCollapsible -> L
    java.lang.Runnable mShowOverflowMenuRunnable -> M
    android.support.v7.widget.TintManager mTintManager -> N
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void setPopupTheme(int) -> setPopupTheme
    int getPopupTheme() -> getPopupTheme
    void onRtlPropertiesChanged(int) -> onRtlPropertiesChanged
    void setLogo(int) -> setLogo
    boolean canShowOverflowMenu() -> a
    boolean isOverflowMenuShowing() -> b
    boolean isOverflowMenuShowPending() -> c
    boolean showOverflowMenu() -> d
    boolean hideOverflowMenu() -> e
    void setMenu(android.support.v7.view.menu.MenuBuilder,android.support.v7.widget.ActionMenuPresenter) -> a
    void dismissPopupMenus() -> f
    void setLogo(android.graphics.drawable.Drawable) -> setLogo
    android.graphics.drawable.Drawable getLogo() -> getLogo
    void setLogoDescription(int) -> setLogoDescription
    void setLogoDescription(java.lang.CharSequence) -> setLogoDescription
    java.lang.CharSequence getLogoDescription() -> getLogoDescription
    void ensureLogoView() -> l
    boolean hasExpandedActionView() -> g
    void collapseActionView() -> h
    java.lang.CharSequence getTitle() -> getTitle
    void setTitle(int) -> setTitle
    void setTitle(java.lang.CharSequence) -> setTitle
    java.lang.CharSequence getSubtitle() -> getSubtitle
    void setSubtitle(int) -> setSubtitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    void setTitleTextAppearance(android.content.Context,int) -> a
    void setSubtitleTextAppearance(android.content.Context,int) -> b
    void setTitleTextColor(int) -> setTitleTextColor
    void setSubtitleTextColor(int) -> setSubtitleTextColor
    java.lang.CharSequence getNavigationContentDescription() -> getNavigationContentDescription
    void setNavigationContentDescription(int) -> setNavigationContentDescription
    void setNavigationContentDescription(java.lang.CharSequence) -> setNavigationContentDescription
    void setNavigationIcon(int) -> setNavigationIcon
    void setNavigationIcon(android.graphics.drawable.Drawable) -> setNavigationIcon
    android.graphics.drawable.Drawable getNavigationIcon() -> getNavigationIcon
    void setNavigationOnClickListener(android.view.View$OnClickListener) -> setNavigationOnClickListener
    android.view.Menu getMenu() -> getMenu
    void setOverflowIcon(android.graphics.drawable.Drawable) -> setOverflowIcon
    android.graphics.drawable.Drawable getOverflowIcon() -> getOverflowIcon
    void ensureMenu() -> m
    void ensureMenuView() -> n
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    void setOnMenuItemClickListener(android.support.v7.widget.Toolbar$OnMenuItemClickListener) -> setOnMenuItemClickListener
    void setContentInsetsRelative(int,int) -> a
    int getContentInsetStart() -> getContentInsetStart
    int getContentInsetEnd() -> getContentInsetEnd
    int getContentInsetLeft() -> getContentInsetLeft
    int getContentInsetRight() -> getContentInsetRight
    void ensureNavButtonView() -> o
    void ensureCollapseButtonView() -> p
    void addSystemView(android.view.View,boolean) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void postShowOverflowMenu() -> q
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    void measureChildConstrained(android.view.View,int,int,int,int,int) -> a
    int measureChildCollapseMargins(android.view.View,int,int,int,int,int[]) -> a
    boolean shouldCollapse() -> r
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getViewListMeasuredWidth(java.util.List,int[]) -> a
    int layoutChildLeft(android.view.View,int,int[],int) -> a
    int layoutChildRight(android.view.View,int,int[],int) -> b
    int getChildTop(android.view.View,int) -> a
    int getChildVerticalGravity(int) -> a
    void addCustomViewsWithGravity(java.util.List,int) -> a
    int getChildHorizontalGravity(int) -> b
    boolean shouldLayout(android.view.View) -> a
    int getHorizontalMargins(android.view.View) -> b
    int getVerticalMargins(android.view.View) -> c
    android.support.v7.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet) -> a
    android.support.v7.widget.Toolbar$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> a
    android.support.v7.widget.Toolbar$LayoutParams generateDefaultLayoutParams() -> i
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.support.v7.widget.DecorToolbar getWrapper() -> getWrapper
    void removeChildrenForExpandedActionView() -> j
    void addChildrenForExpandedActionView() -> k
    boolean isChildOrHidden(android.view.View) -> d
    void setCollapsible(boolean) -> setCollapsible
    void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter$Callback,android.support.v7.view.menu.MenuBuilder$Callback) -> a
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.support.v7.widget.Toolbar$OnMenuItemClickListener access$000(android.support.v7.widget.Toolbar) -> a
    void access$200(android.support.v7.widget.Toolbar) -> b
    android.widget.ImageButton access$300(android.support.v7.widget.Toolbar) -> c
    int access$400(android.support.v7.widget.Toolbar) -> d
android.support.v7.widget.Toolbar$1 -> android.support.v7.widget.db:
    android.support.v7.widget.Toolbar this$0 -> a
    void <init>(android.support.v7.widget.Toolbar) -> <init>
    boolean onMenuItemClick(android.view.MenuItem) -> a
android.support.v7.widget.Toolbar$2 -> android.support.v7.widget.dc:
    android.support.v7.widget.Toolbar this$0 -> a
    void <init>(android.support.v7.widget.Toolbar) -> <init>
    void run() -> run
android.support.v7.widget.Toolbar$3 -> android.support.v7.widget.dd:
    android.support.v7.widget.Toolbar this$0 -> a
    void <init>(android.support.v7.widget.Toolbar) -> <init>
    void onClick(android.view.View) -> onClick
android.support.v7.widget.Toolbar$ExpandedActionViewMenuPresenter -> android.support.v7.widget.de:
    android.support.v7.view.menu.MenuBuilder mMenu -> a
    android.support.v7.view.menu.MenuItemImpl mCurrentExpandedItem -> b
    android.support.v7.widget.Toolbar this$0 -> c
    void <init>(android.support.v7.widget.Toolbar) -> <init>
    void initForMenu(android.content.Context,android.support.v7.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> b
    boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder,android.support.v7.view.menu.MenuItemImpl) -> b
    void <init>(android.support.v7.widget.Toolbar,android.support.v7.widget.Toolbar$1) -> <init>
android.support.v7.widget.Toolbar$LayoutParams -> android.support.v7.widget.df:
    int mViewType -> b
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(int,int) -> <init>
    void <init>(android.support.v7.widget.Toolbar$LayoutParams) -> <init>
    void <init>(android.support.v7.app.ActionBar$LayoutParams) -> <init>
    void <init>(android.view.ViewGroup$MarginLayoutParams) -> <init>
    void <init>(android.view.ViewGroup$LayoutParams) -> <init>
    void copyMarginsFromCompat(android.view.ViewGroup$MarginLayoutParams) -> a
android.support.v7.widget.Toolbar$OnMenuItemClickListener -> android.support.v7.widget.dg:
    boolean onMenuItemClick(android.view.MenuItem) -> a
android.support.v7.widget.Toolbar$SavedState -> android.support.v7.widget.dh:
    int expandedMenuItemId -> a
    boolean isOverflowOpen -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.os.Parcel) -> <init>
    void <init>(android.os.Parcelable) -> <init>
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
android.support.v7.widget.Toolbar$SavedState$1 -> android.support.v7.widget.di:
    void <init>() -> <init>
    android.support.v7.widget.Toolbar$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.widget.Toolbar$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.widget.ToolbarWidgetWrapper -> android.support.v7.widget.dj:
    android.support.v7.widget.Toolbar mToolbar -> a
    int mDisplayOpts -> b
    android.view.View mTabView -> c
    android.view.View mCustomView -> d
    android.graphics.drawable.Drawable mIcon -> e
    android.graphics.drawable.Drawable mLogo -> f
    android.graphics.drawable.Drawable mNavIcon -> g
    boolean mTitleSet -> h
    java.lang.CharSequence mTitle -> i
    java.lang.CharSequence mSubtitle -> j
    java.lang.CharSequence mHomeDescription -> k
    android.view.Window$Callback mWindowCallback -> l
    boolean mMenuPrepared -> m
    android.support.v7.widget.ActionMenuPresenter mActionMenuPresenter -> n
    int mNavigationMode -> o
    android.support.v7.widget.TintManager mTintManager -> p
    int mDefaultNavigationContentDescription -> q
    android.graphics.drawable.Drawable mDefaultNavigationIcon -> r
    void <init>(android.support.v7.widget.Toolbar,boolean) -> <init>
    void <init>(android.support.v7.widget.Toolbar,boolean,int,int) -> <init>
    void setDefaultNavigationContentDescription(int) -> d
    void setDefaultNavigationIcon(android.graphics.drawable.Drawable) -> b
    int detectDisplayOptions() -> r
    android.view.ViewGroup getViewGroup() -> a
    android.content.Context getContext() -> b
    boolean hasExpandedActionView() -> c
    void collapseActionView() -> d
    void setWindowCallback(android.view.Window$Callback) -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    java.lang.CharSequence getTitle() -> e
    void setTitle(java.lang.CharSequence) -> b
    void setTitleInt(java.lang.CharSequence) -> e
    void setSubtitle(java.lang.CharSequence) -> c
    void initProgress() -> f
    void initIndeterminateProgress() -> g
    void setIcon(int) -> a
    void setIcon(android.graphics.drawable.Drawable) -> a
    void setLogo(int) -> b
    void setLogo(android.graphics.drawable.Drawable) -> c
    void updateToolbarLogo() -> s
    boolean canShowOverflowMenu() -> h
    boolean isOverflowMenuShowing() -> i
    boolean isOverflowMenuShowPending() -> j
    boolean showOverflowMenu() -> k
    boolean hideOverflowMenu() -> l
    void setMenuPrepared() -> m
    void setMenu(android.view.Menu,android.support.v7.view.menu.MenuPresenter$Callback) -> a
    void dismissPopupMenus() -> n
    int getDisplayOptions() -> o
    void setDisplayOptions(int) -> c
    void setEmbeddedTabView(android.support.v7.widget.ScrollingTabContainerView) -> a
    void setCollapsible(boolean) -> a
    void setHomeButtonEnabled(boolean) -> b
    int getNavigationMode() -> p
    void setCustomView(android.view.View) -> a
    android.support.v4.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long) -> a
    void setNavigationIcon(android.graphics.drawable.Drawable) -> d
    void setNavigationContentDescription(java.lang.CharSequence) -> d
    void setNavigationContentDescription(int) -> e
    void updateHomeAccessibility() -> t
    void updateNavigationIcon() -> u
    void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter$Callback,android.support.v7.view.menu.MenuBuilder$Callback) -> a
    android.view.Menu getMenu() -> q
    android.support.v7.widget.Toolbar access$000(android.support.v7.widget.ToolbarWidgetWrapper) -> a
    java.lang.CharSequence access$100(android.support.v7.widget.ToolbarWidgetWrapper) -> b
    android.view.Window$Callback access$200(android.support.v7.widget.ToolbarWidgetWrapper) -> c
    boolean access$300(android.support.v7.widget.ToolbarWidgetWrapper) -> d
android.support.v7.widget.ToolbarWidgetWrapper$1 -> android.support.v7.widget.dk:
    android.support.v7.view.menu.ActionMenuItem mNavItem -> a
    android.support.v7.widget.ToolbarWidgetWrapper this$0 -> b
    void <init>(android.support.v7.widget.ToolbarWidgetWrapper) -> <init>
    void onClick(android.view.View) -> onClick
android.support.v7.widget.ToolbarWidgetWrapper$2 -> android.support.v7.widget.dl:
    boolean mCanceled -> c
    int val$visibility -> a
    android.support.v7.widget.ToolbarWidgetWrapper this$0 -> b
    void <init>(android.support.v7.widget.ToolbarWidgetWrapper,int) -> <init>
    void onAnimationStart(android.view.View) -> a
    void onAnimationEnd(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
android.support.v7.widget.ViewStubCompat -> android.support.v7.widget.ViewStubCompat:
    int mLayoutResource -> a
    int mInflatedId -> b
    java.lang.ref.WeakReference mInflatedViewRef -> c
    android.view.LayoutInflater mInflater -> d
    android.support.v7.widget.ViewStubCompat$OnInflateListener mInflateListener -> e
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    int getInflatedId() -> getInflatedId
    void setInflatedId(int) -> setInflatedId
    int getLayoutResource() -> getLayoutResource
    void setLayoutResource(int) -> setLayoutResource
    void setLayoutInflater(android.view.LayoutInflater) -> setLayoutInflater
    android.view.LayoutInflater getLayoutInflater() -> getLayoutInflater
    void onMeasure(int,int) -> onMeasure
    void draw(android.graphics.Canvas) -> draw
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void setVisibility(int) -> setVisibility
    android.view.View inflate() -> a
    void setOnInflateListener(android.support.v7.widget.ViewStubCompat$OnInflateListener) -> setOnInflateListener
android.support.v7.widget.ViewStubCompat$OnInflateListener -> android.support.v7.widget.dm:
    void onInflate(android.support.v7.widget.ViewStubCompat,android.view.View) -> a
android.support.v7.widget.ViewUtils -> android.support.v7.widget.dn:
    java.lang.reflect.Method sComputeFitSystemWindowsMethod -> a
    boolean isLayoutRtl(android.view.View) -> a
    int combineMeasuredStates(int,int) -> a
    void computeFitSystemWindows(android.view.View,android.graphics.Rect,android.graphics.Rect) -> a
    void makeOptionalFitsSystemWindows(android.view.View) -> b
    void <clinit>() -> <clinit>
com.google.gson.DefaultDateTypeAdapter -> com.a.a.a:
    java.text.DateFormat enUsFormat -> a
    java.text.DateFormat localFormat -> b
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(int,int) -> <init>
    void <init>(java.text.DateFormat,java.text.DateFormat) -> <init>
    com.google.gson.JsonElement serialize(java.util.Date,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    java.util.Date deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    java.util.Date deserializeToDate(com.google.gson.JsonElement) -> a
    java.lang.String toString() -> toString
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
com.google.gson.ExclusionStrategy -> com.a.a.b:
    boolean shouldSkipField(com.google.gson.FieldAttributes) -> a
    boolean shouldSkipClass(java.lang.Class) -> a
com.google.gson.FieldAttributes -> com.a.a.c:
    java.lang.reflect.Field field -> a
    void <init>(java.lang.reflect.Field) -> <init>
com.google.gson.FieldNamingPolicy -> com.a.a.d:
    com.google.gson.FieldNamingPolicy IDENTITY -> a
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE -> b
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES -> c
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES -> d
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES -> e
    com.google.gson.FieldNamingPolicy[] $VALUES -> f
    com.google.gson.FieldNamingPolicy[] values() -> values
    com.google.gson.FieldNamingPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String separateCamelCase(java.lang.String,java.lang.String) -> a
    java.lang.String upperCaseFirstLetter(java.lang.String) -> a
    java.lang.String modifyString(char,java.lang.String,int) -> a
    void <init>(java.lang.String,int,com.google.gson.FieldNamingPolicy$1) -> <init>
    void <clinit>() -> <clinit>
com.google.gson.FieldNamingPolicy$1 -> com.a.a.e:
    void <init>(java.lang.String,int) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$2 -> com.a.a.f:
    void <init>(java.lang.String,int) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$3 -> com.a.a.g:
    void <init>(java.lang.String,int) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$4 -> com.a.a.h:
    void <init>(java.lang.String,int) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$5 -> com.a.a.i:
    void <init>(java.lang.String,int) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingStrategy -> com.a.a.j:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.Gson -> com.a.a.k:
    com.google.gson.reflect.TypeToken NULL_KEY_SURROGATE -> a
    java.lang.ThreadLocal calls -> b
    java.util.Map typeTokenCache -> c
    java.util.List factories -> d
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> e
    com.google.gson.internal.Excluder excluder -> f
    com.google.gson.FieldNamingStrategy fieldNamingStrategy -> g
    boolean serializeNulls -> h
    boolean htmlSafe -> i
    boolean generateNonExecutableJson -> j
    boolean prettyPrinting -> k
    boolean lenient -> l
    com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory -> m
    void <init>() -> <init>
    void <init>(com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,boolean,com.google.gson.LongSerializationPolicy,java.util.List) -> <init>
    com.google.gson.TypeAdapter doubleAdapter(boolean) -> a
    com.google.gson.TypeAdapter floatAdapter(boolean) -> b
    void checkValidFloatingPoint(double) -> a
    com.google.gson.TypeAdapter longAdapter(com.google.gson.LongSerializationPolicy) -> a
    com.google.gson.TypeAdapter atomicLongAdapter(com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapter atomicLongArrayAdapter(com.google.gson.TypeAdapter) -> b
    com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getAdapter(java.lang.Class) -> a
    java.lang.String toJson(java.lang.Object) -> a
    java.lang.String toJson(java.lang.Object,java.lang.reflect.Type) -> a
    void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable) -> a
    void toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter) -> a
    java.lang.String toJson(com.google.gson.JsonElement) -> a
    void toJson(com.google.gson.JsonElement,java.lang.Appendable) -> a
    com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer) -> a
    com.google.gson.stream.JsonReader newJsonReader(java.io.Reader) -> a
    void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type) -> a
    java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type) -> a
    void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader) -> a
    java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type) -> a
    java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class) -> a
    java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type) -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.gson.Gson$1 -> com.a.a.l:
    void <init>() -> <init>
com.google.gson.Gson$2 -> com.a.a.m:
    com.google.gson.Gson this$0 -> a
    void <init>(com.google.gson.Gson) -> <init>
    java.lang.Double read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$3 -> com.a.a.n:
    com.google.gson.Gson this$0 -> a
    void <init>(com.google.gson.Gson) -> <init>
    java.lang.Float read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$4 -> com.a.a.o:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$5 -> com.a.a.p:
    com.google.gson.TypeAdapter val$longAdapter -> a
    void <init>(com.google.gson.TypeAdapter) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicLong) -> a
    java.util.concurrent.atomic.AtomicLong read(com.google.gson.stream.JsonReader) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$6 -> com.a.a.q:
    com.google.gson.TypeAdapter val$longAdapter -> a
    void <init>(com.google.gson.TypeAdapter) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicLongArray) -> a
    java.util.concurrent.atomic.AtomicLongArray read(com.google.gson.stream.JsonReader) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$FutureTypeAdapter -> com.a.a.r:
    com.google.gson.TypeAdapter delegate -> a
    void <init>() -> <init>
    void setDelegate(com.google.gson.TypeAdapter) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.GsonBuilder -> com.a.a.s:
    com.google.gson.internal.Excluder excluder -> a
    com.google.gson.LongSerializationPolicy longSerializationPolicy -> b
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> c
    java.util.Map instanceCreators -> d
    java.util.List factories -> e
    java.util.List hierarchyFactories -> f
    boolean serializeNulls -> g
    java.lang.String datePattern -> h
    int dateStyle -> i
    int timeStyle -> j
    boolean complexMapKeySerialization -> k
    boolean serializeSpecialFloatingPointValues -> l
    boolean escapeHtmlChars -> m
    boolean prettyPrinting -> n
    boolean generateNonExecutableJson -> o
    boolean lenient -> p
    void <init>() -> <init>
    com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type,java.lang.Object) -> a
    com.google.gson.Gson create() -> a
    void addTypeAdaptersForDate(java.lang.String,int,int,java.util.List) -> a
com.google.gson.InstanceCreator -> com.a.a.t:
    java.lang.Object createInstance(java.lang.reflect.Type) -> a
com.google.gson.JsonArray -> com.a.a.u:
    java.util.List elements -> a
    void <init>() -> <init>
    void add(com.google.gson.JsonElement) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean getAsBoolean() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonDeserializationContext -> com.a.a.v:
com.google.gson.JsonDeserializer -> com.a.a.w:
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
com.google.gson.JsonElement -> com.a.a.x:
    void <init>() -> <init>
    boolean isJsonArray() -> g
    boolean isJsonObject() -> h
    boolean isJsonPrimitive() -> i
    boolean isJsonNull() -> j
    com.google.gson.JsonObject getAsJsonObject() -> k
    com.google.gson.JsonArray getAsJsonArray() -> l
    com.google.gson.JsonPrimitive getAsJsonPrimitive() -> m
    boolean getAsBoolean() -> f
    java.lang.Boolean getAsBooleanWrapper() -> n
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    java.lang.String toString() -> toString
com.google.gson.JsonIOException -> com.a.a.y:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.gson.JsonNull -> com.a.a.z:
    com.google.gson.JsonNull INSTANCE -> a
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.google.gson.JsonObject -> com.a.a.aa:
    com.google.gson.internal.LinkedTreeMap members -> a
    void <init>() -> <init>
    void add(java.lang.String,com.google.gson.JsonElement) -> a
    void addProperty(java.lang.String,java.lang.String) -> a
    void addProperty(java.lang.String,java.lang.Number) -> a
    com.google.gson.JsonElement createJsonElement(java.lang.Object) -> a
    java.util.Set entrySet() -> o
    com.google.gson.JsonElement get(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonParseException -> com.a.a.ab:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.gson.JsonPrimitive -> com.a.a.ac:
    java.lang.Class[] PRIMITIVE_TYPES -> a
    java.lang.Object value -> b
    void <init>(java.lang.Boolean) -> <init>
    void <init>(java.lang.Number) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Object) -> <init>
    void setValue(java.lang.Object) -> a
    boolean isBoolean() -> o
    java.lang.Boolean getAsBooleanWrapper() -> n
    boolean getAsBoolean() -> f
    boolean isNumber() -> p
    java.lang.Number getAsNumber() -> a
    boolean isString() -> q
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean isPrimitiveOrString(java.lang.Object) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isIntegral(com.google.gson.JsonPrimitive) -> a
    void <clinit>() -> <clinit>
com.google.gson.JsonSerializationContext -> com.a.a.ad:
com.google.gson.JsonSerializer -> com.a.a.ae:
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
com.google.gson.JsonSyntaxException -> com.a.a.af:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.gson.LongSerializationPolicy -> com.a.a.ag:
    com.google.gson.LongSerializationPolicy DEFAULT -> a
    com.google.gson.LongSerializationPolicy STRING -> b
    com.google.gson.LongSerializationPolicy[] $VALUES -> c
    com.google.gson.LongSerializationPolicy[] values() -> values
    com.google.gson.LongSerializationPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.gson.LongSerializationPolicy$1) -> <init>
    void <clinit>() -> <clinit>
com.google.gson.LongSerializationPolicy$1 -> com.a.a.ah:
    void <init>(java.lang.String,int) -> <init>
com.google.gson.LongSerializationPolicy$2 -> com.a.a.ai:
    void <init>(java.lang.String,int) -> <init>
com.google.gson.TypeAdapter -> com.a.a.aj:
    void <init>() -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter nullSafe() -> a
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.TypeAdapter$1 -> com.a.a.ak:
    com.google.gson.TypeAdapter this$0 -> a
    void <init>(com.google.gson.TypeAdapter) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.TypeAdapterFactory -> com.a.a.al:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.annotations.Expose -> com.a.a.a.a:
    boolean serialize() -> a
    boolean deserialize() -> b
com.google.gson.annotations.JsonAdapter -> com.a.a.a.b:
    java.lang.Class value() -> a
com.google.gson.annotations.SerializedName -> com.a.a.a.c:
    java.lang.String value() -> a
    java.lang.String[] alternate() -> b
com.google.gson.annotations.Since -> com.a.a.a.d:
    double value() -> a
com.google.gson.annotations.Until -> com.a.a.a.e:
    double value() -> a
com.google.gson.internal.$Gson$Preconditions -> com.a.a.b.a:
    java.lang.Object checkNotNull(java.lang.Object) -> a
    void checkArgument(boolean) -> a
com.google.gson.internal.$Gson$Types -> com.a.a.b.b:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> a
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> a
    java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type) -> a
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> b
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> c
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> d
    java.lang.Class getRawType(java.lang.reflect.Type) -> e
    boolean equal(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> a
    int hashCodeOrZero(java.lang.Object) -> a
    java.lang.String typeToString(java.lang.reflect.Type) -> f
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> a
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> b
    java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type) -> g
    java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> a
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> a
    int indexOf(java.lang.Object[],java.lang.Object) -> a
    java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable) -> a
    void checkNotPrimitive(java.lang.reflect.Type) -> h
    void <clinit>() -> <clinit>
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl -> com.a.a.b.c:
    java.lang.reflect.Type componentType -> a
    void <init>(java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl -> com.a.a.b.d:
    java.lang.reflect.Type ownerType -> a
    java.lang.reflect.Type rawType -> b
    java.lang.reflect.Type[] typeArguments -> c
    void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$WildcardTypeImpl -> com.a.a.b.e:
    java.lang.reflect.Type upperBound -> a
    java.lang.reflect.Type lowerBound -> b
    void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor -> com.a.a.b.f:
    java.util.Map instanceCreators -> a
    void <init>(java.util.Map) -> <init>
    com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newDefaultImplementationConstructor(java.lang.reflect.Type,java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newUnsafeAllocator(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor$1 -> com.a.a.b.g:
    com.google.gson.InstanceCreator val$typeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    void <init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.InstanceCreator,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$10 -> com.a.a.b.h:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$11 -> com.a.a.b.i:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$12 -> com.a.a.b.j:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$13 -> com.a.a.b.k:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$14 -> com.a.a.b.l:
    com.google.gson.internal.UnsafeAllocator unsafeAllocator -> d
    java.lang.Class val$rawType -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    void <init>(com.google.gson.internal.ConstructorConstructor,java.lang.Class,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$2 -> com.a.a.b.m:
    com.google.gson.InstanceCreator val$rawTypeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    void <init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.InstanceCreator,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$3 -> com.a.a.b.n:
    java.lang.reflect.Constructor val$constructor -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    void <init>(com.google.gson.internal.ConstructorConstructor,java.lang.reflect.Constructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$4 -> com.a.a.b.o:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$5 -> com.a.a.b.p:
    java.lang.reflect.Type val$type -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    void <init>(com.google.gson.internal.ConstructorConstructor,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$6 -> com.a.a.b.q:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$7 -> com.a.a.b.r:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$8 -> com.a.a.b.s:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$9 -> com.a.a.b.t:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.Excluder -> com.a.a.b.u:
    com.google.gson.internal.Excluder DEFAULT -> a
    double version -> b
    int modifiers -> c
    boolean serializeInnerClasses -> d
    boolean requireExpose -> e
    java.util.List serializationStrategies -> f
    java.util.List deserializationStrategies -> g
    void <init>() -> <init>
    com.google.gson.internal.Excluder clone() -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    boolean excludeClass(java.lang.Class,boolean) -> a
    boolean isAnonymousOrLocal(java.lang.Class) -> a
    boolean isInnerClass(java.lang.Class) -> b
    boolean isStatic(java.lang.Class) -> c
    boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until) -> a
    boolean isValidSince(com.google.gson.annotations.Since) -> a
    boolean isValidUntil(com.google.gson.annotations.Until) -> a
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
com.google.gson.internal.Excluder$1 -> com.a.a.b.v:
    com.google.gson.TypeAdapter delegate -> f
    boolean val$skipDeserialize -> a
    boolean val$skipSerialize -> b
    com.google.gson.Gson val$gson -> c
    com.google.gson.reflect.TypeToken val$type -> d
    com.google.gson.internal.Excluder this$0 -> e
    void <init>(com.google.gson.internal.Excluder,boolean,boolean,com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> b
com.google.gson.internal.JsonReaderInternalAccess -> com.a.a.b.w:
    com.google.gson.internal.JsonReaderInternalAccess INSTANCE -> a
    void <init>() -> <init>
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.internal.LazilyParsedNumber -> com.a.a.b.x:
    java.lang.String value -> a
    void <init>(java.lang.String) -> <init>
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.gson.internal.LinkedTreeMap -> com.a.a.b.y:
    java.util.Comparator NATURAL_ORDER -> g
    java.util.Comparator comparator -> a
    com.google.gson.internal.LinkedTreeMap$Node root -> b
    int size -> c
    int modCount -> d
    com.google.gson.internal.LinkedTreeMap$Node header -> e
    com.google.gson.internal.LinkedTreeMap$EntrySet entrySet -> h
    com.google.gson.internal.LinkedTreeMap$KeySet keySet -> i
    boolean $assertionsDisabled -> f
    void <init>() -> <init>
    void <init>(java.util.Comparator) -> <init>
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    com.google.gson.internal.LinkedTreeMap$Node find(java.lang.Object,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node findByObject(java.lang.Object) -> a
    com.google.gson.internal.LinkedTreeMap$Node findByEntry(java.util.Map$Entry) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    void removeInternal(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node removeInternalByKey(java.lang.Object) -> b
    void replaceInParent(com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> b
    void rotateLeft(com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rotateRight(com.google.gson.internal.LinkedTreeMap$Node) -> b
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    void <clinit>() -> <clinit>
com.google.gson.internal.LinkedTreeMap$1 -> com.a.a.b.z:
    void <init>() -> <init>
    int compare(java.lang.Comparable,java.lang.Comparable) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.gson.internal.LinkedTreeMap$EntrySet -> com.a.a.b.aa:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap) -> <init>
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$EntrySet$1 -> com.a.a.b.ab:
    com.google.gson.internal.LinkedTreeMap$EntrySet this$1 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap$EntrySet) -> <init>
    java.util.Map$Entry next() -> a
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$KeySet -> com.a.a.b.ac:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap) -> <init>
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$KeySet$1 -> com.a.a.b.ad:
    com.google.gson.internal.LinkedTreeMap$KeySet this$1 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap$KeySet) -> <init>
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator -> com.a.a.b.ae:
    com.google.gson.internal.LinkedTreeMap$Node next -> b
    com.google.gson.internal.LinkedTreeMap$Node lastReturned -> c
    int expectedModCount -> d
    com.google.gson.internal.LinkedTreeMap this$0 -> e
    void <init>(com.google.gson.internal.LinkedTreeMap) -> <init>
    boolean hasNext() -> hasNext
    com.google.gson.internal.LinkedTreeMap$Node nextNode() -> b
    void remove() -> remove
com.google.gson.internal.LinkedTreeMap$Node -> com.a.a.b.af:
    com.google.gson.internal.LinkedTreeMap$Node parent -> a
    com.google.gson.internal.LinkedTreeMap$Node left -> b
    com.google.gson.internal.LinkedTreeMap$Node right -> c
    com.google.gson.internal.LinkedTreeMap$Node next -> d
    com.google.gson.internal.LinkedTreeMap$Node prev -> e
    java.lang.Object key -> f
    java.lang.Object value -> g
    int height -> h
    void <init>() -> <init>
    void <init>(com.google.gson.internal.LinkedTreeMap$Node,java.lang.Object,com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.gson.internal.LinkedTreeMap$Node first() -> a
    com.google.gson.internal.LinkedTreeMap$Node last() -> b
com.google.gson.internal.ObjectConstructor -> com.a.a.b.ag:
    java.lang.Object construct() -> a
com.google.gson.internal.Primitives -> com.a.a.b.ah:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> a
    boolean isPrimitive(java.lang.reflect.Type) -> a
    java.lang.Class wrap(java.lang.Class) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.Streams -> com.a.a.b.ai:
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
    java.io.Writer writerForAppendable(java.lang.Appendable) -> a
com.google.gson.internal.Streams$AppendableWriter -> com.a.a.b.aj:
    java.lang.Appendable appendable -> a
    com.google.gson.internal.Streams$AppendableWriter$CurrentWrite currentWrite -> b
    void <init>(java.lang.Appendable) -> <init>
    void write(char[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite -> com.a.a.b.ak:
    char[] chars -> a
    void <init>() -> <init>
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
com.google.gson.internal.UnsafeAllocator -> com.a.a.b.al:
    void <init>() -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
    com.google.gson.internal.UnsafeAllocator create() -> a
    void assertInstantiable(java.lang.Class) -> c
    void access$000(java.lang.Class) -> b
com.google.gson.internal.UnsafeAllocator$1 -> com.a.a.b.am:
    java.lang.reflect.Method val$allocateInstance -> a
    java.lang.Object val$unsafe -> b
    void <init>(java.lang.reflect.Method,java.lang.Object) -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$2 -> com.a.a.b.an:
    java.lang.reflect.Method val$newInstance -> a
    int val$constructorId -> b
    void <init>(java.lang.reflect.Method,int) -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$3 -> com.a.a.b.ao:
    java.lang.reflect.Method val$newInstance -> a
    void <init>(java.lang.reflect.Method) -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$4 -> com.a.a.b.ap:
    void <init>() -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.bind.ArrayTypeAdapter -> com.a.a.b.a.a:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.lang.Class componentType -> b
    com.google.gson.TypeAdapter componentTypeAdapter -> c
    void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter,java.lang.Class) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.ArrayTypeAdapter$1 -> com.a.a.b.a.b:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory -> com.a.a.b.a.c:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter -> com.a.a.b.a.d:
    com.google.gson.TypeAdapter elementTypeAdapter -> a
    com.google.gson.internal.ObjectConstructor constructor -> b
    void <init>(com.google.gson.Gson,java.lang.reflect.Type,com.google.gson.TypeAdapter,com.google.gson.internal.ObjectConstructor) -> <init>
    java.util.Collection read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Collection) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter -> com.a.a.b.a.e:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat enUsFormat -> b
    java.text.DateFormat localFormat -> c
    void <init>() -> <init>
    java.util.Date read(com.google.gson.stream.JsonReader) -> a
    java.util.Date deserializeToDate(java.lang.String) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.DateTypeAdapter$1 -> com.a.a.b.a.f:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory -> com.a.a.b.a.g:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getTypeAdapter(com.google.gson.internal.ConstructorConstructor,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.annotations.JsonAdapter) -> a
com.google.gson.internal.bind.JsonTreeReader -> com.a.a.b.a.h:
    java.io.Reader UNREADABLE_READER -> b
    java.lang.Object SENTINEL_CLOSED -> c
    java.lang.Object[] stack -> d
    int stackSize -> e
    java.lang.String[] pathNames -> f
    int[] pathIndices -> g
    void <init>(com.google.gson.JsonElement) -> <init>
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    java.lang.Object peekStack() -> s
    java.lang.Object popStack() -> t
    void expect(com.google.gson.stream.JsonToken) -> a
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    java.lang.String toString() -> toString
    void promoteNameToValue() -> o
    void push(java.lang.Object) -> a
    java.lang.String getPath() -> p
    java.lang.String locationString() -> u
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.JsonTreeReader$1 -> com.a.a.b.a.i:
    void <init>() -> <init>
    int read(char[],int,int) -> read
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter -> com.a.a.b.a.j:
    java.io.Writer UNWRITABLE_WRITER -> a
    com.google.gson.JsonPrimitive SENTINEL_CLOSED -> b
    java.util.List stack -> c
    java.lang.String pendingName -> d
    com.google.gson.JsonElement product -> e
    void <init>() -> <init>
    com.google.gson.JsonElement get() -> a
    com.google.gson.JsonElement peek() -> j
    void put(com.google.gson.JsonElement) -> a
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.JsonTreeWriter$1 -> com.a.a.b.a.k:
    void <init>() -> <init>
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.MapTypeAdapterFactory -> com.a.a.b.a.l:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> b
    boolean complexMapKeySerialization -> a
    void <init>(com.google.gson.internal.ConstructorConstructor,boolean) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getKeyAdapter(com.google.gson.Gson,java.lang.reflect.Type) -> a
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter -> com.a.a.b.a.m:
    com.google.gson.TypeAdapter keyTypeAdapter -> b
    com.google.gson.TypeAdapter valueTypeAdapter -> c
    com.google.gson.internal.ObjectConstructor constructor -> d
    com.google.gson.internal.bind.MapTypeAdapterFactory this$0 -> a
    void <init>(com.google.gson.internal.bind.MapTypeAdapterFactory,com.google.gson.Gson,java.lang.reflect.Type,com.google.gson.TypeAdapter,java.lang.reflect.Type,com.google.gson.TypeAdapter,com.google.gson.internal.ObjectConstructor) -> <init>
    java.util.Map read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Map) -> a
    java.lang.String keyToString(com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter -> com.a.a.b.a.n:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    com.google.gson.Gson gson -> b
    void <init>(com.google.gson.Gson) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.ObjectTypeAdapter$1 -> com.a.a.b.a.o:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$2 -> com.a.a.b.a.p:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory -> com.a.a.b.a.q:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> b
    com.google.gson.internal.Excluder excluder -> c
    com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory -> d
    void <init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.FieldNamingStrategy,com.google.gson.internal.Excluder,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory) -> <init>
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    boolean excludeField(java.lang.reflect.Field,boolean,com.google.gson.internal.Excluder) -> a
    java.util.List getFieldNames(java.lang.reflect.Field) -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(com.google.gson.Gson,java.lang.reflect.Field,java.lang.String,com.google.gson.reflect.TypeToken,boolean,boolean) -> a
    java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1 -> com.a.a.b.a.r:
    java.lang.reflect.Field val$field -> a
    boolean val$jsonAdapterPresent -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.Gson val$context -> d
    com.google.gson.reflect.TypeToken val$fieldType -> e
    boolean val$isPrimitive -> f
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> g
    void <init>(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,java.lang.String,boolean,boolean,java.lang.reflect.Field,boolean,com.google.gson.TypeAdapter,com.google.gson.Gson,com.google.gson.reflect.TypeToken,boolean) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
    boolean writeField(java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter -> com.a.a.b.a.s:
    com.google.gson.internal.ObjectConstructor constructor -> a
    java.util.Map boundFields -> b
    void <init>(com.google.gson.internal.ObjectConstructor,java.util.Map) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField -> com.a.a.b.a.t:
    java.lang.String name -> h
    boolean serialized -> i
    boolean deserialized -> j
    void <init>(java.lang.String,boolean,boolean) -> <init>
    boolean writeField(java.lang.Object) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter -> com.a.a.b.a.u:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    void <init>() -> <init>
    java.sql.Date read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.SqlDateTypeAdapter$1 -> com.a.a.b.a.v:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TimeTypeAdapter -> com.a.a.b.a.w:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    void <init>() -> <init>
    java.sql.Time read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Time) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.TimeTypeAdapter$1 -> com.a.a.b.a.x:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TreeTypeAdapter -> com.a.a.b.a.y:
    com.google.gson.JsonSerializer serializer -> a
    com.google.gson.JsonDeserializer deserializer -> b
    com.google.gson.Gson gson -> c
    com.google.gson.reflect.TypeToken typeToken -> d
    com.google.gson.TypeAdapterFactory skipPast -> e
    com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl context -> f
    com.google.gson.TypeAdapter delegate -> g
    void <init>(com.google.gson.JsonSerializer,com.google.gson.JsonDeserializer,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapterFactory) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> b
    com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,java.lang.Object) -> a
    com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object) -> b
com.google.gson.internal.bind.TreeTypeAdapter$1 -> com.a.a.b.a.z:
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl -> com.a.a.b.a.aa:
    com.google.gson.internal.bind.TreeTypeAdapter this$0 -> a
    void <init>(com.google.gson.internal.bind.TreeTypeAdapter) -> <init>
    void <init>(com.google.gson.internal.bind.TreeTypeAdapter,com.google.gson.internal.bind.TreeTypeAdapter$1) -> <init>
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory -> com.a.a.b.a.ab:
    com.google.gson.reflect.TypeToken exactType -> a
    boolean matchRawType -> b
    java.lang.Class hierarchyType -> c
    com.google.gson.JsonSerializer serializer -> d
    com.google.gson.JsonDeserializer deserializer -> e
    void <init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper -> com.a.a.b.a.ac:
    com.google.gson.Gson context -> a
    com.google.gson.TypeAdapter delegate -> b
    java.lang.reflect.Type type -> c
    void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter,java.lang.reflect.Type) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters -> com.a.a.b.a.ad:
    com.google.gson.TypeAdapter CLASS -> a
    com.google.gson.TypeAdapterFactory CLASS_FACTORY -> b
    com.google.gson.TypeAdapter BIT_SET -> c
    com.google.gson.TypeAdapterFactory BIT_SET_FACTORY -> d
    com.google.gson.TypeAdapter BOOLEAN -> e
    com.google.gson.TypeAdapter BOOLEAN_AS_STRING -> f
    com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY -> g
    com.google.gson.TypeAdapter BYTE -> h
    com.google.gson.TypeAdapterFactory BYTE_FACTORY -> i
    com.google.gson.TypeAdapter SHORT -> j
    com.google.gson.TypeAdapterFactory SHORT_FACTORY -> k
    com.google.gson.TypeAdapter INTEGER -> l
    com.google.gson.TypeAdapterFactory INTEGER_FACTORY -> m
    com.google.gson.TypeAdapter ATOMIC_INTEGER -> n
    com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_FACTORY -> o
    com.google.gson.TypeAdapter ATOMIC_BOOLEAN -> p
    com.google.gson.TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY -> q
    com.google.gson.TypeAdapter ATOMIC_INTEGER_ARRAY -> r
    com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY -> s
    com.google.gson.TypeAdapter LONG -> t
    com.google.gson.TypeAdapter FLOAT -> u
    com.google.gson.TypeAdapter DOUBLE -> v
    com.google.gson.TypeAdapter NUMBER -> w
    com.google.gson.TypeAdapterFactory NUMBER_FACTORY -> x
    com.google.gson.TypeAdapter CHARACTER -> y
    com.google.gson.TypeAdapterFactory CHARACTER_FACTORY -> z
    com.google.gson.TypeAdapter STRING -> A
    com.google.gson.TypeAdapter BIG_DECIMAL -> B
    com.google.gson.TypeAdapter BIG_INTEGER -> C
    com.google.gson.TypeAdapterFactory STRING_FACTORY -> D
    com.google.gson.TypeAdapter STRING_BUILDER -> E
    com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY -> F
    com.google.gson.TypeAdapter STRING_BUFFER -> G
    com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY -> H
    com.google.gson.TypeAdapter URL -> I
    com.google.gson.TypeAdapterFactory URL_FACTORY -> J
    com.google.gson.TypeAdapter URI -> K
    com.google.gson.TypeAdapterFactory URI_FACTORY -> L
    com.google.gson.TypeAdapter INET_ADDRESS -> M
    com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY -> N
    com.google.gson.TypeAdapter UUID -> O
    com.google.gson.TypeAdapterFactory UUID_FACTORY -> P
    com.google.gson.TypeAdapter CURRENCY -> Q
    com.google.gson.TypeAdapterFactory CURRENCY_FACTORY -> R
    com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY -> S
    com.google.gson.TypeAdapter CALENDAR -> T
    com.google.gson.TypeAdapterFactory CALENDAR_FACTORY -> U
    com.google.gson.TypeAdapter LOCALE -> V
    com.google.gson.TypeAdapterFactory LOCALE_FACTORY -> W
    com.google.gson.TypeAdapter JSON_ELEMENT -> X
    com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY -> Y
    com.google.gson.TypeAdapterFactory ENUM_FACTORY -> Z
    com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> b
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter) -> b
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.TypeAdapters$1 -> com.a.a.b.a.ae:
    void <init>() -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Class) -> a
    java.lang.Class read(com.google.gson.stream.JsonReader) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$10 -> com.a.a.b.a.af:
    void <init>() -> <init>
    java.util.concurrent.atomic.AtomicIntegerArray read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicIntegerArray) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$11 -> com.a.a.b.a.ag:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$12 -> com.a.a.b.a.ah:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$13 -> com.a.a.b.a.ai:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$14 -> com.a.a.b.a.aj:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$15 -> com.a.a.b.a.ak:
    void <init>() -> <init>
    java.lang.Character read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Character) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$16 -> com.a.a.b.a.al:
    void <init>() -> <init>
    java.lang.String read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.String) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$17 -> com.a.a.b.a.am:
    void <init>() -> <init>
    java.math.BigDecimal read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigDecimal) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$18 -> com.a.a.b.a.an:
    void <init>() -> <init>
    java.math.BigInteger read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigInteger) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$19 -> com.a.a.b.a.ao:
    void <init>() -> <init>
    java.lang.StringBuilder read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuilder) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$2 -> com.a.a.b.a.ap:
    void <init>() -> <init>
    java.util.BitSet read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.BitSet) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$20 -> com.a.a.b.a.aq:
    void <init>() -> <init>
    java.lang.StringBuffer read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuffer) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$21 -> com.a.a.b.a.ar:
    void <init>() -> <init>
    java.net.URL read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URL) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$22 -> com.a.a.b.a.as:
    void <init>() -> <init>
    java.net.URI read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URI) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$23 -> com.a.a.b.a.at:
    void <init>() -> <init>
    java.net.InetAddress read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.InetAddress) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$24 -> com.a.a.b.a.au:
    void <init>() -> <init>
    java.util.UUID read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.UUID) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$25 -> com.a.a.b.a.av:
    void <init>() -> <init>
    java.util.Currency read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Currency) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$26 -> com.a.a.b.a.aw:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$26$1 -> com.a.a.b.a.ax:
    com.google.gson.TypeAdapter val$dateTypeAdapter -> a
    com.google.gson.internal.bind.TypeAdapters$26 this$0 -> b
    void <init>(com.google.gson.internal.bind.TypeAdapters$26,com.google.gson.TypeAdapter) -> <init>
    java.sql.Timestamp read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Timestamp) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$27 -> com.a.a.b.a.ay:
    void <init>() -> <init>
    java.util.Calendar read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Calendar) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$28 -> com.a.a.b.a.az:
    void <init>() -> <init>
    java.util.Locale read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Locale) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$29 -> com.a.a.b.a.ba:
    void <init>() -> <init>
    com.google.gson.JsonElement read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$3 -> com.a.a.b.a.bb:
    void <init>() -> <init>
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$30 -> com.a.a.b.a.bc:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$31 -> com.a.a.b.a.bd:
    com.google.gson.reflect.TypeToken val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    void <init>(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$32 -> com.a.a.b.a.be:
    java.lang.Class val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    void <init>(java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$33 -> com.a.a.b.a.bf:
    java.lang.Class val$unboxed -> a
    java.lang.Class val$boxed -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    void <init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$34 -> com.a.a.b.a.bg:
    java.lang.Class val$base -> a
    java.lang.Class val$sub -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    void <init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$35 -> com.a.a.b.a.bh:
    java.lang.Class val$clazz -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    void <init>(java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$35$1 -> com.a.a.b.a.bi:
    java.lang.Class val$requestedType -> a
    com.google.gson.internal.bind.TypeAdapters$35 this$0 -> b
    void <init>(com.google.gson.internal.bind.TypeAdapters$35,java.lang.Class) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.internal.bind.TypeAdapters$36 -> com.a.a.b.a.bj:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.TypeAdapters$4 -> com.a.a.b.a.bk:
    void <init>() -> <init>
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$5 -> com.a.a.b.a.bl:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$6 -> com.a.a.b.a.bm:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$7 -> com.a.a.b.a.bn:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$8 -> com.a.a.b.a.bo:
    void <init>() -> <init>
    java.util.concurrent.atomic.AtomicInteger read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicInteger) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$9 -> com.a.a.b.a.bp:
    void <init>() -> <init>
    java.util.concurrent.atomic.AtomicBoolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicBoolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter -> com.a.a.b.a.bq:
    java.util.Map nameToConstant -> a
    java.util.Map constantToName -> b
    void <init>(java.lang.Class) -> <init>
    java.lang.Enum read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Enum) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.util.ISO8601Utils -> com.a.a.b.a.a.a:
    java.util.TimeZone TIMEZONE_UTC -> a
    java.util.Date parse(java.lang.String,java.text.ParsePosition) -> a
    boolean checkOffset(java.lang.String,int,char) -> a
    int parseInt(java.lang.String,int,int) -> a
    int indexOfNonDigit(java.lang.String,int) -> a
    void <clinit>() -> <clinit>
com.google.gson.reflect.TypeToken -> com.a.a.c.a:
    java.lang.Class rawType -> a
    java.lang.reflect.Type type -> b
    int hashCode -> c
    void <init>() -> <init>
    void <init>(java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> a
    java.lang.Class getRawType() -> a
    java.lang.reflect.Type getType() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.gson.reflect.TypeToken get(java.lang.reflect.Type) -> a
    com.google.gson.reflect.TypeToken get(java.lang.Class) -> b
com.google.gson.stream.JsonReader -> com.a.a.d.a:
    char[] NON_EXECUTE_PREFIX -> b
    java.io.Reader in -> c
    boolean lenient -> d
    char[] buffer -> e
    int pos -> f
    int limit -> g
    int lineNumber -> h
    int lineStart -> i
    int peeked -> a
    long peekedLong -> j
    int peekedNumberLength -> k
    java.lang.String peekedString -> l
    int[] stack -> m
    int stackSize -> n
    java.lang.String[] pathNames -> o
    int[] pathIndices -> p
    void <init>(java.io.Reader) -> <init>
    void setLenient(boolean) -> a
    boolean isLenient() -> q
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    int doPeek() -> r
    int peekKeyword() -> o
    int peekNumber() -> s
    boolean isLiteral(char) -> a
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    java.lang.String nextQuotedValue(char) -> b
    java.lang.String nextUnquotedValue() -> t
    void skipQuotedValue(char) -> c
    void skipUnquotedValue() -> u
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    void push(int) -> a
    boolean fillBuffer(int) -> b
    int nextNonWhitespace(boolean) -> b
    void checkLenient() -> v
    void skipToEndOfLine() -> w
    boolean skipTo(java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.String locationString() -> x
    java.lang.String getPath() -> p
    char readEscapeCharacter() -> y
    java.io.IOException syntaxError(java.lang.String) -> b
    void consumeNonExecutePrefix() -> z
    java.lang.String access$000(com.google.gson.stream.JsonReader) -> a
    void <clinit>() -> <clinit>
com.google.gson.stream.JsonReader$1 -> com.a.a.d.b:
    void <init>() -> <init>
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.stream.JsonToken -> com.a.a.d.c:
    com.google.gson.stream.JsonToken BEGIN_ARRAY -> a
    com.google.gson.stream.JsonToken END_ARRAY -> b
    com.google.gson.stream.JsonToken BEGIN_OBJECT -> c
    com.google.gson.stream.JsonToken END_OBJECT -> d
    com.google.gson.stream.JsonToken NAME -> e
    com.google.gson.stream.JsonToken STRING -> f
    com.google.gson.stream.JsonToken NUMBER -> g
    com.google.gson.stream.JsonToken BOOLEAN -> h
    com.google.gson.stream.JsonToken NULL -> i
    com.google.gson.stream.JsonToken END_DOCUMENT -> j
    com.google.gson.stream.JsonToken[] $VALUES -> k
    com.google.gson.stream.JsonToken[] values() -> values
    com.google.gson.stream.JsonToken valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.gson.stream.JsonWriter -> com.a.a.d.d:
    java.lang.String[] REPLACEMENT_CHARS -> a
    java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS -> b
    java.io.Writer out -> c
    int[] stack -> d
    int stackSize -> e
    java.lang.String indent -> f
    java.lang.String separator -> g
    boolean lenient -> h
    boolean htmlSafe -> i
    java.lang.String deferredName -> j
    boolean serializeNulls -> k
    void <init>(java.io.Writer) -> <init>
    void setIndent(java.lang.String) -> c
    void setLenient(boolean) -> b
    boolean isLenient() -> g
    void setHtmlSafe(boolean) -> c
    boolean isHtmlSafe() -> h
    void setSerializeNulls(boolean) -> d
    boolean getSerializeNulls() -> i
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter open(int,java.lang.String) -> a
    com.google.gson.stream.JsonWriter close(int,int,java.lang.String) -> a
    void push(int) -> a
    int peek() -> a
    void replaceTop(int) -> b
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    void writeDeferredName() -> j
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
    void string(java.lang.String) -> d
    void newline() -> k
    void beforeName() -> l
    void beforeValue() -> m
    void <clinit>() -> <clinit>
com.google.gson.stream.MalformedJsonException -> com.a.a.d.e:
    void <init>(java.lang.String) -> <init>
com.j256.ormlite.android.AndroidCompiledStatement -> com.j256.ormlite.android.AndroidCompiledStatement:
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.String[] NO_STRING_ARGS -> NO_STRING_ARGS
    com.j256.ormlite.android.compat.ApiCompatibility apiCompatibility -> apiCompatibility
    java.lang.String sql -> sql
    android.database.sqlite.SQLiteDatabase db -> db
    com.j256.ormlite.stmt.StatementBuilder$StatementType type -> type
    boolean cancelQueriesEnabled -> cancelQueriesEnabled
    android.database.Cursor cursor -> cursor
    java.util.List args -> args
    java.lang.Integer max -> max
    com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook cancellationHook -> cancellationHook
    void <init>(java.lang.String,android.database.sqlite.SQLiteDatabase,com.j256.ormlite.stmt.StatementBuilder$StatementType,boolean) -> <init>
    int getColumnCount() -> getColumnCount
    java.lang.String getColumnName(int) -> getColumnName
    com.j256.ormlite.support.DatabaseResults runQuery(com.j256.ormlite.dao.ObjectCache) -> runQuery
    int runUpdate() -> runUpdate
    int runExecute() -> runExecute
    void close() -> close
    void closeQuietly() -> closeQuietly
    void cancel() -> cancel
    void setObject(int,java.lang.Object,com.j256.ormlite.field.SqlType) -> setObject
    void setMaxRows(int) -> setMaxRows
    void setQueryTimeout(long) -> setQueryTimeout
    android.database.Cursor getCursor() -> getCursor
    java.lang.String toString() -> toString
    int execSql(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.Object[]) -> execSql
    void isInPrep() -> isInPrep
    java.lang.Object[] getArgArray() -> getArgArray
    java.lang.String[] getStringArray() -> getStringArray
    void <clinit>() -> <clinit>
com.j256.ormlite.android.AndroidCompiledStatement$1 -> com.j256.ormlite.android.AndroidCompiledStatement$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
    void <clinit>() -> <clinit>
com.j256.ormlite.android.AndroidConnectionSource -> com.j256.ormlite.android.AndroidConnectionSource:
    com.j256.ormlite.logger.Logger logger -> logger
    android.database.sqlite.SQLiteOpenHelper helper -> helper
    android.database.sqlite.SQLiteDatabase sqliteDatabase -> sqliteDatabase
    com.j256.ormlite.support.DatabaseConnection connection -> connection
    boolean isOpen -> isOpen
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.support.DatabaseConnectionProxyFactory connectionProxyFactory -> connectionProxyFactory
    boolean cancelQueriesEnabled -> cancelQueriesEnabled
    void <init>(android.database.sqlite.SQLiteOpenHelper) -> <init>
    void <init>(android.database.sqlite.SQLiteDatabase) -> <init>
    com.j256.ormlite.support.DatabaseConnection getReadOnlyConnection() -> getReadOnlyConnection
    com.j256.ormlite.support.DatabaseConnection getReadWriteConnection() -> getReadWriteConnection
    void releaseConnection(com.j256.ormlite.support.DatabaseConnection) -> releaseConnection
    boolean saveSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> saveSpecialConnection
    void clearSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> clearSpecialConnection
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.db.DatabaseType getDatabaseType() -> getDatabaseType
    boolean isOpen() -> isOpen
    void setDatabaseConnectionProxyFactory(com.j256.ormlite.support.DatabaseConnectionProxyFactory) -> setDatabaseConnectionProxyFactory
    boolean isCancelQueriesEnabled() -> isCancelQueriesEnabled
    void setCancelQueriesEnabled(boolean) -> setCancelQueriesEnabled
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.j256.ormlite.android.AndroidDatabaseConnection -> com.j256.ormlite.android.AndroidDatabaseConnection:
    java.lang.String ANDROID_VERSION -> ANDROID_VERSION
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.String[] NO_STRING_ARGS -> NO_STRING_ARGS
    android.database.sqlite.SQLiteDatabase db -> db
    boolean readWrite -> readWrite
    boolean cancelQueriesEnabled -> cancelQueriesEnabled
    void <init>(android.database.sqlite.SQLiteDatabase,boolean) -> <init>
    void <init>(android.database.sqlite.SQLiteDatabase,boolean,boolean) -> <init>
    boolean isAutoCommitSupported() -> isAutoCommitSupported
    boolean isAutoCommit() -> isAutoCommit
    void setAutoCommit(boolean) -> setAutoCommit
    java.sql.Savepoint setSavePoint(java.lang.String) -> setSavePoint
    boolean isReadWrite() -> isReadWrite
    void commit(java.sql.Savepoint) -> commit
    void rollback(java.sql.Savepoint) -> rollback
    int executeStatement(java.lang.String,int) -> executeStatement
    com.j256.ormlite.support.CompiledStatement compileStatement(java.lang.String,com.j256.ormlite.stmt.StatementBuilder$StatementType,com.j256.ormlite.field.FieldType[],int) -> compileStatement
    int insert(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.support.GeneratedKeyHolder) -> insert
    int update(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> update
    int delete(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> delete
    java.lang.Object queryForOne(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache) -> queryForOne
    long queryForLong(java.lang.String) -> queryForLong
    long queryForLong(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> queryForLong
    void close() -> close
    void closeQuietly() -> closeQuietly
    boolean isClosed() -> isClosed
    boolean isTableExists(java.lang.String) -> isTableExists
    int update(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],java.lang.String) -> update
    void bindArgs(android.database.sqlite.SQLiteStatement,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> bindArgs
    java.lang.String[] toStrings(java.lang.Object[]) -> toStrings
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.j256.ormlite.android.AndroidDatabaseConnection$1 -> com.j256.ormlite.android.AndroidDatabaseConnection$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
    void <clinit>() -> <clinit>
com.j256.ormlite.android.AndroidDatabaseConnection$OurSavePoint -> com.j256.ormlite.android.AndroidDatabaseConnection$OurSavePoint:
    java.lang.String name -> name
    void <init>(java.lang.String) -> <init>
    int getSavepointId() -> getSavepointId
    java.lang.String getSavepointName() -> getSavepointName
com.j256.ormlite.android.AndroidDatabaseResults -> com.j256.ormlite.android.AndroidDatabaseResults:
    int MIN_NUM_COLUMN_NAMES_MAP -> MIN_NUM_COLUMN_NAMES_MAP
    android.database.Cursor cursor -> cursor
    java.lang.String[] columnNames -> columnNames
    java.util.Map columnNameMap -> columnNameMap
    com.j256.ormlite.dao.ObjectCache objectCache -> objectCache
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    void <init>(android.database.Cursor,com.j256.ormlite.dao.ObjectCache) -> <init>
    void <init>(android.database.Cursor,boolean,com.j256.ormlite.dao.ObjectCache) -> <init>
    int getColumnCount() -> getColumnCount
    java.lang.String[] getColumnNames() -> getColumnNames
    boolean first() -> first
    boolean next() -> next
    boolean last() -> last
    boolean previous() -> previous
    boolean moveRelative(int) -> moveRelative
    boolean moveAbsolute(int) -> moveAbsolute
    int getCount() -> getCount
    int getPosition() -> getPosition
    int findColumn(java.lang.String) -> findColumn
    java.lang.String getString(int) -> getString
    boolean getBoolean(int) -> getBoolean
    char getChar(int) -> getChar
    byte getByte(int) -> getByte
    byte[] getBytes(int) -> getBytes
    short getShort(int) -> getShort
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    java.sql.Timestamp getTimestamp(int) -> getTimestamp
    java.io.InputStream getBlobStream(int) -> getBlobStream
    java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    boolean wasNull(int) -> wasNull
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void close() -> close
    void closeQuietly() -> closeQuietly
    android.database.Cursor getRawCursor() -> getRawCursor
    java.lang.String toString() -> toString
    int lookupColumn(java.lang.String) -> lookupColumn
    void <clinit>() -> <clinit>
com.j256.ormlite.android.AndroidLog -> com.j256.ormlite.android.AndroidLog:
    java.lang.String ALL_LOGS_NAME -> ALL_LOGS_NAME
    int REFRESH_LEVEL_CACHE_EVERY -> REFRESH_LEVEL_CACHE_EVERY
    int MAX_TAG_LENGTH -> MAX_TAG_LENGTH
    java.lang.String className -> className
    int levelCacheC -> levelCacheC
    boolean[] levelCache -> levelCache
    void <init>(java.lang.String) -> <init>
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> log
    void refreshLevelCache() -> refreshLevelCache
    boolean isLevelEnabledInternal(int) -> isLevelEnabledInternal
    int levelToAndroidLevel(com.j256.ormlite.logger.Log$Level) -> levelToAndroidLevel
com.j256.ormlite.android.AndroidLog$1 -> com.j256.ormlite.android.AndroidLog$1:
    int[] $SwitchMap$com$j256$ormlite$logger$Log$Level -> $SwitchMap$com$j256$ormlite$logger$Log$Level
    void <clinit>() -> <clinit>
com.j256.ormlite.android.DatabaseTableConfigUtil -> com.j256.ormlite.android.DatabaseTableConfigUtil:
    java.lang.Class annotationFactoryClazz -> annotationFactoryClazz
    java.lang.reflect.Field elementsField -> elementsField
    java.lang.Class annotationMemberClazz -> annotationMemberClazz
    java.lang.reflect.Field nameField -> nameField
    java.lang.reflect.Field valueField -> valueField
    int workedC -> workedC
    int[] configFieldNums -> configFieldNums
    int COLUMN_NAME -> COLUMN_NAME
    int DATA_TYPE -> DATA_TYPE
    int DEFAULT_VALUE -> DEFAULT_VALUE
    int WIDTH -> WIDTH
    int CAN_BE_NULL -> CAN_BE_NULL
    int ID -> ID
    int GENERATED_ID -> GENERATED_ID
    int GENERATED_ID_SEQUENCE -> GENERATED_ID_SEQUENCE
    int FOREIGN -> FOREIGN
    int USE_GET_SET -> USE_GET_SET
    int UNKNOWN_ENUM_NAME -> UNKNOWN_ENUM_NAME
    int THROW_IF_NULL -> THROW_IF_NULL
    int PERSISTED -> PERSISTED
    int FORMAT -> FORMAT
    int UNIQUE -> UNIQUE
    int UNIQUE_COMBO -> UNIQUE_COMBO
    int INDEX -> INDEX
    int UNIQUE_INDEX -> UNIQUE_INDEX
    int INDEX_NAME -> INDEX_NAME
    int UNIQUE_INDEX_NAME -> UNIQUE_INDEX_NAME
    int FOREIGN_AUTO_REFRESH -> FOREIGN_AUTO_REFRESH
    int MAX_FOREIGN_AUTO_REFRESH_LEVEL -> MAX_FOREIGN_AUTO_REFRESH_LEVEL
    int PERSISTER_CLASS -> PERSISTER_CLASS
    int ALLOW_GENERATED_ID_INSERT -> ALLOW_GENERATED_ID_INSERT
    int COLUMN_DEFINITON -> COLUMN_DEFINITON
    int FOREIGN_AUTO_CREATE -> FOREIGN_AUTO_CREATE
    int VERSION -> VERSION
    int FOREIGN_COLUMN_NAME -> FOREIGN_COLUMN_NAME
    int READ_ONLY -> READ_ONLY
    void <init>() -> <init>
    com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> fromClass
    int getWorkedC() -> getWorkedC
    int[] lookupClasses() -> lookupClasses
    int configFieldNameToNum(java.lang.String) -> configFieldNameToNum
    com.j256.ormlite.field.DatabaseFieldConfig configFromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field) -> configFromField
    com.j256.ormlite.field.DatabaseFieldConfig buildConfig(com.j256.ormlite.field.DatabaseField,java.lang.String,java.lang.reflect.Field) -> buildConfig
    void assignConfigField(int,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.reflect.Field,java.lang.Object) -> assignConfigField
    java.lang.String valueIfNotBlank(java.lang.String) -> valueIfNotBlank
    void <clinit>() -> <clinit>
com.j256.ormlite.android.DatabaseTableConfigUtil$DatabaseFieldSample -> com.j256.ormlite.android.DatabaseTableConfigUtil$DatabaseFieldSample:
    java.lang.String field -> field
    void <init>() -> <init>
com.j256.ormlite.android.apptools.OpenHelperManager -> com.j256.ormlite.android.apptools.OpenHelperManager:
    java.lang.String HELPER_CLASS_RESOURCE_NAME -> HELPER_CLASS_RESOURCE_NAME
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.Class helperClass -> helperClass
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean wasClosed -> wasClosed
    int instanceCount -> instanceCount
    void <init>() -> <init>
    void setOpenHelperClass(java.lang.Class) -> setOpenHelperClass
    void setHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> setHelper
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper(android.content.Context,java.lang.Class) -> getHelper
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper(android.content.Context) -> getHelper
    void release() -> release
    void releaseHelper() -> releaseHelper
    void innerSetHelperClass(java.lang.Class) -> innerSetHelperClass
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper loadHelper(android.content.Context,java.lang.Class) -> loadHelper
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper constructHelper(android.content.Context,java.lang.Class) -> constructHelper
    java.lang.Class lookupHelperClass(android.content.Context,java.lang.Class) -> lookupHelperClass
    void <clinit>() -> <clinit>
com.j256.ormlite.android.apptools.OrmLiteBaseActivity -> com.j256.ormlite.android.apptools.OrmLiteBaseActivity:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    com.j256.ormlite.logger.Logger logger -> logger
    void <init>() -> <init>
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.j256.ormlite.android.apptools.OrmLiteBaseActivityGroup -> com.j256.ormlite.android.apptools.OrmLiteBaseActivityGroup:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    void <init>() -> <init>
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteBaseListActivity -> com.j256.ormlite.android.apptools.OrmLiteBaseListActivity:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    void <init>() -> <init>
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteBaseService -> com.j256.ormlite.android.apptools.OrmLiteBaseService:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    void <init>() -> <init>
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteBaseTabActivity -> com.j256.ormlite.android.apptools.OrmLiteBaseTabActivity:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    void <init>() -> <init>
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteConfigUtil -> com.j256.ormlite.android.apptools.OrmLiteConfigUtil:
    java.lang.String RESOURCE_DIR_NAME -> RESOURCE_DIR_NAME
    java.lang.String RAW_DIR_NAME -> RAW_DIR_NAME
    int maxFindSourceLevel -> maxFindSourceLevel
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void writeConfigFile(java.lang.String) -> writeConfigFile
    void writeConfigFile(java.lang.String,java.lang.Class[]) -> writeConfigFile
    void writeConfigFile(java.io.File) -> writeConfigFile
    void writeConfigFile(java.io.File,java.io.File) -> writeConfigFile
    void writeConfigFile(java.io.File,java.lang.Class[]) -> writeConfigFile
    void writeConfigFile(java.io.OutputStream,java.io.File) -> writeConfigFile
    void writeConfigFile(java.io.OutputStream,java.lang.Class[]) -> writeConfigFile
    java.io.File findRawDir(java.io.File) -> findRawDir
    void writeHeader(java.io.BufferedWriter) -> writeHeader
    void findAnnotatedClasses(java.util.List,java.io.File,int) -> findAnnotatedClasses
    void writeConfigForTable(java.io.BufferedWriter,java.lang.Class) -> writeConfigForTable
    boolean classHasAnnotations(java.lang.Class) -> classHasAnnotations
    java.lang.String getPackageOfClass(java.io.File) -> getPackageOfClass
    java.io.File findResRawDir(java.io.File) -> findResRawDir
    void <clinit>() -> <clinit>
com.j256.ormlite.android.apptools.OrmLiteConfigUtil$1 -> com.j256.ormlite.android.apptools.OrmLiteConfigUtil$1:
    void <init>() -> <init>
    boolean accept(java.io.File) -> accept
com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper -> com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.android.AndroidConnectionSource connectionSource -> connectionSource
    boolean cancelQueriesEnabled -> cancelQueriesEnabled
    boolean isOpen -> isOpen
    void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int) -> <init>
    void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,int) -> <init>
    void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,java.io.File) -> <init>
    void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,java.io.InputStream) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource,int,int) -> onUpgrade
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void close() -> close
    boolean isOpen() -> isOpen
    com.j256.ormlite.dao.Dao getDao(java.lang.Class) -> getDao
    com.j256.ormlite.dao.RuntimeExceptionDao getRuntimeExceptionDao(java.lang.Class) -> getRuntimeExceptionDao
    java.lang.String toString() -> toString
    java.io.InputStream openFileId(android.content.Context,int) -> openFileId
    java.io.InputStream openFile(java.io.File) -> openFile
    void <clinit>() -> <clinit>
com.j256.ormlite.android.compat.ApiCompatibility -> com.j256.ormlite.android.compat.ApiCompatibility:
    android.database.Cursor rawQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook) -> rawQuery
    com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook createCancellationHook() -> createCancellationHook
com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook -> com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook:
    void cancel() -> cancel
com.j256.ormlite.android.compat.ApiCompatibilityUtils -> com.j256.ormlite.android.compat.ApiCompatibilityUtils:
    com.j256.ormlite.android.compat.ApiCompatibility compatibility -> compatibility
    int BASE -> BASE
    int BASE_1_1 -> BASE_1_1
    int CUPCAKE -> CUPCAKE
    int DONUT -> DONUT
    int ECLAIR -> ECLAIR
    int ECLAIR_0_1 -> ECLAIR_0_1
    int ECLAIR_MR1 -> ECLAIR_MR1
    int FROYO -> FROYO
    int GINGERBREAD -> GINGERBREAD
    int GINGERBREAD_MR1 -> GINGERBREAD_MR1
    int HONEYCOMB -> HONEYCOMB
    int HONEYCOMB_MR1 -> HONEYCOMB_MR1
    int HONEYCOMB_MR2 -> HONEYCOMB_MR2
    int ICE_CREAM_SANDWICH -> ICE_CREAM_SANDWICH
    int ICE_CREAM_SANDWICH_MR1 -> ICE_CREAM_SANDWICH_MR1
    int JELLY_BEAN -> JELLY_BEAN
    int JELLY_BEAN_MR1 -> JELLY_BEAN_MR1
    int JELLY_BEAN_MR2 -> JELLY_BEAN_MR2
    void <init>() -> <init>
    com.j256.ormlite.android.compat.ApiCompatibility getCompatibility() -> getCompatibility
    void <clinit>() -> <clinit>
com.j256.ormlite.android.compat.BasicApiCompatibility -> com.j256.ormlite.android.compat.BasicApiCompatibility:
    void <init>() -> <init>
    android.database.Cursor rawQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook) -> rawQuery
    com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook createCancellationHook() -> createCancellationHook
com.j256.ormlite.android.compat.JellyBeanApiCompatibility -> com.j256.ormlite.android.compat.JellyBeanApiCompatibility:
    void <init>() -> <init>
    android.database.Cursor rawQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook) -> rawQuery
    com.j256.ormlite.android.compat.ApiCompatibility$CancellationHook createCancellationHook() -> createCancellationHook
com.j256.ormlite.android.compat.JellyBeanApiCompatibility$JellyBeanCancellationHook -> com.j256.ormlite.android.compat.JellyBeanApiCompatibility$JellyBeanCancellationHook:
    android.os.CancellationSignal cancellationSignal -> cancellationSignal
    void <init>() -> <init>
    void cancel() -> cancel
    android.os.CancellationSignal access$000(com.j256.ormlite.android.compat.JellyBeanApiCompatibility$JellyBeanCancellationHook) -> access$000
com.j256.ormlite.dao.BaseDaoImpl -> com.j256.ormlite.dao.BaseDaoImpl:
    boolean initialized -> initialized
    com.j256.ormlite.stmt.StatementExecutor statementExecutor -> statementExecutor
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    java.lang.Class dataClass -> dataClass
    com.j256.ormlite.table.DatabaseTableConfig tableConfig -> tableConfig
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    com.j256.ormlite.dao.CloseableIterator lastIterator -> lastIterator
    com.j256.ormlite.table.ObjectFactory objectFactory -> objectFactory
    java.lang.ThreadLocal daoConfigLevelLocal -> daoConfigLevelLocal
    com.j256.ormlite.dao.ReferenceObjectCache defaultObjectCache -> defaultObjectCache
    com.j256.ormlite.dao.ObjectCache objectCache -> objectCache
    void <init>(java.lang.Class) -> <init>
    void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> <init>
    void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> <init>
    void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class,com.j256.ormlite.table.DatabaseTableConfig) -> <init>
    void initialize() -> initialize
    java.lang.Object queryForId(java.lang.Object) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery) -> queryForFirst
    java.util.List queryForAll() -> queryForAll
    java.util.List queryForEq(java.lang.String,java.lang.Object) -> queryForEq
    com.j256.ormlite.stmt.QueryBuilder queryBuilder() -> queryBuilder
    com.j256.ormlite.stmt.UpdateBuilder updateBuilder() -> updateBuilder
    com.j256.ormlite.stmt.DeleteBuilder deleteBuilder() -> deleteBuilder
    java.util.List query(com.j256.ormlite.stmt.PreparedQuery) -> query
    java.util.List queryForMatching(java.lang.Object) -> queryForMatching
    java.util.List queryForMatchingArgs(java.lang.Object) -> queryForMatchingArgs
    java.util.List queryForFieldValues(java.util.Map) -> queryForFieldValues
    java.util.List queryForFieldValuesArgs(java.util.Map) -> queryForFieldValuesArgs
    java.lang.Object queryForSameId(java.lang.Object) -> queryForSameId
    int create(java.lang.Object) -> create
    java.lang.Object createIfNotExists(java.lang.Object) -> createIfNotExists
    com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object) -> createOrUpdate
    int update(java.lang.Object) -> update
    int updateId(java.lang.Object,java.lang.Object) -> updateId
    int update(com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(java.lang.Object) -> refresh
    int delete(java.lang.Object) -> delete
    int deleteById(java.lang.Object) -> deleteById
    int delete(java.util.Collection) -> delete
    int deleteIds(java.util.Collection) -> deleteIds
    int delete(com.j256.ormlite.stmt.PreparedDelete) -> delete
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int) -> iterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],com.j256.ormlite.dao.RawRowObjectMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[]) -> queryRaw
    long queryRawValue(java.lang.String,java.lang.String[]) -> queryRawValue
    int executeRaw(java.lang.String,java.lang.String[]) -> executeRaw
    int executeRawNoArgs(java.lang.String) -> executeRawNoArgs
    int updateRaw(java.lang.String,java.lang.String[]) -> updateRaw
    java.lang.Object callBatchTasks(java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String objectToString(java.lang.Object) -> objectToString
    boolean objectsEqual(java.lang.Object,java.lang.Object) -> objectsEqual
    java.lang.Object extractId(java.lang.Object) -> extractId
    java.lang.Class getDataClass() -> getDataClass
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class) -> findForeignFieldType
    boolean isUpdatable() -> isUpdatable
    boolean isTableExists() -> isTableExists
    long countOf() -> countOf
    long countOf(com.j256.ormlite.stmt.PreparedQuery) -> countOf
    void assignEmptyForeignCollection(java.lang.Object,java.lang.String) -> assignEmptyForeignCollection
    com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String) -> getEmptyForeignCollection
    void setObjectCache(boolean) -> setObjectCache
    void setObjectCache(com.j256.ormlite.dao.ObjectCache) -> setObjectCache
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void clearObjectCache() -> clearObjectCache
    void clearAllInternalObjectCaches() -> clearAllInternalObjectCaches
    java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults) -> mapSelectStarRow
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    boolean idExists(java.lang.Object) -> idExists
    com.j256.ormlite.support.DatabaseConnection startThreadConnection() -> startThreadConnection
    void endThreadConnection(com.j256.ormlite.support.DatabaseConnection) -> endThreadConnection
    void setAutoCommit(boolean) -> setAutoCommit
    void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean) -> setAutoCommit
    boolean isAutoCommit() -> isAutoCommit
    boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection) -> isAutoCommit
    void commit(com.j256.ormlite.support.DatabaseConnection) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection) -> rollBack
    com.j256.ormlite.table.ObjectFactory getObjectFactory() -> getObjectFactory
    void setObjectFactory(com.j256.ormlite.table.ObjectFactory) -> setObjectFactory
    com.j256.ormlite.table.DatabaseTableConfig getTableConfig() -> getTableConfig
    com.j256.ormlite.table.TableInfo getTableInfo() -> getTableInfo
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void setConnectionSource(com.j256.ormlite.support.ConnectionSource) -> setConnectionSource
    void setTableConfig(com.j256.ormlite.table.DatabaseTableConfig) -> setTableConfig
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDao
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createDao
    void checkForInitialized() -> checkForInitialized
    com.j256.ormlite.dao.ForeignCollection makeEmptyForeignCollection(java.lang.Object,java.lang.String) -> makeEmptyForeignCollection
    com.j256.ormlite.dao.CloseableIterator createIterator(int) -> createIterator
    com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int) -> createIterator
    java.util.List queryForMatching(java.lang.Object,boolean) -> queryForMatching
    java.util.List queryForFieldValues(java.util.Map,boolean) -> queryForFieldValues
    java.util.Iterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator access$000(com.j256.ormlite.dao.BaseDaoImpl,int) -> access$000
    com.j256.ormlite.dao.CloseableIterator access$100(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery,int) -> access$100
    void <clinit>() -> <clinit>
com.j256.ormlite.dao.BaseDaoImpl$1 -> com.j256.ormlite.dao.BaseDaoImpl$1:
    void <init>() -> <init>
    java.util.List initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.dao.BaseDaoImpl$2 -> com.j256.ormlite.dao.BaseDaoImpl$2:
    com.j256.ormlite.dao.BaseDaoImpl this$0 -> this$0
    void <init>(com.j256.ormlite.dao.BaseDaoImpl) -> <init>
    java.util.Iterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
com.j256.ormlite.dao.BaseDaoImpl$3 -> com.j256.ormlite.dao.BaseDaoImpl$3:
    com.j256.ormlite.stmt.PreparedQuery val$preparedQuery -> val$preparedQuery
    com.j256.ormlite.dao.BaseDaoImpl this$0 -> this$0
    void <init>(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery) -> <init>
    java.util.Iterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
com.j256.ormlite.dao.BaseDaoImpl$4 -> com.j256.ormlite.dao.BaseDaoImpl$4:
    void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> <init>
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.BaseDaoImpl$5 -> com.j256.ormlite.dao.BaseDaoImpl$5:
    void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> <init>
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.BaseForeignCollection -> com.j256.ormlite.dao.BaseForeignCollection:
    long serialVersionUID -> serialVersionUID
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.field.FieldType foreignFieldType -> foreignFieldType
    java.lang.Object parentId -> parentId
    com.j256.ormlite.stmt.PreparedQuery preparedQuery -> preparedQuery
    java.lang.String orderColumn -> orderColumn
    boolean orderAscending -> orderAscending
    java.lang.Object parent -> parent
    void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,com.j256.ormlite.field.FieldType,java.lang.String,boolean) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    int update(java.lang.Object) -> update
    int refresh(java.lang.Object) -> refresh
    com.j256.ormlite.stmt.PreparedQuery getPreparedQuery() -> getPreparedQuery
    boolean addElement(java.lang.Object) -> addElement
com.j256.ormlite.dao.CloseableIterable -> com.j256.ormlite.dao.CloseableIterable:
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
com.j256.ormlite.dao.CloseableIterator -> com.j256.ormlite.dao.CloseableIterator:
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.support.DatabaseResults getRawResults() -> getRawResults
    void moveToNext() -> moveToNext
    java.lang.Object first() -> first
    java.lang.Object previous() -> previous
    java.lang.Object current() -> current
    java.lang.Object nextThrow() -> nextThrow
    java.lang.Object moveRelative(int) -> moveRelative
com.j256.ormlite.dao.CloseableWrappedIterable -> com.j256.ormlite.dao.CloseableWrappedIterable:
    void close() -> close
com.j256.ormlite.dao.CloseableWrappedIterableImpl -> com.j256.ormlite.dao.CloseableWrappedIterableImpl:
    com.j256.ormlite.dao.CloseableIterable iterable -> iterable
    com.j256.ormlite.dao.CloseableIterator iterator -> iterator
    void <init>(com.j256.ormlite.dao.CloseableIterable) -> <init>
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    void close() -> close
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.Dao -> com.j256.ormlite.dao.Dao:
    java.lang.Object queryForId(java.lang.Object) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery) -> queryForFirst
    java.util.List queryForAll() -> queryForAll
    java.util.List queryForEq(java.lang.String,java.lang.Object) -> queryForEq
    java.util.List queryForMatching(java.lang.Object) -> queryForMatching
    java.util.List queryForMatchingArgs(java.lang.Object) -> queryForMatchingArgs
    java.util.List queryForFieldValues(java.util.Map) -> queryForFieldValues
    java.util.List queryForFieldValuesArgs(java.util.Map) -> queryForFieldValuesArgs
    java.lang.Object queryForSameId(java.lang.Object) -> queryForSameId
    com.j256.ormlite.stmt.QueryBuilder queryBuilder() -> queryBuilder
    com.j256.ormlite.stmt.UpdateBuilder updateBuilder() -> updateBuilder
    com.j256.ormlite.stmt.DeleteBuilder deleteBuilder() -> deleteBuilder
    java.util.List query(com.j256.ormlite.stmt.PreparedQuery) -> query
    int create(java.lang.Object) -> create
    java.lang.Object createIfNotExists(java.lang.Object) -> createIfNotExists
    com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object) -> createOrUpdate
    int update(java.lang.Object) -> update
    int updateId(java.lang.Object,java.lang.Object) -> updateId
    int update(com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(java.lang.Object) -> refresh
    int delete(java.lang.Object) -> delete
    int deleteById(java.lang.Object) -> deleteById
    int delete(java.util.Collection) -> delete
    int deleteIds(java.util.Collection) -> deleteIds
    int delete(com.j256.ormlite.stmt.PreparedDelete) -> delete
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int) -> iterator
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],com.j256.ormlite.dao.RawRowObjectMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[]) -> queryRaw
    long queryRawValue(java.lang.String,java.lang.String[]) -> queryRawValue
    int executeRaw(java.lang.String,java.lang.String[]) -> executeRaw
    int executeRawNoArgs(java.lang.String) -> executeRawNoArgs
    int updateRaw(java.lang.String,java.lang.String[]) -> updateRaw
    java.lang.Object callBatchTasks(java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String objectToString(java.lang.Object) -> objectToString
    boolean objectsEqual(java.lang.Object,java.lang.Object) -> objectsEqual
    java.lang.Object extractId(java.lang.Object) -> extractId
    java.lang.Class getDataClass() -> getDataClass
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class) -> findForeignFieldType
    boolean isUpdatable() -> isUpdatable
    boolean isTableExists() -> isTableExists
    long countOf() -> countOf
    long countOf(com.j256.ormlite.stmt.PreparedQuery) -> countOf
    void assignEmptyForeignCollection(java.lang.Object,java.lang.String) -> assignEmptyForeignCollection
    com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String) -> getEmptyForeignCollection
    void setObjectCache(boolean) -> setObjectCache
    void setObjectCache(com.j256.ormlite.dao.ObjectCache) -> setObjectCache
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void clearObjectCache() -> clearObjectCache
    java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults) -> mapSelectStarRow
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    boolean idExists(java.lang.Object) -> idExists
    com.j256.ormlite.support.DatabaseConnection startThreadConnection() -> startThreadConnection
    void endThreadConnection(com.j256.ormlite.support.DatabaseConnection) -> endThreadConnection
    void setAutoCommit(boolean) -> setAutoCommit
    void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean) -> setAutoCommit
    boolean isAutoCommit() -> isAutoCommit
    boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection) -> isAutoCommit
    void commit(com.j256.ormlite.support.DatabaseConnection) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection) -> rollBack
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void setObjectFactory(com.j256.ormlite.table.ObjectFactory) -> setObjectFactory
com.j256.ormlite.dao.Dao$CreateOrUpdateStatus -> com.j256.ormlite.dao.Dao$CreateOrUpdateStatus:
    boolean created -> created
    boolean updated -> updated
    int numLinesChanged -> numLinesChanged
    void <init>(boolean,boolean,int) -> <init>
    boolean isCreated() -> isCreated
    boolean isUpdated() -> isUpdated
    int getNumLinesChanged() -> getNumLinesChanged
com.j256.ormlite.dao.DaoManager -> com.j256.ormlite.dao.DaoManager:
    java.util.Map configMap -> configMap
    java.util.Map classMap -> classMap
    java.util.Map tableConfigMap -> tableConfigMap
    com.j256.ormlite.logger.Logger logger -> logger
    void <init>() -> <init>
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDao
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> lookupDao
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createDao
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> lookupDao
    void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao) -> registerDao
    void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao) -> unregisterDao
    void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao) -> registerDaoWithTableConfig
    void clearCache() -> clearCache
    void clearDaoCache() -> clearDaoCache
    void addCachedDatabaseConfigs(java.util.Collection) -> addCachedDatabaseConfigs
    void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao) -> addDaoToClassMap
    void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao) -> removeDaoToClassMap
    void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao) -> addDaoToTableMap
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource) -> lookupDao
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource) -> lookupDao
    java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[]) -> findConstructor
    java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDaoFromConfig
    com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> doCreateDao
    void <clinit>() -> <clinit>
com.j256.ormlite.dao.DaoManager$ClassConnectionSource -> com.j256.ormlite.dao.DaoManager$ClassConnectionSource:
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    java.lang.Class clazz -> clazz
    void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource -> com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource:
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    com.j256.ormlite.table.DatabaseTableConfig tableConfig -> tableConfig
    void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.j256.ormlite.dao.EagerForeignCollection -> com.j256.ormlite.dao.EagerForeignCollection:
    long serialVersionUID -> serialVersionUID
    java.util.List results -> results
    void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,com.j256.ormlite.field.FieldType,java.lang.String,boolean) -> <init>
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator(int) -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iteratorThrow() -> iteratorThrow
    com.j256.ormlite.dao.CloseableIterator iteratorThrow(int) -> iteratorThrow
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(int) -> getWrappedIterable
    void close() -> close
    void closeLastIterator() -> closeLastIterator
    boolean isEager() -> isEager
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int updateAll() -> updateAll
    int refreshAll() -> refreshAll
    int refreshCollection() -> refreshCollection
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
    java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection) -> access$000
com.j256.ormlite.dao.EagerForeignCollection$1 -> com.j256.ormlite.dao.EagerForeignCollection$1:
    int offset -> offset
    com.j256.ormlite.dao.EagerForeignCollection this$0 -> this$0
    void <init>(com.j256.ormlite.dao.EagerForeignCollection) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object first() -> first
    java.lang.Object next() -> next
    java.lang.Object nextThrow() -> nextThrow
    java.lang.Object current() -> current
    java.lang.Object previous() -> previous
    java.lang.Object moveRelative(int) -> moveRelative
    void remove() -> remove
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.support.DatabaseResults getRawResults() -> getRawResults
    void moveToNext() -> moveToNext
com.j256.ormlite.dao.ForeignCollection -> com.j256.ormlite.dao.ForeignCollection:
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator(int) -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iteratorThrow() -> iteratorThrow
    com.j256.ormlite.dao.CloseableIterator iteratorThrow(int) -> iteratorThrow
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(int) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    boolean isEager() -> isEager
    int update(java.lang.Object) -> update
    int updateAll() -> updateAll
    int refresh(java.lang.Object) -> refresh
    int refreshAll() -> refreshAll
    int refreshCollection() -> refreshCollection
    boolean add(java.lang.Object) -> add
com.j256.ormlite.dao.GenericRawResults -> com.j256.ormlite.dao.GenericRawResults:
    int getNumberColumns() -> getNumberColumns
    java.lang.String[] getColumnNames() -> getColumnNames
    java.util.List getResults() -> getResults
    java.lang.Object getFirstResult() -> getFirstResult
    void close() -> close
com.j256.ormlite.dao.LazyForeignCollection -> com.j256.ormlite.dao.LazyForeignCollection:
    long serialVersionUID -> serialVersionUID
    com.j256.ormlite.dao.CloseableIterator lastIterator -> lastIterator
    void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,com.j256.ormlite.field.FieldType,java.lang.String,boolean) -> <init>
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator(int) -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iteratorThrow() -> iteratorThrow
    com.j256.ormlite.dao.CloseableIterator iteratorThrow(int) -> iteratorThrow
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(int) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    boolean isEager() -> isEager
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    int updateAll() -> updateAll
    int refreshAll() -> refreshAll
    int refreshCollection() -> refreshCollection
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow(int) -> seperateIteratorThrow
    java.util.Iterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator access$000(com.j256.ormlite.dao.LazyForeignCollection,int) -> access$000
com.j256.ormlite.dao.LazyForeignCollection$1 -> com.j256.ormlite.dao.LazyForeignCollection$1:
    int val$flags -> val$flags
    com.j256.ormlite.dao.LazyForeignCollection this$0 -> this$0
    void <init>(com.j256.ormlite.dao.LazyForeignCollection,int) -> <init>
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.LruObjectCache -> com.j256.ormlite.dao.LruObjectCache:
    int capacity -> capacity
    java.util.concurrent.ConcurrentHashMap classMaps -> classMaps
    void <init>(int) -> <init>
    void registerClass(java.lang.Class) -> registerClass
    java.lang.Object get(java.lang.Class,java.lang.Object) -> get
    void put(java.lang.Class,java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Class) -> clear
    void clearAll() -> clearAll
    void remove(java.lang.Class,java.lang.Object) -> remove
    java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object) -> updateId
    int size(java.lang.Class) -> size
    int sizeAll() -> sizeAll
    java.util.Map getMapForClass(java.lang.Class) -> getMapForClass
com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap -> com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap:
    long serialVersionUID -> serialVersionUID
    int capacity -> capacity
    void <init>(int) -> <init>
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.j256.ormlite.dao.ObjectCache -> com.j256.ormlite.dao.ObjectCache:
    void registerClass(java.lang.Class) -> registerClass
    java.lang.Object get(java.lang.Class,java.lang.Object) -> get
    void put(java.lang.Class,java.lang.Object,java.lang.Object) -> put
    void remove(java.lang.Class,java.lang.Object) -> remove
    java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object) -> updateId
    void clear(java.lang.Class) -> clear
    void clearAll() -> clearAll
    int size(java.lang.Class) -> size
    int sizeAll() -> sizeAll
com.j256.ormlite.dao.RawRowMapper -> com.j256.ormlite.dao.RawRowMapper:
    java.lang.Object mapRow(java.lang.String[],java.lang.String[]) -> mapRow
com.j256.ormlite.dao.RawRowObjectMapper -> com.j256.ormlite.dao.RawRowObjectMapper:
    java.lang.Object mapRow(java.lang.String[],com.j256.ormlite.field.DataType[],java.lang.Object[]) -> mapRow
com.j256.ormlite.dao.ReferenceObjectCache -> com.j256.ormlite.dao.ReferenceObjectCache:
    java.util.concurrent.ConcurrentHashMap classMaps -> classMaps
    boolean useWeak -> useWeak
    void <init>(boolean) -> <init>
    com.j256.ormlite.dao.ReferenceObjectCache makeWeakCache() -> makeWeakCache
    com.j256.ormlite.dao.ReferenceObjectCache makeSoftCache() -> makeSoftCache
    void registerClass(java.lang.Class) -> registerClass
    java.lang.Object get(java.lang.Class,java.lang.Object) -> get
    void put(java.lang.Class,java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Class) -> clear
    void clearAll() -> clearAll
    void remove(java.lang.Class,java.lang.Object) -> remove
    java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object) -> updateId
    int size(java.lang.Class) -> size
    int sizeAll() -> sizeAll
    void cleanNullReferences(java.lang.Class) -> cleanNullReferences
    void cleanNullReferencesAll() -> cleanNullReferencesAll
    void cleanMap(java.util.Map) -> cleanMap
    java.util.Map getMapForClass(java.lang.Class) -> getMapForClass
com.j256.ormlite.dao.RuntimeExceptionDao -> com.j256.ormlite.dao.RuntimeExceptionDao:
    com.j256.ormlite.logger.Log$Level LOG_LEVEL -> LOG_LEVEL
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.logger.Logger logger -> logger
    void <init>(com.j256.ormlite.dao.Dao) -> <init>
    com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDao
    com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createDao
    java.lang.Object queryForId(java.lang.Object) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery) -> queryForFirst
    java.util.List queryForAll() -> queryForAll
    java.util.List queryForEq(java.lang.String,java.lang.Object) -> queryForEq
    java.util.List queryForMatching(java.lang.Object) -> queryForMatching
    java.util.List queryForMatchingArgs(java.lang.Object) -> queryForMatchingArgs
    java.util.List queryForFieldValues(java.util.Map) -> queryForFieldValues
    java.util.List queryForFieldValuesArgs(java.util.Map) -> queryForFieldValuesArgs
    java.lang.Object queryForSameId(java.lang.Object) -> queryForSameId
    com.j256.ormlite.stmt.QueryBuilder queryBuilder() -> queryBuilder
    com.j256.ormlite.stmt.UpdateBuilder updateBuilder() -> updateBuilder
    com.j256.ormlite.stmt.DeleteBuilder deleteBuilder() -> deleteBuilder
    java.util.List query(com.j256.ormlite.stmt.PreparedQuery) -> query
    int create(java.lang.Object) -> create
    java.lang.Object createIfNotExists(java.lang.Object) -> createIfNotExists
    com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object) -> createOrUpdate
    int update(java.lang.Object) -> update
    int updateId(java.lang.Object,java.lang.Object) -> updateId
    int update(com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(java.lang.Object) -> refresh
    int delete(java.lang.Object) -> delete
    int deleteById(java.lang.Object) -> deleteById
    int delete(java.util.Collection) -> delete
    int deleteIds(java.util.Collection) -> deleteIds
    int delete(com.j256.ormlite.stmt.PreparedDelete) -> delete
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int) -> iterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[]) -> queryRaw
    long queryRawValue(java.lang.String,java.lang.String[]) -> queryRawValue
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],com.j256.ormlite.dao.RawRowObjectMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[]) -> queryRaw
    int executeRaw(java.lang.String,java.lang.String[]) -> executeRaw
    int executeRawNoArgs(java.lang.String) -> executeRawNoArgs
    int updateRaw(java.lang.String,java.lang.String[]) -> updateRaw
    java.lang.Object callBatchTasks(java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String objectToString(java.lang.Object) -> objectToString
    boolean objectsEqual(java.lang.Object,java.lang.Object) -> objectsEqual
    java.lang.Object extractId(java.lang.Object) -> extractId
    java.lang.Class getDataClass() -> getDataClass
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class) -> findForeignFieldType
    boolean isUpdatable() -> isUpdatable
    boolean isTableExists() -> isTableExists
    long countOf() -> countOf
    long countOf(com.j256.ormlite.stmt.PreparedQuery) -> countOf
    void assignEmptyForeignCollection(java.lang.Object,java.lang.String) -> assignEmptyForeignCollection
    com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String) -> getEmptyForeignCollection
    void setObjectCache(boolean) -> setObjectCache
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void setObjectCache(com.j256.ormlite.dao.ObjectCache) -> setObjectCache
    void clearObjectCache() -> clearObjectCache
    java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults) -> mapSelectStarRow
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    boolean idExists(java.lang.Object) -> idExists
    com.j256.ormlite.support.DatabaseConnection startThreadConnection() -> startThreadConnection
    void endThreadConnection(com.j256.ormlite.support.DatabaseConnection) -> endThreadConnection
    void setAutoCommit(boolean) -> setAutoCommit
    void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean) -> setAutoCommit
    boolean isAutoCommit() -> isAutoCommit
    boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection) -> isAutoCommit
    void commit(com.j256.ormlite.support.DatabaseConnection) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection) -> rollBack
    void setObjectFactory(com.j256.ormlite.table.ObjectFactory) -> setObjectFactory
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void logMessage(java.lang.Exception,java.lang.String) -> logMessage
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.j256.ormlite.db.BaseDatabaseType -> com.j256.ormlite.db.BaseDatabaseType:
    java.lang.String DEFAULT_SEQUENCE_SUFFIX -> DEFAULT_SEQUENCE_SUFFIX
    java.sql.Driver driver -> driver
    void <init>() -> <init>
    java.lang.String getDriverClassName() -> getDriverClassName
    void loadDriver() -> loadDriver
    void setDriver(java.sql.Driver) -> setDriver
    void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> appendColumnArg
    void appendStringType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendStringType
    void appendLongStringType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendLongStringType
    void appendDateType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendDateType
    void appendBooleanType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendBooleanType
    void appendCharType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendCharType
    void appendByteType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendByteType
    void appendShortType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendShortType
    void appendIntegerType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendIntegerType
    void appendLongType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendLongType
    void appendFloatType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendFloatType
    void appendDoubleType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendDoubleType
    void appendByteArrayType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendByteArrayType
    void appendSerializableType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendSerializableType
    void appendBigDecimalNumericType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendBigDecimalNumericType
    void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object) -> appendDefaultValue
    void configureGeneratedIdSequence(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List) -> configureGeneratedIdSequence
    void configureGeneratedId(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> configureGeneratedId
    void configureId(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List) -> configureId
    void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addPrimaryKeySql
    boolean generatedIdSqlAtEnd() -> generatedIdSqlAtEnd
    void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addUniqueComboSql
    void dropColumnArg(com.j256.ormlite.field.FieldType,java.util.List,java.util.List) -> dropColumnArg
    void appendEscapedWord(java.lang.StringBuilder,java.lang.String) -> appendEscapedWord
    void appendEscapedEntityName(java.lang.StringBuilder,java.lang.String) -> appendEscapedEntityName
    java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType) -> generateIdSequenceName
    java.lang.String getCommentLinePrefix() -> getCommentLinePrefix
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
    boolean isIdSequenceNeeded() -> isIdSequenceNeeded
    boolean isVarcharFieldWidthSupported() -> isVarcharFieldWidthSupported
    boolean isLimitSqlSupported() -> isLimitSqlSupported
    boolean isOffsetSqlSupported() -> isOffsetSqlSupported
    boolean isOffsetLimitArgument() -> isOffsetLimitArgument
    boolean isLimitAfterSelect() -> isLimitAfterSelect
    void appendLimitValue(java.lang.StringBuilder,long,java.lang.Long) -> appendLimitValue
    void appendOffsetValue(java.lang.StringBuilder,long) -> appendOffsetValue
    void appendSelectNextValFromSequence(java.lang.StringBuilder,java.lang.String) -> appendSelectNextValFromSequence
    void appendCreateTableSuffix(java.lang.StringBuilder) -> appendCreateTableSuffix
    boolean isCreateTableReturnsZero() -> isCreateTableReturnsZero
    boolean isCreateTableReturnsNegative() -> isCreateTableReturnsNegative
    boolean isEntityNamesMustBeUpCase() -> isEntityNamesMustBeUpCase
    boolean isNestedSavePointsSupported() -> isNestedSavePointsSupported
    java.lang.String getPingStatement() -> getPingStatement
    boolean isBatchUseTransaction() -> isBatchUseTransaction
    boolean isTruncateSupported() -> isTruncateSupported
    boolean isCreateIfNotExistsSupported() -> isCreateIfNotExistsSupported
    boolean isCreateIndexIfNotExistsSupported() -> isCreateIndexIfNotExistsSupported
    boolean isSelectSequenceBeforeInsert() -> isSelectSequenceBeforeInsert
    boolean isAllowGeneratedIdInsertSupported() -> isAllowGeneratedIdInsertSupported
    com.j256.ormlite.table.DatabaseTableConfig extractDatabaseTableConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> extractDatabaseTableConfig
    void appendInsertNoColumns(java.lang.StringBuilder) -> appendInsertNoColumns
    void appendCanBeNull(java.lang.StringBuilder,com.j256.ormlite.field.FieldType) -> appendCanBeNull
    void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List) -> addSingleUnique
    void <clinit>() -> <clinit>
com.j256.ormlite.db.BaseDatabaseType$1 -> com.j256.ormlite.db.BaseDatabaseType$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
    void <clinit>() -> <clinit>
com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter -> com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter:
    void <init>() -> <init>
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
com.j256.ormlite.db.BaseSqliteDatabaseType -> com.j256.ormlite.db.BaseSqliteDatabaseType:
    com.j256.ormlite.field.FieldConverter booleanConverter -> booleanConverter
    void <init>() -> <init>
    void appendLongType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendLongType
    void configureGeneratedId(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> configureGeneratedId
    boolean generatedIdSqlAtEnd() -> generatedIdSqlAtEnd
    boolean isVarcharFieldWidthSupported() -> isVarcharFieldWidthSupported
    boolean isCreateTableReturnsZero() -> isCreateTableReturnsZero
    boolean isCreateIfNotExistsSupported() -> isCreateIfNotExistsSupported
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
    void appendInsertNoColumns(java.lang.StringBuilder) -> appendInsertNoColumns
    void <clinit>() -> <clinit>
com.j256.ormlite.db.BaseSqliteDatabaseType$1 -> com.j256.ormlite.db.BaseSqliteDatabaseType$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
    void <clinit>() -> <clinit>
com.j256.ormlite.db.DatabaseType -> com.j256.ormlite.db.DatabaseType:
    boolean isDatabaseUrlThisType(java.lang.String,java.lang.String) -> isDatabaseUrlThisType
    void loadDriver() -> loadDriver
    void setDriver(java.sql.Driver) -> setDriver
    void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> appendColumnArg
    void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addPrimaryKeySql
    void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addUniqueComboSql
    void dropColumnArg(com.j256.ormlite.field.FieldType,java.util.List,java.util.List) -> dropColumnArg
    void appendEscapedEntityName(java.lang.StringBuilder,java.lang.String) -> appendEscapedEntityName
    void appendEscapedWord(java.lang.StringBuilder,java.lang.String) -> appendEscapedWord
    java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType) -> generateIdSequenceName
    java.lang.String getCommentLinePrefix() -> getCommentLinePrefix
    boolean isIdSequenceNeeded() -> isIdSequenceNeeded
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
    boolean isVarcharFieldWidthSupported() -> isVarcharFieldWidthSupported
    boolean isLimitSqlSupported() -> isLimitSqlSupported
    boolean isLimitAfterSelect() -> isLimitAfterSelect
    void appendLimitValue(java.lang.StringBuilder,long,java.lang.Long) -> appendLimitValue
    boolean isOffsetSqlSupported() -> isOffsetSqlSupported
    boolean isOffsetLimitArgument() -> isOffsetLimitArgument
    void appendOffsetValue(java.lang.StringBuilder,long) -> appendOffsetValue
    void appendSelectNextValFromSequence(java.lang.StringBuilder,java.lang.String) -> appendSelectNextValFromSequence
    void appendCreateTableSuffix(java.lang.StringBuilder) -> appendCreateTableSuffix
    boolean isCreateTableReturnsZero() -> isCreateTableReturnsZero
    boolean isCreateTableReturnsNegative() -> isCreateTableReturnsNegative
    boolean isEntityNamesMustBeUpCase() -> isEntityNamesMustBeUpCase
    boolean isNestedSavePointsSupported() -> isNestedSavePointsSupported
    java.lang.String getPingStatement() -> getPingStatement
    boolean isBatchUseTransaction() -> isBatchUseTransaction
    boolean isTruncateSupported() -> isTruncateSupported
    boolean isCreateIfNotExistsSupported() -> isCreateIfNotExistsSupported
    boolean isCreateIndexIfNotExistsSupported() -> isCreateIndexIfNotExistsSupported
    boolean isSelectSequenceBeforeInsert() -> isSelectSequenceBeforeInsert
    boolean isAllowGeneratedIdInsertSupported() -> isAllowGeneratedIdInsertSupported
    java.lang.String getDatabaseName() -> getDatabaseName
    com.j256.ormlite.table.DatabaseTableConfig extractDatabaseTableConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> extractDatabaseTableConfig
    void appendInsertNoColumns(java.lang.StringBuilder) -> appendInsertNoColumns
com.j256.ormlite.db.SqliteAndroidDatabaseType -> com.j256.ormlite.db.SqliteAndroidDatabaseType:
    void <init>() -> <init>
    void loadDriver() -> loadDriver
    boolean isDatabaseUrlThisType(java.lang.String,java.lang.String) -> isDatabaseUrlThisType
    java.lang.String getDriverClassName() -> getDriverClassName
    java.lang.String getDatabaseName() -> getDatabaseName
    void appendDateType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendDateType
    void appendBooleanType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendBooleanType
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
    boolean isNestedSavePointsSupported() -> isNestedSavePointsSupported
    boolean isBatchUseTransaction() -> isBatchUseTransaction
    com.j256.ormlite.table.DatabaseTableConfig extractDatabaseTableConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> extractDatabaseTableConfig
com.j256.ormlite.db.SqliteAndroidDatabaseType$1 -> com.j256.ormlite.db.SqliteAndroidDatabaseType$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
    void <clinit>() -> <clinit>
com.j256.ormlite.field.BaseFieldConverter -> com.j256.ormlite.field.BaseFieldConverter:
    void <init>() -> <init>
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToJava
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    boolean isStreamType() -> isStreamType
com.j256.ormlite.field.DataPersister -> com.j256.ormlite.field.DataPersister:
    java.lang.Class[] getAssociatedClasses() -> getAssociatedClasses
    java.lang.String[] getAssociatedClassNames() -> getAssociatedClassNames
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    boolean isEscapedDefaultValue() -> isEscapedDefaultValue
    boolean isEscapedValue() -> isEscapedValue
    boolean isPrimitive() -> isPrimitive
    boolean isComparable() -> isComparable
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    java.lang.Object generateId() -> generateId
    int getDefaultWidth() -> getDefaultWidth
    boolean dataIsEqual(java.lang.Object,java.lang.Object) -> dataIsEqual
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
com.j256.ormlite.field.DataPersisterManager -> com.j256.ormlite.field.DataPersisterManager:
    com.j256.ormlite.field.DataPersister DEFAULT_ENUM_PERSISTER -> DEFAULT_ENUM_PERSISTER
    java.util.Map builtInMap -> builtInMap
    java.util.List registeredPersisters -> registeredPersisters
    void <init>() -> <init>
    void registerDataPersisters(com.j256.ormlite.field.DataPersister[]) -> registerDataPersisters
    void clear() -> clear
    com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field) -> lookupForField
    void <clinit>() -> <clinit>
com.j256.ormlite.field.DataType -> com.j256.ormlite.field.DataType:
    com.j256.ormlite.field.DataType STRING -> STRING
    com.j256.ormlite.field.DataType LONG_STRING -> LONG_STRING
    com.j256.ormlite.field.DataType STRING_BYTES -> STRING_BYTES
    com.j256.ormlite.field.DataType BOOLEAN -> BOOLEAN
    com.j256.ormlite.field.DataType BOOLEAN_OBJ -> BOOLEAN_OBJ
    com.j256.ormlite.field.DataType DATE -> DATE
    com.j256.ormlite.field.DataType DATE_LONG -> DATE_LONG
    com.j256.ormlite.field.DataType DATE_STRING -> DATE_STRING
    com.j256.ormlite.field.DataType CHAR -> CHAR
    com.j256.ormlite.field.DataType CHAR_OBJ -> CHAR_OBJ
    com.j256.ormlite.field.DataType BYTE -> BYTE
    com.j256.ormlite.field.DataType BYTE_ARRAY -> BYTE_ARRAY
    com.j256.ormlite.field.DataType BYTE_OBJ -> BYTE_OBJ
    com.j256.ormlite.field.DataType SHORT -> SHORT
    com.j256.ormlite.field.DataType SHORT_OBJ -> SHORT_OBJ
    com.j256.ormlite.field.DataType INTEGER -> INTEGER
    com.j256.ormlite.field.DataType INTEGER_OBJ -> INTEGER_OBJ
    com.j256.ormlite.field.DataType LONG -> LONG
    com.j256.ormlite.field.DataType LONG_OBJ -> LONG_OBJ
    com.j256.ormlite.field.DataType FLOAT -> FLOAT
    com.j256.ormlite.field.DataType FLOAT_OBJ -> FLOAT_OBJ
    com.j256.ormlite.field.DataType DOUBLE -> DOUBLE
    com.j256.ormlite.field.DataType DOUBLE_OBJ -> DOUBLE_OBJ
    com.j256.ormlite.field.DataType SERIALIZABLE -> SERIALIZABLE
    com.j256.ormlite.field.DataType ENUM_STRING -> ENUM_STRING
    com.j256.ormlite.field.DataType ENUM_INTEGER -> ENUM_INTEGER
    com.j256.ormlite.field.DataType UUID -> UUID
    com.j256.ormlite.field.DataType BIG_INTEGER -> BIG_INTEGER
    com.j256.ormlite.field.DataType BIG_DECIMAL -> BIG_DECIMAL
    com.j256.ormlite.field.DataType BIG_DECIMAL_NUMERIC -> BIG_DECIMAL_NUMERIC
    com.j256.ormlite.field.DataType DATE_TIME -> DATE_TIME
    com.j256.ormlite.field.DataType SQL_DATE -> SQL_DATE
    com.j256.ormlite.field.DataType TIME_STAMP -> TIME_STAMP
    com.j256.ormlite.field.DataType UNKNOWN -> UNKNOWN
    com.j256.ormlite.field.DataPersister dataPersister -> dataPersister
    com.j256.ormlite.field.DataType[] $VALUES -> $VALUES
    com.j256.ormlite.field.DataType[] values() -> values
    com.j256.ormlite.field.DataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister) -> <init>
    com.j256.ormlite.field.DataPersister getDataPersister() -> getDataPersister
    void <clinit>() -> <clinit>
com.j256.ormlite.field.DatabaseField -> com.j256.ormlite.field.DatabaseField:
    java.lang.String DEFAULT_STRING -> DEFAULT_STRING
    int NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED -> NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED
    int DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL -> DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL
    java.lang.String columnName() -> columnName
    com.j256.ormlite.field.DataType dataType() -> dataType
    java.lang.String defaultValue() -> defaultValue
    int width() -> width
    boolean canBeNull() -> canBeNull
    boolean id() -> id
    boolean generatedId() -> generatedId
    java.lang.String generatedIdSequence() -> generatedIdSequence
    boolean foreign() -> foreign
    boolean useGetSet() -> useGetSet
    java.lang.String unknownEnumName() -> unknownEnumName
    boolean throwIfNull() -> throwIfNull
    boolean persisted() -> persisted
    java.lang.String format() -> format
    boolean unique() -> unique
    boolean uniqueCombo() -> uniqueCombo
    boolean index() -> index
    boolean uniqueIndex() -> uniqueIndex
    java.lang.String indexName() -> indexName
    java.lang.String uniqueIndexName() -> uniqueIndexName
    boolean foreignAutoRefresh() -> foreignAutoRefresh
    int maxForeignAutoRefreshLevel() -> maxForeignAutoRefreshLevel
    java.lang.Class persisterClass() -> persisterClass
    boolean allowGeneratedIdInsert() -> allowGeneratedIdInsert
    java.lang.String columnDefinition() -> columnDefinition
    boolean foreignAutoCreate() -> foreignAutoCreate
    boolean version() -> version
    java.lang.String foreignColumnName() -> foreignColumnName
    boolean readOnly() -> readOnly
com.j256.ormlite.field.DatabaseFieldConfig -> com.j256.ormlite.field.DatabaseFieldConfig:
    int DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL -> DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL
    java.lang.Class DEFAULT_PERSISTER_CLASS -> DEFAULT_PERSISTER_CLASS
    com.j256.ormlite.field.DataType DEFAULT_DATA_TYPE -> DEFAULT_DATA_TYPE
    boolean DEFAULT_CAN_BE_NULL -> DEFAULT_CAN_BE_NULL
    boolean DEFAULT_FOREIGN_COLLECTION_ORDER_ASCENDING -> DEFAULT_FOREIGN_COLLECTION_ORDER_ASCENDING
    java.lang.String fieldName -> fieldName
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.DataType dataType -> dataType
    com.j256.ormlite.field.DataPersister dataPersister -> dataPersister
    java.lang.String defaultValue -> defaultValue
    int width -> width
    boolean canBeNull -> canBeNull
    boolean id -> id
    boolean generatedId -> generatedId
    java.lang.String generatedIdSequence -> generatedIdSequence
    boolean foreign -> foreign
    com.j256.ormlite.table.DatabaseTableConfig foreignTableConfig -> foreignTableConfig
    boolean useGetSet -> useGetSet
    java.lang.Enum unknownEnumValue -> unknownEnumValue
    boolean throwIfNull -> throwIfNull
    boolean persisted -> persisted
    java.lang.String format -> format
    boolean unique -> unique
    boolean uniqueCombo -> uniqueCombo
    boolean index -> index
    java.lang.String indexName -> indexName
    boolean uniqueIndex -> uniqueIndex
    java.lang.String uniqueIndexName -> uniqueIndexName
    boolean foreignAutoRefresh -> foreignAutoRefresh
    int maxForeignAutoRefreshLevel -> maxForeignAutoRefreshLevel
    java.lang.Class persisterClass -> persisterClass
    boolean allowGeneratedIdInsert -> allowGeneratedIdInsert
    java.lang.String columnDefinition -> columnDefinition
    boolean foreignAutoCreate -> foreignAutoCreate
    boolean version -> version
    java.lang.String foreignColumnName -> foreignColumnName
    boolean readOnly -> readOnly
    boolean foreignCollection -> foreignCollection
    boolean foreignCollectionEager -> foreignCollectionEager
    int foreignCollectionMaxEagerLevel -> foreignCollectionMaxEagerLevel
    java.lang.String foreignCollectionColumnName -> foreignCollectionColumnName
    java.lang.String foreignCollectionOrderColumnName -> foreignCollectionOrderColumnName
    boolean foreignCollectionOrderAscending -> foreignCollectionOrderAscending
    java.lang.String foreignCollectionForeignFieldName -> foreignCollectionForeignFieldName
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,com.j256.ormlite.field.DataType,java.lang.String,int,boolean,boolean,boolean,java.lang.String,boolean,com.j256.ormlite.table.DatabaseTableConfig,boolean,java.lang.Enum,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,int,int) -> <init>
    java.lang.String getFieldName() -> getFieldName
    void setFieldName(java.lang.String) -> setFieldName
    java.lang.String getColumnName() -> getColumnName
    void setColumnName(java.lang.String) -> setColumnName
    com.j256.ormlite.field.DataType getDataType() -> getDataType
    void setDataType(com.j256.ormlite.field.DataType) -> setDataType
    com.j256.ormlite.field.DataPersister getDataPersister() -> getDataPersister
    void setDataPersister(com.j256.ormlite.field.DataPersister) -> setDataPersister
    java.lang.String getDefaultValue() -> getDefaultValue
    void setDefaultValue(java.lang.String) -> setDefaultValue
    int getWidth() -> getWidth
    void setWidth(int) -> setWidth
    boolean isCanBeNull() -> isCanBeNull
    void setCanBeNull(boolean) -> setCanBeNull
    boolean isId() -> isId
    void setId(boolean) -> setId
    boolean isGeneratedId() -> isGeneratedId
    void setGeneratedId(boolean) -> setGeneratedId
    java.lang.String getGeneratedIdSequence() -> getGeneratedIdSequence
    void setGeneratedIdSequence(java.lang.String) -> setGeneratedIdSequence
    boolean isForeign() -> isForeign
    void setForeign(boolean) -> setForeign
    com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig() -> getForeignTableConfig
    void setForeignTableConfig(com.j256.ormlite.table.DatabaseTableConfig) -> setForeignTableConfig
    boolean isUseGetSet() -> isUseGetSet
    void setUseGetSet(boolean) -> setUseGetSet
    java.lang.Enum getUnknownEnumValue() -> getUnknownEnumValue
    void setUnknownEnumValue(java.lang.Enum) -> setUnknownEnumValue
    boolean isThrowIfNull() -> isThrowIfNull
    void setThrowIfNull(boolean) -> setThrowIfNull
    boolean isPersisted() -> isPersisted
    void setPersisted(boolean) -> setPersisted
    java.lang.String getFormat() -> getFormat
    void setFormat(java.lang.String) -> setFormat
    boolean isUnique() -> isUnique
    void setUnique(boolean) -> setUnique
    boolean isUniqueCombo() -> isUniqueCombo
    void setUniqueCombo(boolean) -> setUniqueCombo
    boolean isIndex() -> isIndex
    void setIndex(boolean) -> setIndex
    java.lang.String getIndexName(java.lang.String) -> getIndexName
    void setIndexName(java.lang.String) -> setIndexName
    boolean isUniqueIndex() -> isUniqueIndex
    void setUniqueIndex(boolean) -> setUniqueIndex
    java.lang.String getUniqueIndexName(java.lang.String) -> getUniqueIndexName
    void setUniqueIndexName(java.lang.String) -> setUniqueIndexName
    void setForeignAutoRefresh(boolean) -> setForeignAutoRefresh
    boolean isForeignAutoRefresh() -> isForeignAutoRefresh
    int getMaxForeignAutoRefreshLevel() -> getMaxForeignAutoRefreshLevel
    void setMaxForeignAutoRefreshLevel(int) -> setMaxForeignAutoRefreshLevel
    boolean isForeignCollection() -> isForeignCollection
    void setForeignCollection(boolean) -> setForeignCollection
    boolean isForeignCollectionEager() -> isForeignCollectionEager
    void setForeignCollectionEager(boolean) -> setForeignCollectionEager
    int getForeignCollectionMaxEagerLevel() -> getForeignCollectionMaxEagerLevel
    void setForeignCollectionMaxEagerLevel(int) -> setForeignCollectionMaxEagerLevel
    void setMaxEagerForeignCollectionLevel(int) -> setMaxEagerForeignCollectionLevel
    void setForeignCollectionMaxEagerForeignCollectionLevel(int) -> setForeignCollectionMaxEagerForeignCollectionLevel
    java.lang.String getForeignCollectionColumnName() -> getForeignCollectionColumnName
    void setForeignCollectionColumnName(java.lang.String) -> setForeignCollectionColumnName
    java.lang.String getForeignCollectionOrderColumnName() -> getForeignCollectionOrderColumnName
    void setForeignCollectionOrderColumn(java.lang.String) -> setForeignCollectionOrderColumn
    void setForeignCollectionOrderColumnName(java.lang.String) -> setForeignCollectionOrderColumnName
    boolean isForeignCollectionOrderAscending() -> isForeignCollectionOrderAscending
    void setForeignCollectionOrderAscending(boolean) -> setForeignCollectionOrderAscending
    java.lang.String getForeignCollectionForeignFieldName() -> getForeignCollectionForeignFieldName
    void setForeignCollectionForeignColumnName(java.lang.String) -> setForeignCollectionForeignColumnName
    void setForeignCollectionForeignFieldName(java.lang.String) -> setForeignCollectionForeignFieldName
    java.lang.Class getPersisterClass() -> getPersisterClass
    void setPersisterClass(java.lang.Class) -> setPersisterClass
    boolean isAllowGeneratedIdInsert() -> isAllowGeneratedIdInsert
    void setAllowGeneratedIdInsert(boolean) -> setAllowGeneratedIdInsert
    java.lang.String getColumnDefinition() -> getColumnDefinition
    void setColumnDefinition(java.lang.String) -> setColumnDefinition
    boolean isForeignAutoCreate() -> isForeignAutoCreate
    void setForeignAutoCreate(boolean) -> setForeignAutoCreate
    boolean isVersion() -> isVersion
    void setVersion(boolean) -> setVersion
    java.lang.String getForeignColumnName() -> getForeignColumnName
    void setForeignColumnName(java.lang.String) -> setForeignColumnName
    boolean isReadOnly() -> isReadOnly
    void setReadOnly(boolean) -> setReadOnly
    com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field) -> fromField
    java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean) -> findGetMethod
    java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean) -> findSetMethod
    com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField) -> fromDatabaseField
    void postProcess() -> postProcess
    java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String) -> findMatchingEnumVal
    com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField) -> fromForeignCollection
    java.lang.String findIndexName(java.lang.String) -> findIndexName
    java.lang.String valueIfNotBlank(java.lang.String) -> valueIfNotBlank
    java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String) -> methodFromField
    void <clinit>() -> <clinit>
com.j256.ormlite.field.DatabaseFieldConfigLoader -> com.j256.ormlite.field.DatabaseFieldConfigLoader:
    java.lang.String CONFIG_FILE_START_MARKER -> CONFIG_FILE_START_MARKER
    java.lang.String CONFIG_FILE_END_MARKER -> CONFIG_FILE_END_MARKER
    int DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL -> DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL
    com.j256.ormlite.field.DataPersister DEFAULT_DATA_PERSISTER -> DEFAULT_DATA_PERSISTER
    java.lang.String FIELD_NAME_FIELD_NAME -> FIELD_NAME_FIELD_NAME
    java.lang.String FIELD_NAME_COLUMN_NAME -> FIELD_NAME_COLUMN_NAME
    java.lang.String FIELD_NAME_DATA_PERSISTER -> FIELD_NAME_DATA_PERSISTER
    java.lang.String FIELD_NAME_DEFAULT_VALUE -> FIELD_NAME_DEFAULT_VALUE
    java.lang.String FIELD_NAME_WIDTH -> FIELD_NAME_WIDTH
    java.lang.String FIELD_NAME_CAN_BE_NULL -> FIELD_NAME_CAN_BE_NULL
    java.lang.String FIELD_NAME_ID -> FIELD_NAME_ID
    java.lang.String FIELD_NAME_GENERATED_ID -> FIELD_NAME_GENERATED_ID
    java.lang.String FIELD_NAME_GENERATED_ID_SEQUENCE -> FIELD_NAME_GENERATED_ID_SEQUENCE
    java.lang.String FIELD_NAME_FOREIGN -> FIELD_NAME_FOREIGN
    java.lang.String FIELD_NAME_USE_GET_SET -> FIELD_NAME_USE_GET_SET
    java.lang.String FIELD_NAME_UNKNOWN_ENUM_VALUE -> FIELD_NAME_UNKNOWN_ENUM_VALUE
    java.lang.String FIELD_NAME_THROW_IF_NULL -> FIELD_NAME_THROW_IF_NULL
    java.lang.String FIELD_NAME_FORMAT -> FIELD_NAME_FORMAT
    java.lang.String FIELD_NAME_UNIQUE -> FIELD_NAME_UNIQUE
    java.lang.String FIELD_NAME_UNIQUE_COMBO -> FIELD_NAME_UNIQUE_COMBO
    java.lang.String FIELD_NAME_INDEX -> FIELD_NAME_INDEX
    java.lang.String FIELD_NAME_INDEX_NAME -> FIELD_NAME_INDEX_NAME
    java.lang.String FIELD_NAME_UNIQUE_INDEX -> FIELD_NAME_UNIQUE_INDEX
    java.lang.String FIELD_NAME_UNIQUE_INDEX_NAME -> FIELD_NAME_UNIQUE_INDEX_NAME
    java.lang.String FIELD_NAME_FOREIGN_AUTO_REFRESH -> FIELD_NAME_FOREIGN_AUTO_REFRESH
    java.lang.String FIELD_NAME_MAX_FOREIGN_AUTO_REFRESH_LEVEL -> FIELD_NAME_MAX_FOREIGN_AUTO_REFRESH_LEVEL
    java.lang.String FIELD_NAME_PERSISTER_CLASS -> FIELD_NAME_PERSISTER_CLASS
    java.lang.String FIELD_NAME_ALLOW_GENERATED_ID_INSERT -> FIELD_NAME_ALLOW_GENERATED_ID_INSERT
    java.lang.String FIELD_NAME_COLUMN_DEFINITION -> FIELD_NAME_COLUMN_DEFINITION
    java.lang.String FIELD_NAME_FOREIGN_AUTO_CREATE -> FIELD_NAME_FOREIGN_AUTO_CREATE
    java.lang.String FIELD_NAME_VERSION -> FIELD_NAME_VERSION
    java.lang.String FIELD_NAME_FOREIGN_COLUMN_NAME -> FIELD_NAME_FOREIGN_COLUMN_NAME
    java.lang.String FIELD_NAME_READ_ONLY -> FIELD_NAME_READ_ONLY
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION -> FIELD_NAME_FOREIGN_COLLECTION
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_EAGER -> FIELD_NAME_FOREIGN_COLLECTION_EAGER
    java.lang.String FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL_OLD -> FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL_OLD
    java.lang.String FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL -> FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_COLUMN_NAME -> FIELD_NAME_FOREIGN_COLLECTION_COLUMN_NAME
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME_OLD -> FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME_OLD
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME -> FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_ORDER_ASCENDING -> FIELD_NAME_FOREIGN_COLLECTION_ORDER_ASCENDING
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME_OLD -> FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME_OLD
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME -> FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME
    void <init>() -> <init>
    com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader) -> fromReader
    void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String) -> write
    void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String) -> writeConfig
    void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String) -> readField
    void <clinit>() -> <clinit>
com.j256.ormlite.field.FieldConverter -> com.j256.ormlite.field.FieldConverter:
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToJava
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    boolean isStreamType() -> isStreamType
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
com.j256.ormlite.field.FieldType -> com.j256.ormlite.field.FieldType:
    java.lang.String FOREIGN_ID_FIELD_SUFFIX -> FOREIGN_ID_FIELD_SUFFIX
    boolean DEFAULT_VALUE_BOOLEAN -> DEFAULT_VALUE_BOOLEAN
    byte DEFAULT_VALUE_BYTE -> DEFAULT_VALUE_BYTE
    char DEFAULT_VALUE_CHAR -> DEFAULT_VALUE_CHAR
    short DEFAULT_VALUE_SHORT -> DEFAULT_VALUE_SHORT
    int DEFAULT_VALUE_INT -> DEFAULT_VALUE_INT
    long DEFAULT_VALUE_LONG -> DEFAULT_VALUE_LONG
    float DEFAULT_VALUE_FLOAT -> DEFAULT_VALUE_FLOAT
    double DEFAULT_VALUE_DOUBLE -> DEFAULT_VALUE_DOUBLE
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    java.lang.String tableName -> tableName
    java.lang.reflect.Field field -> field
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.DatabaseFieldConfig fieldConfig -> fieldConfig
    boolean isId -> isId
    boolean isGeneratedId -> isGeneratedId
    java.lang.String generatedIdSequence -> generatedIdSequence
    java.lang.reflect.Method fieldGetMethod -> fieldGetMethod
    java.lang.reflect.Method fieldSetMethod -> fieldSetMethod
    java.lang.Class parentClass -> parentClass
    com.j256.ormlite.field.DataPersister dataPersister -> dataPersister
    java.lang.Object defaultValue -> defaultValue
    java.lang.Object dataTypeConfigObj -> dataTypeConfigObj
    com.j256.ormlite.field.FieldConverter fieldConverter -> fieldConverter
    com.j256.ormlite.field.FieldType foreignIdField -> foreignIdField
    com.j256.ormlite.table.TableInfo foreignTableInfo -> foreignTableInfo
    com.j256.ormlite.field.FieldType foreignFieldType -> foreignFieldType
    com.j256.ormlite.dao.BaseDaoImpl foreignDao -> foreignDao
    com.j256.ormlite.stmt.mapped.MappedQueryForId mappedQueryForId -> mappedQueryForId
    java.lang.ThreadLocal threadLevelCounters -> threadLevelCounters
    void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class) -> <init>
    void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> configDaoInformation
    java.lang.reflect.Field getField() -> getField
    java.lang.String getTableName() -> getTableName
    java.lang.String getFieldName() -> getFieldName
    java.lang.Class getType() -> getType
    java.lang.String getColumnName() -> getColumnName
    com.j256.ormlite.field.DataPersister getDataPersister() -> getDataPersister
    java.lang.Object getDataTypeConfigObj() -> getDataTypeConfigObj
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.Object getDefaultValue() -> getDefaultValue
    int getWidth() -> getWidth
    boolean isCanBeNull() -> isCanBeNull
    boolean isId() -> isId
    boolean isGeneratedId() -> isGeneratedId
    boolean isGeneratedIdSequence() -> isGeneratedIdSequence
    java.lang.String getGeneratedIdSequence() -> getGeneratedIdSequence
    boolean isForeign() -> isForeign
    void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache) -> assignField
    java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache) -> assignIdValue
    java.lang.Object extractRawJavaFieldValue(java.lang.Object) -> extractRawJavaFieldValue
    java.lang.Object extractJavaFieldValue(java.lang.Object) -> extractJavaFieldValue
    java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object) -> extractJavaFieldToSqlArgValue
    java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object) -> convertJavaFieldToSqlArgValue
    java.lang.Object convertStringToJavaField(java.lang.String,int) -> convertStringToJavaField
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    com.j256.ormlite.field.FieldType getForeignIdField() -> getForeignIdField
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Enum getUnknownEnumVal() -> getUnknownEnumVal
    java.lang.String getFormat() -> getFormat
    boolean isUnique() -> isUnique
    boolean isUniqueCombo() -> isUniqueCombo
    java.lang.String getIndexName() -> getIndexName
    java.lang.String getUniqueIndexName() -> getUniqueIndexName
    boolean isEscapedDefaultValue() -> isEscapedDefaultValue
    boolean isComparable() -> isComparable
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean isForeignCollection() -> isForeignCollection
    com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object) -> buildForeignCollection
    java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map) -> resultToJava
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    boolean isAllowGeneratedIdInsert() -> isAllowGeneratedIdInsert
    java.lang.String getColumnDefinition() -> getColumnDefinition
    boolean isForeignAutoCreate() -> isForeignAutoCreate
    boolean isVersion() -> isVersion
    java.lang.Object generateId() -> generateId
    boolean isReadOnly() -> isReadOnly
    java.lang.Object getFieldValueIfNotDefault(java.lang.Object) -> getFieldValueIfNotDefault
    boolean isObjectsFieldValueDefault(java.lang.Object) -> isObjectsFieldValueDefault
    java.lang.Object getJavaDefaultValueDefault() -> getJavaDefaultValueDefault
    int createWithForeignDao(java.lang.Object) -> createWithForeignDao
    com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class) -> createFieldType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isFieldValueDefault(java.lang.Object) -> isFieldValueDefault
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl) -> findForeignFieldType
    void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister) -> assignDataType
    void <clinit>() -> <clinit>
com.j256.ormlite.field.FieldType$1 -> com.j256.ormlite.field.FieldType$1:
    void <init>() -> <init>
    com.j256.ormlite.field.FieldType$LevelCounters initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.field.FieldType$LevelCounters -> com.j256.ormlite.field.FieldType$LevelCounters:
    int autoRefreshLevel -> autoRefreshLevel
    int autoRefreshLevelMax -> autoRefreshLevelMax
    int foreignCollectionLevel -> foreignCollectionLevel
    int foreignCollectionLevelMax -> foreignCollectionLevelMax
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.FieldType$1) -> <init>
com.j256.ormlite.field.ForeignCollectionField -> com.j256.ormlite.field.ForeignCollectionField:
    int MAX_EAGER_LEVEL -> MAX_EAGER_LEVEL
    boolean eager() -> eager
    int maxEagerForeignCollectionLevel() -> maxEagerForeignCollectionLevel
    int maxEagerLevel() -> maxEagerLevel
    java.lang.String columnName() -> columnName
    java.lang.String orderColumnName() -> orderColumnName
    boolean orderAscending() -> orderAscending
    java.lang.String foreignColumnName() -> foreignColumnName
    java.lang.String foreignFieldName() -> foreignFieldName
com.j256.ormlite.field.SqlType -> com.j256.ormlite.field.SqlType:
    com.j256.ormlite.field.SqlType STRING -> STRING
    com.j256.ormlite.field.SqlType LONG_STRING -> LONG_STRING
    com.j256.ormlite.field.SqlType DATE -> DATE
    com.j256.ormlite.field.SqlType BOOLEAN -> BOOLEAN
    com.j256.ormlite.field.SqlType CHAR -> CHAR
    com.j256.ormlite.field.SqlType BYTE -> BYTE
    com.j256.ormlite.field.SqlType BYTE_ARRAY -> BYTE_ARRAY
    com.j256.ormlite.field.SqlType SHORT -> SHORT
    com.j256.ormlite.field.SqlType INTEGER -> INTEGER
    com.j256.ormlite.field.SqlType LONG -> LONG
    com.j256.ormlite.field.SqlType FLOAT -> FLOAT
    com.j256.ormlite.field.SqlType DOUBLE -> DOUBLE
    com.j256.ormlite.field.SqlType SERIALIZABLE -> SERIALIZABLE
    com.j256.ormlite.field.SqlType BLOB -> BLOB
    com.j256.ormlite.field.SqlType BIG_DECIMAL -> BIG_DECIMAL
    com.j256.ormlite.field.SqlType OTHER -> OTHER
    com.j256.ormlite.field.SqlType UNKNOWN -> UNKNOWN
    com.j256.ormlite.field.SqlType[] $VALUES -> $VALUES
    com.j256.ormlite.field.SqlType[] values() -> values
    com.j256.ormlite.field.SqlType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.BaseDataType -> com.j256.ormlite.field.types.BaseDataType:
    com.j256.ormlite.field.SqlType sqlType -> sqlType
    java.lang.Class[] classes -> classes
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.Class[] getAssociatedClasses() -> getAssociatedClasses
    java.lang.String[] getAssociatedClassNames() -> getAssociatedClassNames
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isEscapedDefaultValue() -> isEscapedDefaultValue
    boolean isEscapedValue() -> isEscapedValue
    boolean isPrimitive() -> isPrimitive
    boolean isComparable() -> isComparable
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    java.lang.Object generateId() -> generateId
    int getDefaultWidth() -> getDefaultWidth
    boolean dataIsEqual(java.lang.Object,java.lang.Object) -> dataIsEqual
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
com.j256.ormlite.field.types.BaseDateType -> com.j256.ormlite.field.types.BaseDateType:
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig -> defaultDateFormatConfig
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig) -> convertDateStringConfig
    java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String) -> parseDateString
    java.lang.String normalizeDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String) -> normalizeDateString
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig -> com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig:
    java.lang.ThreadLocal threadLocal -> threadLocal
    java.lang.String dateFormatStr -> dateFormatStr
    void <init>(java.lang.String) -> <init>
    java.text.DateFormat getDateFormat() -> getDateFormat
    java.lang.String toString() -> toString
com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig$1 -> com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig$1:
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig this$0 -> this$0
    void <init>(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig) -> <init>
    java.text.DateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.field.types.BaseEnumType -> com.j256.ormlite.field.types.BaseEnumType:
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum) -> enumVal
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
com.j256.ormlite.field.types.BigDecimalNumericType -> com.j256.ormlite.field.types.BigDecimalNumericType:
    com.j256.ormlite.field.types.BigDecimalNumericType singleTon -> singleTon
    com.j256.ormlite.field.types.BigDecimalNumericType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isAppropriateId() -> isAppropriateId
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.BigDecimalStringType -> com.j256.ormlite.field.types.BigDecimalStringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.BigDecimalStringType singleTon -> singleTon
    com.j256.ormlite.field.types.BigDecimalStringType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    int getDefaultWidth() -> getDefaultWidth
    boolean isAppropriateId() -> isAppropriateId
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.BigIntegerType -> com.j256.ormlite.field.types.BigIntegerType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.BigIntegerType singleTon -> singleTon
    com.j256.ormlite.field.types.BigIntegerType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    int getDefaultWidth() -> getDefaultWidth
    boolean isAppropriateId() -> isAppropriateId
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.BooleanObjectType -> com.j256.ormlite.field.types.BooleanObjectType:
    com.j256.ormlite.field.types.BooleanObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.BooleanObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    boolean isAppropriateId() -> isAppropriateId
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.BooleanType -> com.j256.ormlite.field.types.BooleanType:
    com.j256.ormlite.field.types.BooleanType singleTon -> singleTon
    com.j256.ormlite.field.types.BooleanType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.ByteArrayType -> com.j256.ormlite.field.types.ByteArrayType:
    com.j256.ormlite.field.types.ByteArrayType singleTon -> singleTon
    com.j256.ormlite.field.types.ByteArrayType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean dataIsEqual(java.lang.Object,java.lang.Object) -> dataIsEqual
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.ByteObjectType -> com.j256.ormlite.field.types.ByteObjectType:
    com.j256.ormlite.field.types.ByteObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.ByteObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.ByteType -> com.j256.ormlite.field.types.ByteType:
    com.j256.ormlite.field.types.ByteType singleTon -> singleTon
    com.j256.ormlite.field.types.ByteType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.CharType -> com.j256.ormlite.field.types.CharType:
    com.j256.ormlite.field.types.CharType singleTon -> singleTon
    com.j256.ormlite.field.types.CharType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.CharacterObjectType -> com.j256.ormlite.field.types.CharacterObjectType:
    com.j256.ormlite.field.types.CharacterObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.CharacterObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.DateLongType -> com.j256.ormlite.field.types.DateLongType:
    com.j256.ormlite.field.types.DateLongType singleTon -> singleTon
    com.j256.ormlite.field.types.DateLongType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.DateStringType -> com.j256.ormlite.field.types.DateStringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.DateStringType singleTon -> singleTon
    com.j256.ormlite.field.types.DateStringType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    int getDefaultWidth() -> getDefaultWidth
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.DateTimeType -> com.j256.ormlite.field.types.DateTimeType:
    com.j256.ormlite.field.types.DateTimeType singleTon -> singleTon
    java.lang.Class dateTimeClass -> dateTimeClass
    java.lang.reflect.Method getMillisMethod -> getMillisMethod
    java.lang.reflect.Constructor millisConstructor -> millisConstructor
    java.lang.String[] associatedClassNames -> associatedClassNames
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    com.j256.ormlite.field.types.DateTimeType getSingleton() -> getSingleton
    java.lang.String[] getAssociatedClassNames() -> getAssociatedClassNames
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    boolean isEscapedValue() -> isEscapedValue
    boolean isAppropriateId() -> isAppropriateId
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    java.lang.reflect.Method getMillisMethod() -> getMillisMethod
    java.lang.reflect.Constructor getConstructor() -> getConstructor
    java.lang.Class getDateTimeClass() -> getDateTimeClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.DateType -> com.j256.ormlite.field.types.DateType:
    com.j256.ormlite.field.types.DateType singleTon -> singleTon
    com.j256.ormlite.field.types.DateType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig() -> getDefaultDateFormatConfig
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.DoubleObjectType -> com.j256.ormlite.field.types.DoubleObjectType:
    com.j256.ormlite.field.types.DoubleObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.DoubleObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.DoubleType -> com.j256.ormlite.field.types.DoubleType:
    com.j256.ormlite.field.types.DoubleType singleTon -> singleTon
    com.j256.ormlite.field.types.DoubleType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.EnumIntegerType -> com.j256.ormlite.field.types.EnumIntegerType:
    com.j256.ormlite.field.types.EnumIntegerType singleTon -> singleTon
    com.j256.ormlite.field.types.EnumIntegerType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.EnumStringType -> com.j256.ormlite.field.types.EnumStringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.EnumStringType singleTon -> singleTon
    com.j256.ormlite.field.types.EnumStringType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    int getDefaultWidth() -> getDefaultWidth
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.FloatObjectType -> com.j256.ormlite.field.types.FloatObjectType:
    com.j256.ormlite.field.types.FloatObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.FloatObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    boolean isEscapedValue() -> isEscapedValue
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.FloatType -> com.j256.ormlite.field.types.FloatType:
    com.j256.ormlite.field.types.FloatType singleTon -> singleTon
    com.j256.ormlite.field.types.FloatType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.IntType -> com.j256.ormlite.field.types.IntType:
    com.j256.ormlite.field.types.IntType singleTon -> singleTon
    com.j256.ormlite.field.types.IntType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.IntegerObjectType -> com.j256.ormlite.field.types.IntegerObjectType:
    com.j256.ormlite.field.types.IntegerObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.IntegerObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isEscapedValue() -> isEscapedValue
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.LongObjectType -> com.j256.ormlite.field.types.LongObjectType:
    com.j256.ormlite.field.types.LongObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.LongObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isEscapedValue() -> isEscapedValue
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.LongStringType -> com.j256.ormlite.field.types.LongStringType:
    com.j256.ormlite.field.types.LongStringType singleTon -> singleTon
    com.j256.ormlite.field.types.LongStringType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isAppropriateId() -> isAppropriateId
    int getDefaultWidth() -> getDefaultWidth
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.LongType -> com.j256.ormlite.field.types.LongType:
    com.j256.ormlite.field.types.LongType singleTon -> singleTon
    com.j256.ormlite.field.types.LongType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.SerializableType -> com.j256.ormlite.field.types.SerializableType:
    com.j256.ormlite.field.types.SerializableType singleTon -> singleTon
    com.j256.ormlite.field.types.SerializableType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    boolean isStreamType() -> isStreamType
    boolean isComparable() -> isComparable
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.ShortObjectType -> com.j256.ormlite.field.types.ShortObjectType:
    com.j256.ormlite.field.types.ShortObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.ShortObjectType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.ShortType -> com.j256.ormlite.field.types.ShortType:
    com.j256.ormlite.field.types.ShortType singleTon -> singleTon
    com.j256.ormlite.field.types.ShortType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.SqlDateType -> com.j256.ormlite.field.types.SqlDateType:
    com.j256.ormlite.field.types.SqlDateType singleTon -> singleTon
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig sqlDateFormatConfig -> sqlDateFormatConfig
    com.j256.ormlite.field.types.SqlDateType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig() -> getDefaultDateFormatConfig
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.StringBytesType -> com.j256.ormlite.field.types.StringBytesType:
    java.lang.String DEFAULT_STRING_BYTES_CHARSET_NAME -> DEFAULT_STRING_BYTES_CHARSET_NAME
    com.j256.ormlite.field.types.StringBytesType singleTon -> singleTon
    com.j256.ormlite.field.types.StringBytesType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    java.lang.String getCharsetName(com.j256.ormlite.field.FieldType) -> getCharsetName
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.StringType -> com.j256.ormlite.field.types.StringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.StringType singleTon -> singleTon
    com.j256.ormlite.field.types.StringType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    int getDefaultWidth() -> getDefaultWidth
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.TimeStampType -> com.j256.ormlite.field.types.TimeStampType:
    com.j256.ormlite.field.types.TimeStampType singleTon -> singleTon
    com.j256.ormlite.field.types.TimeStampType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.UuidType -> com.j256.ormlite.field.types.UuidType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.UuidType singleTon -> singleTon
    com.j256.ormlite.field.types.UuidType getSingleton() -> getSingleton
    void <init>() -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[]) -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    java.lang.Object generateId() -> generateId
    int getDefaultWidth() -> getDefaultWidth
    void <clinit>() -> <clinit>
com.j256.ormlite.field.types.VoidType -> com.j256.ormlite.field.types.VoidType:
    void <init>() -> <init>
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
com.j256.ormlite.logger.LocalLog -> com.j256.ormlite.logger.LocalLog:
    java.lang.String LOCAL_LOG_LEVEL_PROPERTY -> LOCAL_LOG_LEVEL_PROPERTY
    java.lang.String LOCAL_LOG_FILE_PROPERTY -> LOCAL_LOG_FILE_PROPERTY
    java.lang.String LOCAL_LOG_PROPERTIES_FILE -> LOCAL_LOG_PROPERTIES_FILE
    com.j256.ormlite.logger.Log$Level DEFAULT_LEVEL -> DEFAULT_LEVEL
    java.lang.ThreadLocal dateFormatThreadLocal -> dateFormatThreadLocal
    java.io.PrintStream printStream -> printStream
    java.util.List classLevels -> classLevels
    java.lang.String className -> className
    com.j256.ormlite.logger.Log$Level level -> level
    void <init>(java.lang.String) -> <init>
    void openLogFile(java.lang.String) -> openLogFile
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> log
    void flush() -> flush
    java.util.List readLevelResourceFile(java.io.InputStream) -> readLevelResourceFile
    java.util.List configureClassLevels(java.io.InputStream) -> configureClassLevels
    void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> printMessage
    void <clinit>() -> <clinit>
com.j256.ormlite.logger.LocalLog$1 -> com.j256.ormlite.logger.LocalLog$1:
    void <init>() -> <init>
    java.text.DateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.logger.LocalLog$PatternLevel -> com.j256.ormlite.logger.LocalLog$PatternLevel:
    java.util.regex.Pattern pattern -> pattern
    com.j256.ormlite.logger.Log$Level level -> level
    void <init>(java.util.regex.Pattern,com.j256.ormlite.logger.Log$Level) -> <init>
com.j256.ormlite.logger.Log -> com.j256.ormlite.logger.Log:
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> log
com.j256.ormlite.logger.Log$Level -> com.j256.ormlite.logger.Log$Level:
    com.j256.ormlite.logger.Log$Level TRACE -> TRACE
    com.j256.ormlite.logger.Log$Level DEBUG -> DEBUG
    com.j256.ormlite.logger.Log$Level INFO -> INFO
    com.j256.ormlite.logger.Log$Level WARNING -> WARNING
    com.j256.ormlite.logger.Log$Level ERROR -> ERROR
    com.j256.ormlite.logger.Log$Level FATAL -> FATAL
    int level -> level
    com.j256.ormlite.logger.Log$Level[] $VALUES -> $VALUES
    com.j256.ormlite.logger.Log$Level[] values() -> values
    com.j256.ormlite.logger.Log$Level valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean isEnabled(com.j256.ormlite.logger.Log$Level) -> isEnabled
    void <clinit>() -> <clinit>
com.j256.ormlite.logger.Logger -> com.j256.ormlite.logger.Logger:
    java.lang.String ARG_STRING -> ARG_STRING
    int ARG_STRING_LENGTH -> ARG_STRING_LENGTH
    java.lang.Object UNKNOWN_ARG -> UNKNOWN_ARG
    com.j256.ormlite.logger.Log log -> log
    void <init>(com.j256.ormlite.logger.Log) -> <init>
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.Throwable,java.lang.String) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> trace
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.Throwable,java.lang.String) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.Throwable,java.lang.String) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.Throwable,java.lang.String) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.Throwable,java.lang.String) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> error
    void fatal(java.lang.String) -> fatal
    void fatal(java.lang.String,java.lang.Object) -> fatal
    void fatal(java.lang.String,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.String,java.lang.Object[]) -> fatal
    void fatal(java.lang.Throwable,java.lang.String) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> fatal
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object[]) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> log
    void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> innerLog
    java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> buildFullMessage
    void appendArg(java.lang.StringBuilder,java.lang.Object) -> appendArg
    void <clinit>() -> <clinit>
com.j256.ormlite.logger.LoggerFactory -> com.j256.ormlite.logger.LoggerFactory:
    java.lang.String LOG_TYPE_SYSTEM_PROPERTY -> LOG_TYPE_SYSTEM_PROPERTY
    com.j256.ormlite.logger.LoggerFactory$LogType logType -> logType
    void <init>() -> <init>
    com.j256.ormlite.logger.Logger getLogger(java.lang.Class) -> getLogger
    com.j256.ormlite.logger.Logger getLogger(java.lang.String) -> getLogger
    java.lang.String getSimpleClassName(java.lang.String) -> getSimpleClassName
    com.j256.ormlite.logger.LoggerFactory$LogType findLogType() -> findLogType
com.j256.ormlite.logger.LoggerFactory$1 -> com.j256.ormlite.logger.LoggerFactory$1:
com.j256.ormlite.logger.LoggerFactory$LogType -> com.j256.ormlite.logger.LoggerFactory$LogType:
    com.j256.ormlite.logger.LoggerFactory$LogType ANDROID -> ANDROID
    com.j256.ormlite.logger.LoggerFactory$LogType SLF4J -> SLF4J
    com.j256.ormlite.logger.LoggerFactory$LogType COMMONS_LOGGING -> COMMONS_LOGGING
    com.j256.ormlite.logger.LoggerFactory$LogType LOG4J2 -> LOG4J2
    com.j256.ormlite.logger.LoggerFactory$LogType LOG4J -> LOG4J
    com.j256.ormlite.logger.LoggerFactory$LogType LOCAL -> LOCAL
    java.lang.String detectClassName -> detectClassName
    java.lang.String logClassName -> logClassName
    com.j256.ormlite.logger.LoggerFactory$LogType[] $VALUES -> $VALUES
    com.j256.ormlite.logger.LoggerFactory$LogType[] values() -> values
    com.j256.ormlite.logger.LoggerFactory$LogType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    com.j256.ormlite.logger.Log createLog(java.lang.String) -> createLog
    boolean isAvailable() -> isAvailable
    com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String) -> createLogFromClassName
    boolean isAvailableTestClass() -> isAvailableTestClass
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,com.j256.ormlite.logger.LoggerFactory$1) -> <init>
    void <clinit>() -> <clinit>
com.j256.ormlite.logger.LoggerFactory$LogType$1 -> com.j256.ormlite.logger.LoggerFactory$LogType$1:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    com.j256.ormlite.logger.Log createLog(java.lang.String) -> createLog
    boolean isAvailable() -> isAvailable
com.j256.ormlite.misc.BaseDaoEnabled -> com.j256.ormlite.misc.BaseDaoEnabled:
    com.j256.ormlite.dao.Dao dao -> dao
    void <init>() -> <init>
    int create() -> create
    int refresh() -> refresh
    int update() -> update
    int updateId(java.lang.Object) -> updateId
    int delete() -> delete
    java.lang.String objectToString() -> objectToString
    java.lang.Object extractId() -> extractId
    boolean objectsEqual(java.lang.Object) -> objectsEqual
    void setDao(com.j256.ormlite.dao.Dao) -> setDao
    com.j256.ormlite.dao.Dao getDao() -> getDao
    void checkForDao() -> checkForDao
com.j256.ormlite.misc.JavaxPersistence -> com.j256.ormlite.misc.JavaxPersistence:
    void <init>() -> <init>
    com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field) -> createFieldConfig
    java.lang.String getEntityName(java.lang.Class) -> getEntityName
com.j256.ormlite.misc.SqlExceptionUtil -> com.j256.ormlite.misc.SqlExceptionUtil:
    void <init>() -> <init>
    java.sql.SQLException create(java.lang.String,java.lang.Throwable) -> create
com.j256.ormlite.misc.TransactionManager -> com.j256.ormlite.misc.TransactionManager:
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.String SAVE_POINT_PREFIX -> SAVE_POINT_PREFIX
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    java.util.concurrent.atomic.AtomicInteger savePointCounter -> savePointCounter
    void <init>() -> <init>
    void <init>(com.j256.ormlite.support.ConnectionSource) -> <init>
    void initialize() -> initialize
    java.lang.Object callInTransaction(java.util.concurrent.Callable) -> callInTransaction
    java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable) -> callInTransaction
    java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable) -> callInTransaction
    java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable) -> callInTransaction
    void setConnectionSource(com.j256.ormlite.support.ConnectionSource) -> setConnectionSource
    void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint) -> rollBack
    void <clinit>() -> <clinit>
com.j256.ormlite.misc.VersionUtils -> com.j256.ormlite.misc.VersionUtils:
    java.lang.String CORE_VERSION -> CORE_VERSION
    com.j256.ormlite.logger.Logger logger -> logger
    boolean thrownOnErrors -> thrownOnErrors
    java.lang.String coreVersion -> coreVersion
    void <init>() -> <init>
    void checkCoreVersusJdbcVersions(java.lang.String) -> checkCoreVersusJdbcVersions
    void checkCoreVersusAndroidVersions(java.lang.String) -> checkCoreVersusAndroidVersions
    java.lang.String getCoreVersion() -> getCoreVersion
    void setThrownOnErrors(boolean) -> setThrownOnErrors
    void logVersionWarnings(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> logVersionWarnings
    void warning(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.Object[]) -> warning
    com.j256.ormlite.logger.Logger getLogger() -> getLogger
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.ArgumentHolder -> com.j256.ormlite.stmt.ArgumentHolder:
    java.lang.String getColumnName() -> getColumnName
    void setMetaInfo(java.lang.String) -> setMetaInfo
    void setMetaInfo(com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setValue(java.lang.Object) -> setValue
    java.lang.Object getSqlArgValue() -> getSqlArgValue
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    com.j256.ormlite.field.FieldType getFieldType() -> getFieldType
com.j256.ormlite.stmt.BaseArgumentHolder -> com.j256.ormlite.stmt.BaseArgumentHolder:
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.FieldType fieldType -> fieldType
    com.j256.ormlite.field.SqlType sqlType -> sqlType
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(com.j256.ormlite.field.SqlType) -> <init>
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    boolean isValueSet() -> isValueSet
    java.lang.String getColumnName() -> getColumnName
    void setMetaInfo(java.lang.String) -> setMetaInfo
    void setMetaInfo(com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType) -> setMetaInfo
    java.lang.Object getSqlArgValue() -> getSqlArgValue
    com.j256.ormlite.field.FieldType getFieldType() -> getFieldType
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.String toString() -> toString
com.j256.ormlite.stmt.ColumnArg -> com.j256.ormlite.stmt.ColumnArg:
    java.lang.String tableName -> tableName
    java.lang.String columnName -> columnName
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getTableName() -> getTableName
    java.lang.String getColumnName() -> getColumnName
com.j256.ormlite.stmt.DeleteBuilder -> com.j256.ormlite.stmt.DeleteBuilder:
    void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao) -> <init>
    com.j256.ormlite.stmt.PreparedDelete prepare() -> prepare
    int delete() -> delete
    void clear() -> clear
    void reset() -> reset
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
com.j256.ormlite.stmt.GenericRowMapper -> com.j256.ormlite.stmt.GenericRowMapper:
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
com.j256.ormlite.stmt.NullArgHolder -> com.j256.ormlite.stmt.NullArgHolder:
    void <init>() -> <init>
    java.lang.String getColumnName() -> getColumnName
    void setValue(java.lang.Object) -> setValue
    void setMetaInfo(java.lang.String) -> setMetaInfo
    void setMetaInfo(com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType) -> setMetaInfo
    java.lang.Object getSqlArgValue() -> getSqlArgValue
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    com.j256.ormlite.field.FieldType getFieldType() -> getFieldType
com.j256.ormlite.stmt.PreparedDelete -> com.j256.ormlite.stmt.PreparedDelete:
com.j256.ormlite.stmt.PreparedQuery -> com.j256.ormlite.stmt.PreparedQuery:
com.j256.ormlite.stmt.PreparedStmt -> com.j256.ormlite.stmt.PreparedStmt:
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType) -> compile
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int) -> compile
    java.lang.String getStatement() -> getStatement
    com.j256.ormlite.stmt.StatementBuilder$StatementType getType() -> getType
    void setArgumentHolderValue(int,java.lang.Object) -> setArgumentHolderValue
com.j256.ormlite.stmt.PreparedUpdate -> com.j256.ormlite.stmt.PreparedUpdate:
com.j256.ormlite.stmt.QueryBuilder -> com.j256.ormlite.stmt.QueryBuilder:
    com.j256.ormlite.field.FieldType idField -> idField
    com.j256.ormlite.field.FieldType[] resultFieldTypes -> resultFieldTypes
    boolean distinct -> distinct
    boolean selectIdColumn -> selectIdColumn
    java.util.List selectColumnList -> selectColumnList
    java.util.List selectRawList -> selectRawList
    java.util.List orderByList -> orderByList
    java.lang.String orderByRaw -> orderByRaw
    com.j256.ormlite.stmt.ArgumentHolder[] orderByArgs -> orderByArgs
    java.util.List groupByList -> groupByList
    java.lang.String groupByRaw -> groupByRaw
    boolean isInnerQuery -> isInnerQuery
    boolean isCountOfQuery -> isCountOfQuery
    java.lang.String having -> having
    java.lang.Long limit -> limit
    java.lang.Long offset -> offset
    java.util.List joinList -> joinList
    void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao) -> <init>
    void enableInnerQuery() -> enableInnerQuery
    int getSelectColumnCount() -> getSelectColumnCount
    java.util.List getSelectColumns() -> getSelectColumns
    com.j256.ormlite.stmt.PreparedQuery prepare() -> prepare
    com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.String[]) -> selectColumns
    com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable) -> selectColumns
    com.j256.ormlite.stmt.QueryBuilder selectRaw(java.lang.String[]) -> selectRaw
    com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String) -> groupBy
    com.j256.ormlite.stmt.QueryBuilder groupByRaw(java.lang.String) -> groupByRaw
    com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean) -> orderBy
    com.j256.ormlite.stmt.QueryBuilder orderByRaw(java.lang.String) -> orderByRaw
    com.j256.ormlite.stmt.QueryBuilder orderByRaw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[]) -> orderByRaw
    com.j256.ormlite.stmt.QueryBuilder distinct() -> distinct
    com.j256.ormlite.stmt.QueryBuilder limit(int) -> limit
    com.j256.ormlite.stmt.QueryBuilder limit(java.lang.Long) -> limit
    com.j256.ormlite.stmt.QueryBuilder offset(int) -> offset
    com.j256.ormlite.stmt.QueryBuilder offset(java.lang.Long) -> offset
    com.j256.ormlite.stmt.QueryBuilder setCountOf(boolean) -> setCountOf
    com.j256.ormlite.stmt.QueryBuilder having(java.lang.String) -> having
    com.j256.ormlite.stmt.QueryBuilder join(com.j256.ormlite.stmt.QueryBuilder) -> join
    com.j256.ormlite.stmt.QueryBuilder joinOr(com.j256.ormlite.stmt.QueryBuilder) -> joinOr
    com.j256.ormlite.stmt.QueryBuilder leftJoin(com.j256.ormlite.stmt.QueryBuilder) -> leftJoin
    com.j256.ormlite.stmt.QueryBuilder leftJoinOr(com.j256.ormlite.stmt.QueryBuilder) -> leftJoinOr
    java.util.List query() -> query
    com.j256.ormlite.dao.GenericRawResults queryRaw() -> queryRaw
    java.lang.Object queryForFirst() -> queryForFirst
    java.lang.String[] queryRawFirst() -> queryRawFirst
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    long countOf() -> countOf
    void clear() -> clear
    void reset() -> reset
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    com.j256.ormlite.field.FieldType[] getResultFieldTypes() -> getResultFieldTypes
    boolean appendWhereStatement(java.lang.StringBuilder,java.util.List,com.j256.ormlite.stmt.StatementBuilder$WhereOperation) -> appendWhereStatement
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
    boolean shouldPrependTableNameToColumns() -> shouldPrependTableNameToColumns
    void setAddTableName(boolean) -> setAddTableName
    void addJoinInfo(java.lang.String,com.j256.ormlite.stmt.QueryBuilder,com.j256.ormlite.stmt.StatementBuilder$WhereOperation) -> addJoinInfo
    void matchJoinedFields(com.j256.ormlite.stmt.QueryBuilder$JoinInfo,com.j256.ormlite.stmt.QueryBuilder) -> matchJoinedFields
    void addSelectColumnToList(java.lang.String) -> addSelectColumnToList
    void appendJoinSql(java.lang.StringBuilder) -> appendJoinSql
    void appendSelectRaw(java.lang.StringBuilder) -> appendSelectRaw
    void appendColumns(java.lang.StringBuilder) -> appendColumns
    void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List) -> appendFieldColumnName
    void appendLimit(java.lang.StringBuilder) -> appendLimit
    void appendOffset(java.lang.StringBuilder) -> appendOffset
    void appendGroupBys(java.lang.StringBuilder) -> appendGroupBys
    boolean hasGroupStuff() -> hasGroupStuff
    void appendGroupBys(java.lang.StringBuilder,boolean) -> appendGroupBys
    void appendOrderBys(java.lang.StringBuilder,java.util.List) -> appendOrderBys
    boolean hasOrderStuff() -> hasOrderStuff
    void appendOrderBys(java.lang.StringBuilder,boolean,java.util.List) -> appendOrderBys
    void appendColumnName(java.lang.StringBuilder,java.lang.String) -> appendColumnName
    void appendHaving(java.lang.StringBuilder) -> appendHaving
com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper -> com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper:
    com.j256.ormlite.stmt.QueryBuilder queryBuilder -> queryBuilder
    void <init>(com.j256.ormlite.stmt.QueryBuilder) -> <init>
    void appendStatementString(java.lang.StringBuilder,java.util.List) -> appendStatementString
    com.j256.ormlite.field.FieldType[] getResultFieldTypes() -> getResultFieldTypes
com.j256.ormlite.stmt.QueryBuilder$JoinInfo -> com.j256.ormlite.stmt.QueryBuilder$JoinInfo:
    java.lang.String type -> type
    com.j256.ormlite.stmt.QueryBuilder queryBuilder -> queryBuilder
    com.j256.ormlite.field.FieldType localField -> localField
    com.j256.ormlite.field.FieldType remoteField -> remoteField
    com.j256.ormlite.stmt.StatementBuilder$WhereOperation operation -> operation
    com.j256.ormlite.stmt.QueryBuilder this$0 -> this$0
    void <init>(com.j256.ormlite.stmt.QueryBuilder,java.lang.String,com.j256.ormlite.stmt.QueryBuilder,com.j256.ormlite.stmt.StatementBuilder$WhereOperation) -> <init>
com.j256.ormlite.stmt.RawResultsImpl -> com.j256.ormlite.stmt.RawResultsImpl:
    com.j256.ormlite.stmt.SelectIterator iterator -> iterator
    java.lang.String[] columnNames -> columnNames
    void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache) -> <init>
    int getNumberColumns() -> getNumberColumns
    java.lang.String[] getColumnNames() -> getColumnNames
    java.util.List getResults() -> getResults
    java.lang.Object getFirstResult() -> getFirstResult
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    void close() -> close
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.stmt.RawRowMapperImpl -> com.j256.ormlite.stmt.RawRowMapperImpl:
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    void <init>(com.j256.ormlite.table.TableInfo) -> <init>
    java.lang.Object mapRow(java.lang.String[],java.lang.String[]) -> mapRow
com.j256.ormlite.stmt.SelectArg -> com.j256.ormlite.stmt.SelectArg:
    boolean hasBeenSet -> hasBeenSet
    java.lang.Object value -> value
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.Object) -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Object) -> <init>
    void <init>(com.j256.ormlite.field.SqlType) -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    boolean isValueSet() -> isValueSet
com.j256.ormlite.stmt.SelectIterator -> com.j256.ormlite.stmt.SelectIterator:
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.Class dataClass -> dataClass
    com.j256.ormlite.dao.Dao classDao -> classDao
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    com.j256.ormlite.support.DatabaseConnection connection -> connection
    com.j256.ormlite.support.CompiledStatement compiledStmt -> compiledStmt
    com.j256.ormlite.support.DatabaseResults results -> results
    com.j256.ormlite.stmt.GenericRowMapper rowMapper -> rowMapper
    java.lang.String statement -> statement
    boolean first -> first
    boolean closed -> closed
    boolean alreadyMoved -> alreadyMoved
    java.lang.Object last -> last
    int rowC -> rowC
    void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache) -> <init>
    boolean hasNextThrow() -> hasNextThrow
    boolean hasNext() -> hasNext
    java.lang.Object first() -> first
    java.lang.Object previous() -> previous
    java.lang.Object current() -> current
    java.lang.Object nextThrow() -> nextThrow
    java.lang.Object next() -> next
    java.lang.Object moveRelative(int) -> moveRelative
    void removeThrow() -> removeThrow
    void remove() -> remove
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.support.DatabaseResults getRawResults() -> getRawResults
    void moveToNext() -> moveToNext
    java.lang.Object getCurrent() -> getCurrent
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.StatementBuilder -> com.j256.ormlite.stmt.StatementBuilder:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    java.lang.String tableName -> tableName
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.stmt.StatementBuilder$StatementType type -> type
    boolean addTableName -> addTableName
    com.j256.ormlite.stmt.Where where -> where
    void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType) -> <init>
    com.j256.ormlite.stmt.Where where() -> where
    void setWhere(com.j256.ormlite.stmt.Where) -> setWhere
    com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long) -> prepareStatement
    java.lang.String prepareStatementString() -> prepareStatementString
    com.j256.ormlite.stmt.StatementBuilder$StatementInfo prepareStatementInfo() -> prepareStatementInfo
    void clear() -> clear
    void reset() -> reset
    java.lang.String buildStatementString(java.util.List) -> buildStatementString
    void appendStatementString(java.lang.StringBuilder,java.util.List) -> appendStatementString
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    boolean appendWhereStatement(java.lang.StringBuilder,java.util.List,com.j256.ormlite.stmt.StatementBuilder$WhereOperation) -> appendWhereStatement
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
    boolean shouldPrependTableNameToColumns() -> shouldPrependTableNameToColumns
    com.j256.ormlite.field.FieldType[] getResultFieldTypes() -> getResultFieldTypes
    com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String) -> verifyColumnName
    com.j256.ormlite.stmt.StatementBuilder$StatementType getType() -> getType
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.StatementBuilder$1 -> com.j256.ormlite.stmt.StatementBuilder$1:
com.j256.ormlite.stmt.StatementBuilder$StatementInfo -> com.j256.ormlite.stmt.StatementBuilder$StatementInfo:
    java.lang.String statement -> statement
    java.util.List argList -> argList
    void <init>(java.lang.String,java.util.List) -> <init>
    java.lang.String getStatement() -> getStatement
    java.util.List getArgList() -> getArgList
    void <init>(java.lang.String,java.util.List,com.j256.ormlite.stmt.StatementBuilder$1) -> <init>
com.j256.ormlite.stmt.StatementBuilder$StatementType -> com.j256.ormlite.stmt.StatementBuilder$StatementType:
    com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT -> SELECT
    com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_LONG -> SELECT_LONG
    com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_RAW -> SELECT_RAW
    com.j256.ormlite.stmt.StatementBuilder$StatementType UPDATE -> UPDATE
    com.j256.ormlite.stmt.StatementBuilder$StatementType DELETE -> DELETE
    com.j256.ormlite.stmt.StatementBuilder$StatementType EXECUTE -> EXECUTE
    boolean okForStatementBuilder -> okForStatementBuilder
    boolean okForQuery -> okForQuery
    boolean okForUpdate -> okForUpdate
    boolean okForExecute -> okForExecute
    com.j256.ormlite.stmt.StatementBuilder$StatementType[] $VALUES -> $VALUES
    com.j256.ormlite.stmt.StatementBuilder$StatementType[] values() -> values
    com.j256.ormlite.stmt.StatementBuilder$StatementType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    boolean isOkForStatementBuilder() -> isOkForStatementBuilder
    boolean isOkForQuery() -> isOkForQuery
    boolean isOkForUpdate() -> isOkForUpdate
    boolean isOkForExecute() -> isOkForExecute
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.StatementBuilder$WhereOperation -> com.j256.ormlite.stmt.StatementBuilder$WhereOperation:
    com.j256.ormlite.stmt.StatementBuilder$WhereOperation FIRST -> FIRST
    com.j256.ormlite.stmt.StatementBuilder$WhereOperation AND -> AND
    com.j256.ormlite.stmt.StatementBuilder$WhereOperation OR -> OR
    java.lang.String before -> before
    java.lang.String after -> after
    com.j256.ormlite.stmt.StatementBuilder$WhereOperation[] $VALUES -> $VALUES
    com.j256.ormlite.stmt.StatementBuilder$WhereOperation[] values() -> values
    com.j256.ormlite.stmt.StatementBuilder$WhereOperation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void appendBefore(java.lang.StringBuilder) -> appendBefore
    void appendAfter(java.lang.StringBuilder) -> appendAfter
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.StatementExecutor -> com.j256.ormlite.stmt.StatementExecutor:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.field.FieldType[] noFieldTypes -> noFieldTypes
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.stmt.mapped.MappedQueryForId mappedQueryForId -> mappedQueryForId
    com.j256.ormlite.stmt.PreparedQuery preparedQueryForAll -> preparedQueryForAll
    com.j256.ormlite.stmt.mapped.MappedCreate mappedInsert -> mappedInsert
    com.j256.ormlite.stmt.mapped.MappedUpdate mappedUpdate -> mappedUpdate
    com.j256.ormlite.stmt.mapped.MappedUpdateId mappedUpdateId -> mappedUpdateId
    com.j256.ormlite.stmt.mapped.MappedDelete mappedDelete -> mappedDelete
    com.j256.ormlite.stmt.mapped.MappedRefresh mappedRefresh -> mappedRefresh
    java.lang.String countStarQuery -> countStarQuery
    java.lang.String ifExistsQuery -> ifExistsQuery
    com.j256.ormlite.field.FieldType[] ifExistsFieldTypes -> ifExistsFieldTypes
    com.j256.ormlite.dao.RawRowMapper rawRowMapper -> rawRowMapper
    void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao) -> <init>
    java.lang.Object queryForId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache) -> queryForFirst
    java.util.List queryForAll(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.ObjectCache) -> queryForAll
    long queryForCountStar(com.j256.ormlite.support.DatabaseConnection) -> queryForCountStar
    long queryForLong(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt) -> queryForLong
    long queryForLong(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[]) -> queryForLong
    java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache) -> query
    com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,int,com.j256.ormlite.dao.ObjectCache) -> buildIterator
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int) -> buildIterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],com.j256.ormlite.dao.RawRowObjectMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache) -> queryRaw
    int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[]) -> updateRaw
    int executeRawNoArgs(com.j256.ormlite.support.DatabaseConnection,java.lang.String) -> executeRawNoArgs
    int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[]) -> executeRaw
    int create(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> create
    int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> update
    int updateId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> updateId
    int update(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> refresh
    int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> delete
    int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> deleteById
    int deleteObjects(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteObjects
    int deleteIds(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteIds
    int delete(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedDelete) -> delete
    java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String[] mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object) -> ifExists
    void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[]) -> assignStatementArguments
    void prepareQueryForAll() -> prepareQueryForAll
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper -> com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper:
    com.j256.ormlite.field.DataType[] columnTypes -> columnTypes
    void <init>(com.j256.ormlite.field.DataType[]) -> <init>
    java.lang.Object[] mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper -> com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper:
    com.j256.ormlite.dao.RawRowMapper mapper -> mapper
    com.j256.ormlite.stmt.GenericRowMapper stringRowMapper -> stringRowMapper
    java.lang.String[] columnNames -> columnNames
    void <init>(com.j256.ormlite.dao.RawRowMapper,com.j256.ormlite.stmt.GenericRowMapper) -> <init>
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    java.lang.String[] getColumnNames(com.j256.ormlite.support.DatabaseResults) -> getColumnNames
com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper -> com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper:
    com.j256.ormlite.dao.RawRowObjectMapper mapper -> mapper
    com.j256.ormlite.field.DataType[] columnTypes -> columnTypes
    java.lang.String[] columnNames -> columnNames
    void <init>(com.j256.ormlite.dao.RawRowObjectMapper,com.j256.ormlite.field.DataType[]) -> <init>
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    java.lang.String[] getColumnNames(com.j256.ormlite.support.DatabaseResults) -> getColumnNames
com.j256.ormlite.stmt.ThreadLocalSelectArg -> com.j256.ormlite.stmt.ThreadLocalSelectArg:
    java.lang.ThreadLocal threadValue -> threadValue
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.Object) -> <init>
    void <init>(com.j256.ormlite.field.SqlType,java.lang.Object) -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    boolean isValueSet() -> isValueSet
com.j256.ormlite.stmt.ThreadLocalSelectArg$ValueWrapper -> com.j256.ormlite.stmt.ThreadLocalSelectArg$ValueWrapper:
    java.lang.Object value -> value
    void <init>(java.lang.Object) -> <init>
com.j256.ormlite.stmt.UpdateBuilder -> com.j256.ormlite.stmt.UpdateBuilder:
    java.util.List updateClauseList -> updateClauseList
    void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao) -> <init>
    com.j256.ormlite.stmt.PreparedUpdate prepare() -> prepare
    com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object) -> updateColumnValue
    com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String) -> updateColumnExpression
    void escapeColumnName(java.lang.StringBuilder,java.lang.String) -> escapeColumnName
    java.lang.String escapeColumnName(java.lang.String) -> escapeColumnName
    void escapeValue(java.lang.StringBuilder,java.lang.String) -> escapeValue
    java.lang.String escapeValue(java.lang.String) -> escapeValue
    int update() -> update
    void clear() -> clear
    void reset() -> reset
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
    void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause) -> addUpdateColumnToList
com.j256.ormlite.stmt.Where -> com.j256.ormlite.stmt.Where:
    int CLAUSE_STACK_START_SIZE -> CLAUSE_STACK_START_SIZE
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    com.j256.ormlite.stmt.StatementBuilder statementBuilder -> statementBuilder
    com.j256.ormlite.field.FieldType idFieldType -> idFieldType
    java.lang.String idColumnName -> idColumnName
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.stmt.query.Clause[] clauseStack -> clauseStack
    int clauseStackLevel -> clauseStackLevel
    com.j256.ormlite.stmt.query.NeedsFutureClause needsFuture -> needsFuture
    void <init>(com.j256.ormlite.table.TableInfo,com.j256.ormlite.stmt.StatementBuilder,com.j256.ormlite.db.DatabaseType) -> <init>
    com.j256.ormlite.stmt.Where and() -> and
    com.j256.ormlite.stmt.Where and(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[]) -> and
    com.j256.ormlite.stmt.Where and(int) -> and
    com.j256.ormlite.stmt.Where between(java.lang.String,java.lang.Object,java.lang.Object) -> between
    com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object) -> eq
    com.j256.ormlite.stmt.Where ge(java.lang.String,java.lang.Object) -> ge
    com.j256.ormlite.stmt.Where gt(java.lang.String,java.lang.Object) -> gt
    com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Iterable) -> in
    com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Iterable) -> notIn
    com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Object[]) -> in
    com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Object[]) -> notIn
    com.j256.ormlite.stmt.Where in(java.lang.String,com.j256.ormlite.stmt.QueryBuilder) -> in
    com.j256.ormlite.stmt.Where notIn(java.lang.String,com.j256.ormlite.stmt.QueryBuilder) -> notIn
    com.j256.ormlite.stmt.Where exists(com.j256.ormlite.stmt.QueryBuilder) -> exists
    com.j256.ormlite.stmt.Where isNull(java.lang.String) -> isNull
    com.j256.ormlite.stmt.Where isNotNull(java.lang.String) -> isNotNull
    com.j256.ormlite.stmt.Where le(java.lang.String,java.lang.Object) -> le
    com.j256.ormlite.stmt.Where lt(java.lang.String,java.lang.Object) -> lt
    com.j256.ormlite.stmt.Where like(java.lang.String,java.lang.Object) -> like
    com.j256.ormlite.stmt.Where ne(java.lang.String,java.lang.Object) -> ne
    com.j256.ormlite.stmt.Where not() -> not
    com.j256.ormlite.stmt.Where not(com.j256.ormlite.stmt.Where) -> not
    com.j256.ormlite.stmt.Where or() -> or
    com.j256.ormlite.stmt.Where or(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[]) -> or
    com.j256.ormlite.stmt.Where or(int) -> or
    com.j256.ormlite.stmt.Where idEq(java.lang.Object) -> idEq
    com.j256.ormlite.stmt.Where idEq(com.j256.ormlite.dao.Dao,java.lang.Object) -> idEq
    com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[]) -> raw
    com.j256.ormlite.stmt.Where rawComparison(java.lang.String,java.lang.String,java.lang.Object) -> rawComparison
    com.j256.ormlite.stmt.PreparedQuery prepare() -> prepare
    java.util.List query() -> query
    com.j256.ormlite.dao.GenericRawResults queryRaw() -> queryRaw
    java.lang.Object queryForFirst() -> queryForFirst
    java.lang.String[] queryRawFirst() -> queryRawFirst
    long countOf() -> countOf
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.stmt.Where clear() -> clear
    com.j256.ormlite.stmt.Where reset() -> reset
    java.lang.String getStatement() -> getStatement
    void appendSql(java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    java.lang.String toString() -> toString
    com.j256.ormlite.stmt.QueryBuilder checkQueryBuilderMethod(java.lang.String) -> checkQueryBuilderMethod
    com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[]) -> in
    com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder) -> in
    com.j256.ormlite.stmt.query.Clause[] buildClauseArray(com.j256.ormlite.stmt.Where[],java.lang.String) -> buildClauseArray
    void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause) -> addNeedsFuture
    void addClause(com.j256.ormlite.stmt.query.Clause) -> addClause
    com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String) -> findColumnFieldType
    void push(com.j256.ormlite.stmt.query.Clause) -> push
    com.j256.ormlite.stmt.query.Clause pop(java.lang.String) -> pop
    com.j256.ormlite.stmt.query.Clause peek() -> peek
com.j256.ormlite.stmt.mapped.BaseMappedQuery -> com.j256.ormlite.stmt.mapped.BaseMappedQuery:
    com.j256.ormlite.field.FieldType[] resultsFieldTypes -> resultsFieldTypes
    java.util.Map columnPositions -> columnPositions
    java.lang.Object parent -> parent
    java.lang.Object parentId -> parentId
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[]) -> <init>
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    void setParentInformation(java.lang.Object,java.lang.Object) -> setParentInformation
com.j256.ormlite.stmt.mapped.BaseMappedStatement -> com.j256.ormlite.stmt.mapped.BaseMappedStatement:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    java.lang.Class clazz -> clazz
    com.j256.ormlite.field.FieldType idField -> idField
    java.lang.String statement -> statement
    com.j256.ormlite.field.FieldType[] argFieldTypes -> argFieldTypes
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[]) -> <init>
    java.lang.Object[] getFieldObjects(java.lang.Object) -> getFieldObjects
    java.lang.Object convertIdToFieldObject(java.lang.Object) -> convertIdToFieldObject
    void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List) -> appendWhereFieldEq
    void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String) -> appendTableName
    void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List) -> appendFieldColumnName
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.mapped.MappedCreate -> com.j256.ormlite.stmt.mapped.MappedCreate:
    java.lang.String queryNextSequenceStmt -> queryNextSequenceStmt
    java.lang.String dataClassName -> dataClassName
    int versionFieldTypeIndex -> versionFieldTypeIndex
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],java.lang.String,int) -> <init>
    int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> insert
    com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    boolean foreignCollectionsAreAssigned(com.j256.ormlite.field.FieldType[],java.lang.Object) -> foreignCollectionsAreAssigned
    boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType) -> isFieldCreatable
    java.lang.String buildQueryNextSequence(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType) -> buildQueryNextSequence
    void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> assignSequenceId
    void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache) -> assignIdValue
com.j256.ormlite.stmt.mapped.MappedCreate$1 -> com.j256.ormlite.stmt.mapped.MappedCreate$1:
com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder -> com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder:
    java.lang.Number key -> key
    void <init>() -> <init>
    java.lang.Number getKey() -> getKey
    void addKey(java.lang.Number) -> addKey
    void <init>(com.j256.ormlite.stmt.mapped.MappedCreate$1) -> <init>
com.j256.ormlite.stmt.mapped.MappedDelete -> com.j256.ormlite.stmt.mapped.MappedDelete:
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[]) -> <init>
    com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> delete
    int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> deleteById
com.j256.ormlite.stmt.mapped.MappedDeleteCollection -> com.j256.ormlite.stmt.mapped.MappedDeleteCollection:
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[]) -> <init>
    int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteObjects
    int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteIds
    com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int) -> build
    int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache) -> updateRows
    void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[]) -> appendWhereIds
com.j256.ormlite.stmt.mapped.MappedPreparedStmt -> com.j256.ormlite.stmt.mapped.MappedPreparedStmt:
    com.j256.ormlite.stmt.ArgumentHolder[] argHolders -> argHolders
    java.lang.Long limit -> limit
    com.j256.ormlite.stmt.StatementBuilder$StatementType type -> type
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.ArgumentHolder[],java.lang.Long,com.j256.ormlite.stmt.StatementBuilder$StatementType) -> <init>
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType) -> compile
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int) -> compile
    java.lang.String getStatement() -> getStatement
    com.j256.ormlite.stmt.StatementBuilder$StatementType getType() -> getType
    void setArgumentHolderValue(int,java.lang.Object) -> setArgumentHolderValue
    com.j256.ormlite.support.CompiledStatement assignStatementArguments(com.j256.ormlite.support.CompiledStatement) -> assignStatementArguments
com.j256.ormlite.stmt.mapped.MappedQueryForId -> com.j256.ormlite.stmt.mapped.MappedQueryForId:
    java.lang.String label -> label
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],java.lang.String) -> <init>
    java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> execute
    com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType) -> build
    java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType) -> buildStatement
    void logArgs(java.lang.Object[]) -> logArgs
com.j256.ormlite.stmt.mapped.MappedRefresh -> com.j256.ormlite.stmt.mapped.MappedRefresh:
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[]) -> <init>
    int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> executeRefresh
    com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
com.j256.ormlite.stmt.mapped.MappedUpdate -> com.j256.ormlite.stmt.mapped.MappedUpdate:
    com.j256.ormlite.field.FieldType versionFieldType -> versionFieldType
    int versionFieldTypeIndex -> versionFieldTypeIndex
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType,int) -> <init>
    com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> update
    boolean isFieldUpdatable(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.FieldType) -> isFieldUpdatable
com.j256.ormlite.stmt.mapped.MappedUpdateId -> com.j256.ormlite.stmt.mapped.MappedUpdateId:
    void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[]) -> <init>
    int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> execute
    com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    java.lang.Object extractIdToFieldObject(java.lang.Object) -> extractIdToFieldObject
com.j256.ormlite.stmt.query.BaseComparison -> com.j256.ormlite.stmt.query.BaseComparison:
    java.lang.String NUMBER_CHARACTERS -> NUMBER_CHARACTERS
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.FieldType fieldType -> fieldType
    java.lang.Object value -> value
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    java.lang.String getColumnName() -> getColumnName
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object) -> appendArgOrValue
    java.lang.String toString() -> toString
com.j256.ormlite.stmt.query.Between -> com.j256.ormlite.stmt.query.Between:
    java.lang.Object low -> low
    java.lang.Object high -> high
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Object) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.Clause -> com.j256.ormlite.stmt.query.Clause:
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.Comparison -> com.j256.ormlite.stmt.query.Comparison:
    java.lang.String getColumnName() -> getColumnName
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
com.j256.ormlite.stmt.query.Exists -> com.j256.ormlite.stmt.query.Exists:
    com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper subQueryBuilder -> subQueryBuilder
    void <init>(com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper) -> <init>
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.In -> com.j256.ormlite.stmt.query.In:
    java.lang.Iterable objects -> objects
    boolean in -> in
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Iterable,boolean) -> <init>
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object[],boolean) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.InSubQuery -> com.j256.ormlite.stmt.query.InSubQuery:
    com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper subQueryBuilder -> subQueryBuilder
    boolean in -> in
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper,boolean) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.IsNotNull -> com.j256.ormlite.stmt.query.IsNotNull:
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.IsNull -> com.j256.ormlite.stmt.query.IsNull:
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.ManyClause -> com.j256.ormlite.stmt.query.ManyClause:
    java.lang.String AND_OPERATION -> AND_OPERATION
    java.lang.String OR_OPERATION -> OR_OPERATION
    com.j256.ormlite.stmt.query.Clause first -> first
    com.j256.ormlite.stmt.query.Clause second -> second
    com.j256.ormlite.stmt.query.Clause[] others -> others
    int startOthersAt -> startOthersAt
    java.lang.String operation -> operation
    void <init>(com.j256.ormlite.stmt.query.Clause,java.lang.String) -> <init>
    void <init>(com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause[],java.lang.String) -> <init>
    void <init>(com.j256.ormlite.stmt.query.Clause[],java.lang.String) -> <init>
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    void setMissingClause(com.j256.ormlite.stmt.query.Clause) -> setMissingClause
com.j256.ormlite.stmt.query.NeedsFutureClause -> com.j256.ormlite.stmt.query.NeedsFutureClause:
    void setMissingClause(com.j256.ormlite.stmt.query.Clause) -> setMissingClause
com.j256.ormlite.stmt.query.Not -> com.j256.ormlite.stmt.query.Not:
    com.j256.ormlite.stmt.query.Comparison comparison -> comparison
    com.j256.ormlite.stmt.query.Exists exists -> exists
    void <init>() -> <init>
    void <init>(com.j256.ormlite.stmt.query.Clause) -> <init>
    void setMissingClause(com.j256.ormlite.stmt.query.Clause) -> setMissingClause
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    java.lang.String toString() -> toString
com.j256.ormlite.stmt.query.OrderBy -> com.j256.ormlite.stmt.query.OrderBy:
    java.lang.String columnName -> columnName
    boolean ascending -> ascending
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.String getColumnName() -> getColumnName
    boolean isAscending() -> isAscending
com.j256.ormlite.stmt.query.Raw -> com.j256.ormlite.stmt.query.Raw:
    java.lang.String statement -> statement
    com.j256.ormlite.stmt.ArgumentHolder[] args -> args
    void <init>(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[]) -> <init>
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.SetExpression -> com.j256.ormlite.stmt.query.SetExpression:
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.String) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object) -> appendArgOrValue
    java.lang.String toString() -> toString
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.SetValue -> com.j256.ormlite.stmt.query.SetValue:
    com.j256.ormlite.stmt.ArgumentHolder nullValue -> nullValue
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    java.lang.String toString() -> toString
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    void <clinit>() -> <clinit>
com.j256.ormlite.stmt.query.SimpleComparison -> com.j256.ormlite.stmt.query.SimpleComparison:
    java.lang.String EQUAL_TO_OPERATION -> EQUAL_TO_OPERATION
    java.lang.String GREATER_THAN_OPERATION -> GREATER_THAN_OPERATION
    java.lang.String GREATER_THAN_EQUAL_TO_OPERATION -> GREATER_THAN_EQUAL_TO_OPERATION
    java.lang.String LESS_THAN_OPERATION -> LESS_THAN_OPERATION
    java.lang.String LESS_THAN_EQUAL_TO_OPERATION -> LESS_THAN_EQUAL_TO_OPERATION
    java.lang.String LIKE_OPERATION -> LIKE_OPERATION
    java.lang.String NOT_EQUAL_TO_OPERATION -> NOT_EQUAL_TO_OPERATION
    java.lang.String operation -> operation
    void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String) -> <init>
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    java.lang.String toString() -> toString
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.support.BaseConnectionSource -> com.j256.ormlite.support.BaseConnectionSource:
    java.lang.ThreadLocal specialConnection -> specialConnection
    void <init>() -> <init>
    com.j256.ormlite.support.DatabaseConnection getSpecialConnection() -> getSpecialConnection
    com.j256.ormlite.support.DatabaseConnection getSavedConnection() -> getSavedConnection
    boolean isSavedConnection(com.j256.ormlite.support.DatabaseConnection) -> isSavedConnection
    boolean saveSpecial(com.j256.ormlite.support.DatabaseConnection) -> saveSpecial
    boolean clearSpecial(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.logger.Logger) -> clearSpecial
com.j256.ormlite.support.BaseConnectionSource$NestedConnection -> com.j256.ormlite.support.BaseConnectionSource$NestedConnection:
    com.j256.ormlite.support.DatabaseConnection connection -> connection
    int nestedC -> nestedC
    void <init>(com.j256.ormlite.support.DatabaseConnection) -> <init>
    void increment() -> increment
    int decrementAndGet() -> decrementAndGet
com.j256.ormlite.support.CompiledStatement -> com.j256.ormlite.support.CompiledStatement:
    int getColumnCount() -> getColumnCount
    java.lang.String getColumnName(int) -> getColumnName
    int runUpdate() -> runUpdate
    com.j256.ormlite.support.DatabaseResults runQuery(com.j256.ormlite.dao.ObjectCache) -> runQuery
    int runExecute() -> runExecute
    void close() -> close
    void closeQuietly() -> closeQuietly
    void cancel() -> cancel
    void setObject(int,java.lang.Object,com.j256.ormlite.field.SqlType) -> setObject
    void setMaxRows(int) -> setMaxRows
    void setQueryTimeout(long) -> setQueryTimeout
com.j256.ormlite.support.ConnectionSource -> com.j256.ormlite.support.ConnectionSource:
    com.j256.ormlite.support.DatabaseConnection getReadOnlyConnection() -> getReadOnlyConnection
    com.j256.ormlite.support.DatabaseConnection getReadWriteConnection() -> getReadWriteConnection
    void releaseConnection(com.j256.ormlite.support.DatabaseConnection) -> releaseConnection
    boolean saveSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> saveSpecialConnection
    void clearSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> clearSpecialConnection
    com.j256.ormlite.support.DatabaseConnection getSpecialConnection() -> getSpecialConnection
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.db.DatabaseType getDatabaseType() -> getDatabaseType
    boolean isOpen() -> isOpen
com.j256.ormlite.support.DatabaseConnection -> com.j256.ormlite.support.DatabaseConnection:
    java.lang.Object MORE_THAN_ONE -> MORE_THAN_ONE
    int DEFAULT_RESULT_FLAGS -> DEFAULT_RESULT_FLAGS
    boolean isAutoCommitSupported() -> isAutoCommitSupported
    boolean isAutoCommit() -> isAutoCommit
    void setAutoCommit(boolean) -> setAutoCommit
    java.sql.Savepoint setSavePoint(java.lang.String) -> setSavePoint
    void commit(java.sql.Savepoint) -> commit
    void rollback(java.sql.Savepoint) -> rollback
    int executeStatement(java.lang.String,int) -> executeStatement
    com.j256.ormlite.support.CompiledStatement compileStatement(java.lang.String,com.j256.ormlite.stmt.StatementBuilder$StatementType,com.j256.ormlite.field.FieldType[],int) -> compileStatement
    int insert(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.support.GeneratedKeyHolder) -> insert
    int update(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> update
    int delete(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> delete
    java.lang.Object queryForOne(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache) -> queryForOne
    long queryForLong(java.lang.String) -> queryForLong
    long queryForLong(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> queryForLong
    void close() -> close
    void closeQuietly() -> closeQuietly
    boolean isClosed() -> isClosed
    boolean isTableExists(java.lang.String) -> isTableExists
    void <clinit>() -> <clinit>
com.j256.ormlite.support.DatabaseConnectionProxy -> com.j256.ormlite.support.DatabaseConnectionProxy:
    com.j256.ormlite.support.DatabaseConnection proxy -> proxy
    void <init>(com.j256.ormlite.support.DatabaseConnection) -> <init>
    boolean isAutoCommitSupported() -> isAutoCommitSupported
    boolean isAutoCommit() -> isAutoCommit
    void setAutoCommit(boolean) -> setAutoCommit
    java.sql.Savepoint setSavePoint(java.lang.String) -> setSavePoint
    void commit(java.sql.Savepoint) -> commit
    void rollback(java.sql.Savepoint) -> rollback
    int executeStatement(java.lang.String,int) -> executeStatement
    com.j256.ormlite.support.CompiledStatement compileStatement(java.lang.String,com.j256.ormlite.stmt.StatementBuilder$StatementType,com.j256.ormlite.field.FieldType[],int) -> compileStatement
    int insert(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.support.GeneratedKeyHolder) -> insert
    int update(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> update
    int delete(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> delete
    java.lang.Object queryForOne(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache) -> queryForOne
    long queryForLong(java.lang.String) -> queryForLong
    long queryForLong(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> queryForLong
    void close() -> close
    void closeQuietly() -> closeQuietly
    boolean isClosed() -> isClosed
    boolean isTableExists(java.lang.String) -> isTableExists
com.j256.ormlite.support.DatabaseConnectionProxyFactory -> com.j256.ormlite.support.DatabaseConnectionProxyFactory:
    com.j256.ormlite.support.DatabaseConnection createProxy(com.j256.ormlite.support.DatabaseConnection) -> createProxy
com.j256.ormlite.support.DatabaseResults -> com.j256.ormlite.support.DatabaseResults:
    int getColumnCount() -> getColumnCount
    java.lang.String[] getColumnNames() -> getColumnNames
    boolean first() -> first
    boolean previous() -> previous
    boolean next() -> next
    boolean last() -> last
    boolean moveRelative(int) -> moveRelative
    boolean moveAbsolute(int) -> moveAbsolute
    int findColumn(java.lang.String) -> findColumn
    java.lang.String getString(int) -> getString
    boolean getBoolean(int) -> getBoolean
    char getChar(int) -> getChar
    byte getByte(int) -> getByte
    byte[] getBytes(int) -> getBytes
    short getShort(int) -> getShort
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    java.sql.Timestamp getTimestamp(int) -> getTimestamp
    java.io.InputStream getBlobStream(int) -> getBlobStream
    java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    boolean wasNull(int) -> wasNull
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void close() -> close
    void closeQuietly() -> closeQuietly
com.j256.ormlite.support.GeneratedKeyHolder -> com.j256.ormlite.support.GeneratedKeyHolder:
    void addKey(java.lang.Number) -> addKey
com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory -> com.j256.ormlite.support.ReflectionDatabaseConnectionProxyFactory:
    java.lang.Class proxyClass -> proxyClass
    java.lang.reflect.Constructor constructor -> constructor
    void <init>(java.lang.Class) -> <init>
    com.j256.ormlite.support.DatabaseConnection createProxy(com.j256.ormlite.support.DatabaseConnection) -> createProxy
com.j256.ormlite.table.DatabaseTable -> com.j256.ormlite.table.DatabaseTable:
    java.lang.String tableName() -> tableName
    java.lang.Class daoClass() -> daoClass
com.j256.ormlite.table.DatabaseTableConfig -> com.j256.ormlite.table.DatabaseTableConfig:
    java.lang.Class dataClass -> dataClass
    java.lang.String tableName -> tableName
    java.util.List fieldConfigs -> fieldConfigs
    com.j256.ormlite.field.FieldType[] fieldTypes -> fieldTypes
    java.lang.reflect.Constructor constructor -> constructor
    void <init>() -> <init>
    void <init>(java.lang.Class,java.util.List) -> <init>
    void <init>(java.lang.Class,java.lang.String,java.util.List) -> <init>
    void <init>(java.lang.Class,java.lang.String,com.j256.ormlite.field.FieldType[]) -> <init>
    void initialize() -> initialize
    java.lang.Class getDataClass() -> getDataClass
    void setDataClass(java.lang.Class) -> setDataClass
    java.lang.String getTableName() -> getTableName
    void setTableName(java.lang.String) -> setTableName
    void setFieldConfigs(java.util.List) -> setFieldConfigs
    void extractFieldTypes(com.j256.ormlite.support.ConnectionSource) -> extractFieldTypes
    com.j256.ormlite.field.FieldType[] getFieldTypes(com.j256.ormlite.db.DatabaseType) -> getFieldTypes
    java.util.List getFieldConfigs() -> getFieldConfigs
    java.lang.reflect.Constructor getConstructor() -> getConstructor
    void setConstructor(java.lang.reflect.Constructor) -> setConstructor
    com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> fromClass
    java.lang.String extractTableName(java.lang.Class) -> extractTableName
    java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class) -> findNoArgConstructor
    com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String) -> extractFieldTypes
    com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List) -> convertFieldConfigs
com.j256.ormlite.table.DatabaseTableConfigLoader -> com.j256.ormlite.table.DatabaseTableConfigLoader:
    java.lang.String CONFIG_FILE_START_MARKER -> CONFIG_FILE_START_MARKER
    java.lang.String CONFIG_FILE_END_MARKER -> CONFIG_FILE_END_MARKER
    java.lang.String CONFIG_FILE_FIELDS_START -> CONFIG_FILE_FIELDS_START
    java.lang.String CONFIG_FILE_FIELDS_END -> CONFIG_FILE_FIELDS_END
    java.lang.String FIELD_NAME_DATA_CLASS -> FIELD_NAME_DATA_CLASS
    java.lang.String FIELD_NAME_TABLE_NAME -> FIELD_NAME_TABLE_NAME
    void <init>() -> <init>
    java.util.List loadDatabaseConfigFromReader(java.io.BufferedReader) -> loadDatabaseConfigFromReader
    com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader) -> fromReader
    void write(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig) -> write
    void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig) -> writeConfig
    void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String) -> readTableField
    void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig) -> readFields
com.j256.ormlite.table.ObjectFactory -> com.j256.ormlite.table.ObjectFactory:
    java.lang.Object createObject(java.lang.reflect.Constructor,java.lang.Class) -> createObject
com.j256.ormlite.table.TableInfo -> com.j256.ormlite.table.TableInfo:
    com.j256.ormlite.field.FieldType[] NO_FOREIGN_COLLECTIONS -> NO_FOREIGN_COLLECTIONS
    com.j256.ormlite.dao.BaseDaoImpl baseDaoImpl -> baseDaoImpl
    java.lang.Class dataClass -> dataClass
    java.lang.String tableName -> tableName
    com.j256.ormlite.field.FieldType[] fieldTypes -> fieldTypes
    com.j256.ormlite.field.FieldType[] foreignCollections -> foreignCollections
    com.j256.ormlite.field.FieldType idField -> idField
    java.lang.reflect.Constructor constructor -> constructor
    boolean foreignAutoCreate -> foreignAutoCreate
    java.util.Map fieldNameMap -> fieldNameMap
    void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.BaseDaoImpl,java.lang.Class) -> <init>
    void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.table.DatabaseTableConfig) -> <init>
    java.lang.Class getDataClass() -> getDataClass
    java.lang.String getTableName() -> getTableName
    com.j256.ormlite.field.FieldType[] getFieldTypes() -> getFieldTypes
    com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String) -> getFieldTypeByColumnName
    com.j256.ormlite.field.FieldType getIdField() -> getIdField
    java.lang.reflect.Constructor getConstructor() -> getConstructor
    java.lang.String objectToString(java.lang.Object) -> objectToString
    java.lang.Object createObject() -> createObject
    boolean isUpdatable() -> isUpdatable
    boolean isForeignAutoCreate() -> isForeignAutoCreate
    com.j256.ormlite.field.FieldType[] getForeignCollections() -> getForeignCollections
    boolean hasColumnName(java.lang.String) -> hasColumnName
    void wireNewInstance(com.j256.ormlite.dao.BaseDaoImpl,java.lang.Object) -> wireNewInstance
    void <clinit>() -> <clinit>
com.j256.ormlite.table.TableUtils -> com.j256.ormlite.table.TableUtils:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.field.FieldType[] noFieldTypes -> noFieldTypes
    void <init>() -> <init>
    int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createTable
    int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createTableIfNotExists
    int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createTable
    int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createTableIfNotExists
    java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> getCreateTableStatements
    java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> getCreateTableStatements
    int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean) -> dropTable
    int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean) -> dropTable
    int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> clearTable
    int clearTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> clearTable
    int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean) -> createTable
    int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean) -> createTable
    int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String) -> clearTable
    int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean) -> doDropTable
    void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List) -> addDropIndexStatements
    void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean) -> addCreateTableStatements
    void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean) -> addCreateIndexStatements
    void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List) -> addDropTableStatements
    int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean) -> doCreateTable
    int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean) -> doStatements
    int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List) -> doCreateTestQueries
    java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean) -> addCreateTableStatements
    void <clinit>() -> <clinit>
io.chirp.chirpengine.ChirpEngine -> io.chirp.chirpengine.ChirpEngine:
    io.chirp.chirpengine.ChirpEngineObserver observer -> observer
    io.chirp.chirpengine.ChirpEngineErrorObserver errorObserver -> errorObserver
    int diagnosticLevel -> diagnosticLevel
    long startTimeStampMS -> startTimeStampMS
    int BUFFER_SIZE -> BUFFER_SIZE
    int BUFFER_SIZE_IN_BYTES -> BUFFER_SIZE_IN_BYTES
    void <init>() -> <init>
    void start(java.lang.String) -> start
    void stop() -> stop
    void setProtocol(io.chirp.chirpengine.ChirpProtocol) -> setProtocol
    void unsetProtocol() -> unsetProtocol
    java.lang.String getCurrentProtocolName() -> getCurrentProtocolName
    void process_buffer_in(short[],int) -> process_buffer_in
    void process_buffer_out(short[],int) -> process_buffer_out
    void play_chirp(io.chirp.chirpengine.ChirpT) -> play_chirp
    void onChirpReceived(long,int,java.lang.String) -> onChirpReceived
    void onChirpFrontdoorReceived() -> onChirpFrontdoorReceived
    void notifyErrorObserverOnError(int) -> notifyErrorObserverOnError
    void notifyErrorObserverOnFrontDoor() -> notifyErrorObserverOnFrontDoor
    void setListener(io.chirp.chirpengine.ChirpEngineObserver) -> setListener
    java.lang.String getEngineVersion() -> getEngineVersion
    int getEngineBuildNumber() -> getEngineBuildNumber
    void setErrorListener(io.chirp.chirpengine.ChirpEngineErrorObserver) -> setErrorListener
    void enableListenToSelf(boolean) -> enableListenToSelf
    void enablePlayThrough(boolean) -> enablePlayThrough
    int getEngineState() -> getEngineState
    void setDiagnosticLevel(int) -> setDiagnosticLevel
    long getEngineStartTimeStampMS() -> getEngineStartTimeStampMS
    void <clinit>() -> <clinit>
io.chirp.chirpengine.ChirpEngineDiagnostics -> io.chirp.chirpengine.ChirpEngineDiagnostics:
    int diagnosticLevel -> diagnosticLevel
    boolean success -> success
    int errorsCorrected -> errorsCorrected
    java.lang.String engineDiagnostics -> engineDiagnostics
    long startTimeStampMilliS -> startTimeStampMilliS
    void <init>(int,boolean,int,java.lang.String,long) -> <init>
    int getDiagnosticLevel() -> getDiagnosticLevel
    boolean isSuccess() -> isSuccess
    int getErrorsCorrected() -> getErrorsCorrected
    java.lang.String getEngineDiagnostics() -> getEngineDiagnostics
    long getStartTimeStampMilliS() -> getStartTimeStampMilliS
io.chirp.chirpengine.ChirpEngineErrorObserver -> io.chirp.chirpengine.ChirpEngineErrorObserver:
    void onChirpErrorReceived(int) -> onChirpErrorReceived
    void onChirpFrontDoorReceived() -> onChirpFrontDoorReceived
io.chirp.chirpengine.ChirpEngineHelpers -> io.chirp.chirpengine.ChirpEngineHelpers:
    void <init>() -> <init>
    boolean is_valid_shortcode(java.lang.String) -> is_valid_shortcode
    int is_valid_array(int[]) -> is_valid_array
    int is_valid_identifier(java.lang.String) -> is_valid_identifier
    java.lang.String get_random_shortcode() -> get_random_shortcode
    int[] get_random_array(int) -> get_random_array
io.chirp.chirpengine.ChirpEngineJNI -> io.chirp.chirpengine.ChirpEngineJNI:
    void <init>() -> <init>
    void engine_start(java.lang.String) -> engine_start
    void engine_stop() -> engine_stop
    void process_buffer_in_shorts(short[],int) -> process_buffer_in_shorts
    void process_buffer_out_shorts(short[],int) -> process_buffer_out_shorts
    java.lang.String engine_version() -> engine_version
    int engine_build_number() -> engine_build_number
    int engine_buffer_size() -> engine_buffer_size
    int engine_state() -> engine_state
    void enable_listen_to_self(boolean) -> enable_listen_to_self
    void enable_playthrough(boolean) -> enable_playthrough
    boolean is_valid_shortcode(java.lang.String) -> is_valid_shortcode
    int is_valid_identifier(java.lang.String) -> is_valid_identifier
    int is_valid_array(int[]) -> is_valid_array
    java.lang.String get_random_shortcode() -> get_random_shortcode
    int[] get_random_array(int) -> get_random_array
    void set_diagnostic_level(int) -> set_diagnostic_level
    java.lang.String get_current_protocol_name() -> get_current_protocol_name
    void <clinit>() -> <clinit>
io.chirp.chirpengine.ChirpEngineObserver -> io.chirp.chirpengine.ChirpEngineObserver:
    void onChirpReceived(io.chirp.chirpengine.ChirpT,io.chirp.chirpengine.ChirpEngineDiagnostics) -> onChirpReceived
    void onChirpDecodeFailed(io.chirp.chirpengine.ChirpEngineDiagnostics) -> onChirpDecodeFailed
    void onFrontDoorReceived() -> onFrontDoorReceived
io.chirp.chirpengine.ChirpJNI -> io.chirp.chirpengine.ChirpJNI:
    void <init>() -> <init>
    long new_chirp() -> new_chirp
    void delete_chirp() -> delete_chirp
    void generate_random_chirp(long) -> generate_random_chirp
    void encode_string(long,java.lang.String) -> encode_string
    void encode_array(long,int[]) -> encode_array
    void decode_string(long,java.lang.String) -> decode_string
    java.lang.String get_identifier(long) -> get_identifier
    int[] get_message(long) -> get_message
    void play_chirp(long) -> play_chirp
    float get_chirp_duration() -> get_chirp_duration
    boolean get_decode_success(long) -> get_decode_success
io.chirp.chirpengine.ChirpProtocol -> io.chirp.chirpengine.ChirpProtocol:
    java.lang.String name -> name
    int symbolBits -> symbolBits
    int messageLength -> messageLength
    int parityLength -> parityLength
    float baseFrequency -> baseFrequency
    float interval -> interval
    int fftSize -> fftSize
    float frontdoorNoteLength -> frontdoorNoteLength
    float messageNoteLength -> messageNoteLength
    float envAttack -> envAttack
    float envRelease -> envRelease
    float portamento -> portamento
    float frontdoorSilenceLength -> frontdoorSilenceLength
    float messageSilenceLength -> messageSilenceLength
    int[] frontdoor -> frontdoor
    int frontdoorLength -> frontdoorLength
    io.chirp.chirpengine.ChirpProtocol standardProtocol() -> standardProtocol
    io.chirp.chirpengine.ChirpProtocol ultrasoundProtocol() -> ultrasoundProtocol
    void <init>(java.lang.String,int,int,int,float,float,int,float,float,float,float,float,float,float,int[],int) -> <init>
    void setProtocol() -> setProtocol
    void unsetProtocol() -> unsetProtocol
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getSymbolBits() -> getSymbolBits
    void setSymbolBits(int) -> setSymbolBits
    int getMessageLength() -> getMessageLength
    void setMessageLength(int) -> setMessageLength
    int getParityLength() -> getParityLength
    void setParityLength(int) -> setParityLength
    float getBaseFrequency() -> getBaseFrequency
    void setBaseFrequency(float) -> setBaseFrequency
    float getInterval() -> getInterval
    void setInterval(float) -> setInterval
    int getFftSize() -> getFftSize
    void setFftSize(int) -> setFftSize
    float getFrontdoorNoteLength() -> getFrontdoorNoteLength
    void setFrontdoorNoteLength(float) -> setFrontdoorNoteLength
    float getMessageNoteLength() -> getMessageNoteLength
    void setMessageNoteLength(float) -> setMessageNoteLength
    float getEnvAttack() -> getEnvAttack
    void setEnvAttack(float) -> setEnvAttack
    float getEnvRelease() -> getEnvRelease
    void setEnvRelease(float) -> setEnvRelease
    float getPortamento() -> getPortamento
    void setPortamento(float) -> setPortamento
    float getFrontdoorSilenceLength() -> getFrontdoorSilenceLength
    void setFrontdoorSilenceLength(float) -> setFrontdoorSilenceLength
    int[] getFrontdoor() -> getFrontdoor
    void setFrontdoor(int[]) -> setFrontdoor
    int getFrontdoorLength() -> getFrontdoorLength
    void setFrontdoorLength(int) -> setFrontdoorLength
    float getMessageSilenceLength() -> getMessageSilenceLength
    void setMessageSilenceLength(float) -> setMessageSilenceLength
io.chirp.chirpengine.ChirpProtocolJNI -> io.chirp.chirpengine.ChirpProtocolJNI:
    void <init>() -> <init>
    void set_protocol(java.lang.String,int,int,int,float,float,float,float,float,float,float,float,float,int[],int) -> set_protocol
    void unset_protocol() -> unset_protocol
    int default_symbol_bits() -> default_symbol_bits
    int default_message_length() -> default_message_length
    int default_parity_length() -> default_parity_length
    float default_base_frequency() -> default_base_frequency
    float default_interval() -> default_interval
    int default_fft_size() -> default_fft_size
    float default_frontdoor_note_length() -> default_frontdoor_note_length
    float default_message_note_length() -> default_message_note_length
    float default_env_attack() -> default_env_attack
    float default_env_release() -> default_env_release
    float default_portamento() -> default_portamento
    float default_silence_length() -> default_silence_length
    float default_frontdoor_silence_length() -> default_frontdoor_silence_length
    int[] default_frontdoor() -> default_frontdoor
    int default_frontdoor_length() -> default_frontdoor_length
    int us_symbol_bits() -> us_symbol_bits
    int us_message_length() -> us_message_length
    int us_parity_length() -> us_parity_length
    float us_base_frequency() -> us_base_frequency
    float us_interval() -> us_interval
    int us_fft_size() -> us_fft_size
    float us_frontdoor_note_length() -> us_frontdoor_note_length
    float us_message_note_length() -> us_message_note_length
    float us_env_attack() -> us_env_attack
    float us_env_release() -> us_env_release
    float us_portamento() -> us_portamento
    float us_silence_length() -> us_silence_length
    float us_frontdoor_silence_length() -> us_frontdoor_silence_length
    int[] us_frontdoor() -> us_frontdoor
    int us_frontdoor_length() -> us_frontdoor_length
io.chirp.chirpengine.ChirpT -> io.chirp.chirpengine.ChirpT:
    long chirp_t_ptr -> chirp_t_ptr
    io.chirp.chirpengine.ChirpT generateRandom() -> generateRandom
    void <init>() -> <init>
    void <init>(long) -> <init>
    long getPtr() -> getPtr
    void encode(java.lang.String) -> encode
    void encodeArray(int[]) -> encodeArray
    void decode(java.lang.String) -> decode
    java.lang.String getIdentifier() -> getIdentifier
    int[] getMessage() -> getMessage
    float getChirpDurationSeconds() -> getChirpDurationSeconds
    long getChirpDurationMillis() -> getChirpDurationMillis
    boolean getDecodeSuccess() -> getDecodeSuccess
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.chirp.chirpengine.SetProtocolNamedScenario -> io.chirp.chirpengine.SetProtocolNamedScenario:
    io.chirp.sdk.user.UserManager userManager -> userManager
    void <init>(android.content.Context) -> <init>
    io.chirp.sdk.result.ChirpProtocolResult setProtocol(io.chirp.sdk.model.ChirpProtocolName,boolean) -> setProtocol
io.chirp.logs.LogManager -> io.chirp.a.a:
    io.chirp.logs.LogManager$LogHandler logHandler -> a
    void enableLogs() -> a
    void writeLog(java.lang.String) -> a
    void writeLogCat(java.lang.String) -> b
    void <clinit>() -> <clinit>
io.chirp.logs.LogManager$1 -> io.chirp.a.b:
io.chirp.logs.LogManager$LogHandler -> io.chirp.a.c:
    void writeLog(java.lang.String) -> a
io.chirp.logs.LogManager$LogHandlerLogcat -> io.chirp.a.d:
    void <init>() -> <init>
    void writeLog(java.lang.String) -> a
    void <init>(io.chirp.logs.LogManager$1) -> <init>
io.chirp.logs.LogManager$LogHandlerNone -> io.chirp.a.e:
    void <init>() -> <init>
    void writeLog(java.lang.String) -> a
    void <init>(io.chirp.logs.LogManager$1) -> <init>
io.chirp.messenger.ChirpMessage -> io.chirp.messenger.a:
    io.chirp.messenger.ChirpMessage$Type type -> a
    java.lang.String message -> b
    java.lang.String identifier -> c
    void <init>(io.chirp.messenger.ChirpMessage$Type,java.lang.String,java.lang.String) -> <init>
    java.lang.String getMessage() -> a
    io.chirp.messenger.ChirpMessage$Type getType() -> b
    java.lang.String getIdentifier() -> c
io.chirp.messenger.ChirpMessage$Type -> io.chirp.messenger.b:
    io.chirp.messenger.ChirpMessage$Type RECEIVED -> a
    io.chirp.messenger.ChirpMessage$Type SENT -> b
    io.chirp.messenger.ChirpMessage$Type[] $VALUES -> c
    io.chirp.messenger.ChirpMessage$Type[] values() -> values
    io.chirp.messenger.ChirpMessage$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.chirp.messenger.MainActivity -> io.chirp.messenger.MainActivity:
    io.chirp.messenger.MessengerApplication app -> j
    io.chirp.sdk.ChirpSDK chirpSDK -> k
    io.chirp.sdk.ChirpSDKListener chirpSDKListener -> l
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    boolean doWeHaveRecordAudioPermission() -> j
    void onResume() -> onResume
    void onPause() -> onPause
    void onClick(android.view.View) -> onClick
    void readChirp(io.chirp.sdk.model.Chirp) -> a
    void access$000(io.chirp.messenger.MainActivity,io.chirp.sdk.model.Chirp) -> a
    io.chirp.sdk.ChirpSDK access$100(io.chirp.messenger.MainActivity) -> a
    io.chirp.messenger.MessengerApplication access$200(io.chirp.messenger.MainActivity) -> b
io.chirp.messenger.MainActivity$1 -> io.chirp.messenger.c:
    io.chirp.messenger.MainActivity this$0 -> a
    void <init>(io.chirp.messenger.MainActivity) -> <init>
    void onChirpHeard(io.chirp.sdk.model.Chirp) -> a
    void onChirpHearStarted() -> a
    void onChirpHearFailed() -> b
    void onChirpError(io.chirp.sdk.model.ChirpError) -> a
io.chirp.messenger.MainActivity$2 -> io.chirp.messenger.d:
    io.chirp.messenger.MainActivity this$0 -> a
    void <init>(io.chirp.messenger.MainActivity) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
io.chirp.messenger.MainActivity$4 -> io.chirp.messenger.e:
    io.chirp.messenger.MainActivity this$0 -> a
    void <init>(io.chirp.messenger.MainActivity) -> <init>
    void onReadResponse(io.chirp.sdk.model.Chirp) -> a
    void onReadError(io.chirp.sdk.model.ChirpError) -> a
io.chirp.messenger.MainActivity$4$1 -> io.chirp.messenger.f:
    io.chirp.sdk.model.Chirp val$chirp -> a
    io.chirp.messenger.MainActivity$4 this$1 -> b
    void <init>(io.chirp.messenger.MainActivity$4,io.chirp.sdk.model.Chirp) -> <init>
    void run() -> run
io.chirp.messenger.MainActivity$4$2 -> io.chirp.messenger.g:
    io.chirp.messenger.MainActivity$4 this$1 -> a
    void <init>(io.chirp.messenger.MainActivity$4) -> <init>
    void run() -> run
io.chirp.messenger.MessageArrayAdapter -> io.chirp.messenger.h:
    void <init>(android.content.Context,int,java.util.ArrayList) -> <init>
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
io.chirp.messenger.MessageArrayAdapter$1 -> io.chirp.messenger.i:
    int[] $SwitchMap$io$chirp$messenger$ChirpMessage$Type -> a
    void <clinit>() -> <clinit>
io.chirp.messenger.MessengerApplication -> io.chirp.messenger.MessengerApplication:
    java.util.ArrayList arrayList -> b
    io.chirp.messenger.MessageArrayAdapter adapter -> a
    void <init>() -> <init>
    void onCreate() -> onCreate
io.chirp.sdk.AudioBufferListener -> io.chirp.sdk.a:
    void onAudioBufferUpdate(int,short[]) -> a
io.chirp.sdk.BuildConfig -> io.chirp.sdk.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
io.chirp.sdk.CallbackCreate -> io.chirp.sdk.b:
    void onCreateResponse(io.chirp.sdk.model.Chirp) -> a
    void onCreateError(io.chirp.sdk.model.ChirpError) -> a
io.chirp.sdk.CallbackRead -> io.chirp.sdk.c:
    void onReadResponse(io.chirp.sdk.model.Chirp) -> a
    void onReadError(io.chirp.sdk.model.ChirpError) -> a
io.chirp.sdk.ChirpSDK -> io.chirp.sdk.ChirpSDK:
    android.content.Context context -> context
    io.chirp.sdk.ChirpSDKDelegator delegator -> delegator
    void <init>(android.content.Context,java.lang.String,java.lang.String,io.chirp.sdk.ChirpSDKStatusListener) -> <init>
    void <init>(android.content.Context,java.lang.String,java.lang.String) -> <init>
    void setListener(io.chirp.sdk.ChirpSDKListener) -> setListener
    void addAudioBufferListener(io.chirp.sdk.AudioBufferListener) -> addAudioBufferListener
    void removeAudioBufferListener(io.chirp.sdk.AudioBufferListener) -> removeAudioBufferListener
    void create(io.chirp.sdk.model.Chirp,io.chirp.sdk.CallbackCreate) -> create
    void read(io.chirp.sdk.model.Chirp,io.chirp.sdk.CallbackRead) -> read
    void start() -> start
    void stop() -> stop
    void chirp(io.chirp.sdk.model.Chirp) -> chirp
    void startStreaming(io.chirp.sdk.model.Chirp) -> startStreaming
    void stopStreaming() -> stopStreaming
    void setStreamingInterval(long) -> setStreamingInterval
    void setStreamingMode(io.chirp.sdk.model.ChirpStreamingMode) -> setStreamingMode
    io.chirp.sdk.model.ChirpStreamingMode getStreamMode() -> getStreamMode
    io.chirp.sdk.result.ChirpProtocolResult setProtocolNamed(io.chirp.sdk.model.ChirpProtocolName) -> setProtocolNamed
    io.chirp.sdk.model.ChirpAudioState getChirpAudioState() -> getChirpAudioState
    java.lang.String getVersion() -> getVersion
    void enableLogs() -> enableLogs
io.chirp.sdk.ChirpSDKDelegator -> io.chirp.sdk.ChirpSDKDelegator:
    java.util.concurrent.Executor backgroundExecutor -> backgroundExecutor
    java.lang.Thread audioThread -> audioThread
    io.chirp.sdk.helpers.PriorityWorkerThread audioProcessingThread -> audioProcessingThread
    java.util.List observers -> observers
    io.chirp.sdk.ChirpSDKStatusListener statusListener -> statusListener
    io.chirp.sdk.scenario.PlayRepeatingScenario playRepeatingScenario -> playRepeatingScenario
    io.chirp.sdk.model.ChirpStreamingMode chirpStreamingMode -> chirpStreamingMode
    android.content.Context context -> context
    long repeatIntervalMS -> repeatIntervalMS
    io.chirp.sdk.model.ChirpProtocolName currentChirpProtocolName -> currentChirpProtocolName
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.analytics.AnalyticsTracker analyticsTracker -> analyticsTracker
    io.chirp.sdk.boundary.ChirpAudioManager chirpAudioManager -> chirpAudioManager
    io.chirp.sdk.helpers.ConnectivityAdapter connectivityAdapter -> connectivityAdapter
    io.chirp.sdk.boundary.ChirpAudioManagerObserver chirpAudioManagerObserver -> chirpAudioManagerObserver
    io.chirp.sdk.observers.PlayObserver playObserver -> playObserver
    io.chirp.sdk.observers.AuthenticateObserver authenticateObserver -> authenticateObserver
    void <init>(android.content.Context,java.lang.String,java.lang.String) -> <init>
    void init(android.content.Context,io.chirp.sdk.ChirpSDKStatusListener) -> init
    java.util.concurrent.Executor makeBackgroundExecutor() -> makeBackgroundExecutor
    void authenticate(android.content.Context) -> authenticate
    void read(android.content.Context,io.chirp.sdk.model.Chirp,io.chirp.sdk.CallbackRead) -> read
    void create(android.content.Context,io.chirp.sdk.model.Chirp,io.chirp.sdk.CallbackCreate) -> create
    void play(io.chirp.sdk.model.Chirp) -> play
    void playRepeating(io.chirp.sdk.model.Chirp) -> playRepeating
    void stopRepeating() -> stopRepeating
    void setRepeatIntervalMS(long) -> setRepeatIntervalMS
    void setStreamMode(io.chirp.sdk.model.ChirpStreamingMode) -> setStreamMode
    io.chirp.sdk.model.ChirpStreamingMode getChirpStreamingMode() -> getChirpStreamingMode
    void startListening() -> startListening
    void stopListening() -> stopListening
    void setObserver(io.chirp.sdk.ChirpSDKListener) -> setObserver
    void addAudioBufferListener(io.chirp.sdk.AudioBufferListener) -> addAudioBufferListener
    void removeAudioBufferListener(io.chirp.sdk.AudioBufferListener) -> removeAudioBufferListener
    java.lang.String getVersion() -> getVersion
    void enableLogs() -> enableLogs
    io.chirp.sdk.model.ChirpAudioState getChirpAudioState() -> getChirpAudioState
    void notifyObserversChirpError(io.chirp.sdk.model.ChirpError) -> notifyObserversChirpError
    io.chirp.sdk.result.ChirpProtocolResult setProtocolNamed(io.chirp.sdk.model.ChirpProtocolName) -> setProtocolNamed
    void access$100(io.chirp.sdk.ChirpSDKDelegator,io.chirp.sdk.model.ChirpError) -> access$100
    io.chirp.sdk.ChirpSDKStatusListener access$200(io.chirp.sdk.ChirpSDKDelegator) -> access$200
    io.chirp.sdk.helpers.PriorityWorkerThread access$300(io.chirp.sdk.ChirpSDKDelegator) -> access$300
    io.chirp.sdk.boundary.ChirpAudioManager access$400(io.chirp.sdk.ChirpSDKDelegator) -> access$400
io.chirp.sdk.ChirpSDKDelegator$1 -> io.chirp.sdk.ChirpSDKDelegator$1:
    java.util.concurrent.atomic.AtomicInteger threadCounter -> threadCounter
    io.chirp.sdk.ChirpSDKDelegator this$0 -> this$0
    void <init>(io.chirp.sdk.ChirpSDKDelegator) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
io.chirp.sdk.ChirpSDKDelegator$1$1 -> io.chirp.sdk.ChirpSDKDelegator$1$1:
    java.lang.Runnable val$r -> val$r
    io.chirp.sdk.ChirpSDKDelegator$1 this$1 -> this$1
    void <init>(io.chirp.sdk.ChirpSDKDelegator$1,java.lang.Runnable) -> <init>
    void run() -> run
io.chirp.sdk.ChirpSDKDelegator$2 -> io.chirp.sdk.ChirpSDKDelegator$2:
    io.chirp.sdk.ChirpSDKDelegator this$0 -> this$0
    void <init>(io.chirp.sdk.ChirpSDKDelegator) -> <init>
    void onAudioError(io.chirp.sdk.boundary.ChirpAudioError) -> onAudioError
io.chirp.sdk.ChirpSDKDelegator$3 -> io.chirp.sdk.ChirpSDKDelegator$3:
    io.chirp.sdk.ChirpSDKDelegator this$0 -> this$0
    void <init>(io.chirp.sdk.ChirpSDKDelegator) -> <init>
    void onPlayError(io.chirp.sdk.model.ChirpError) -> onPlayError
io.chirp.sdk.ChirpSDKDelegator$4 -> io.chirp.sdk.ChirpSDKDelegator$4:
    io.chirp.sdk.ChirpSDKDelegator this$0 -> this$0
    void <init>(io.chirp.sdk.ChirpSDKDelegator) -> <init>
    void onAuthenticateError(io.chirp.sdk.model.ChirpError) -> onAuthenticateError
    void onAuthenticationSuccess() -> onAuthenticationSuccess
io.chirp.sdk.ChirpSDKDelegator$AudioThread -> io.chirp.sdk.ChirpSDKDelegator$AudioThread:
    io.chirp.sdk.ChirpSDKDelegator this$0 -> this$0
    void <init>(io.chirp.sdk.ChirpSDKDelegator) -> <init>
    void run() -> run
    void <init>(io.chirp.sdk.ChirpSDKDelegator,io.chirp.sdk.ChirpSDKDelegator$1) -> <init>
io.chirp.sdk.ChirpSDKHelpers -> io.chirp.sdk.ChirpSDKHelpers:
    void <init>() -> <init>
    io.chirp.sdk.result.ChirpValidationResult isValidIdentifier(java.lang.String) -> isValidIdentifier
    io.chirp.sdk.result.ChirpValidationResult isValidArray(int[]) -> isValidArray
    java.lang.String generateRandomIdentifier() -> generateRandomIdentifier
    int[] generateRandomArray(int) -> generateRandomArray
    io.chirp.sdk.model.Chirp generateRandomChirp() -> generateRandomChirp
io.chirp.sdk.ChirpSDKListener -> io.chirp.sdk.d:
    void onChirpHeard(io.chirp.sdk.model.Chirp) -> a
    void onChirpHearStarted() -> a
    void onChirpHearFailed() -> b
    void onChirpError(io.chirp.sdk.model.ChirpError) -> a
io.chirp.sdk.ChirpSDKStatusListener -> io.chirp.sdk.e:
    void onAuthenticationSuccess() -> a
    void onChirpError(io.chirp.sdk.model.ChirpError) -> a
io.chirp.sdk.R -> io.chirp.sdk.R:
    void <init>() -> <init>
io.chirp.sdk.R$string -> io.chirp.sdk.R$string:
    int app_name -> app_name
    void <init>() -> <init>
io.chirp.sdk.analytics.AnalyticsBroadcastReceiver -> io.chirp.sdk.analytics.AnalyticsBroadcastReceiver:
    int REQUEST_CODE -> REQUEST_CODE
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
io.chirp.sdk.analytics.AnalyticsBroadcastReceiver$UploadAnalyticsWorkerThread -> io.chirp.sdk.analytics.AnalyticsBroadcastReceiver$UploadAnalyticsWorkerThread:
    android.content.Context context -> context
    java.lang.String appKey -> appKey
    java.lang.String appSecret -> appSecret
    io.chirp.sdk.analytics.AnalyticsBroadcastReceiver this$0 -> this$0
    void <init>(io.chirp.sdk.analytics.AnalyticsBroadcastReceiver,android.content.Context,java.lang.String,java.lang.String) -> <init>
    void run() -> run
io.chirp.sdk.analytics.AnalyticsDatabaseAdapter -> io.chirp.sdk.analytics.AnalyticsDatabaseAdapter:
    int MAX_BATCH_UPLOAD -> MAX_BATCH_UPLOAD
    android.content.Context context -> context
    io.chirp.sdk.boundary.database.ChirpSDKDatabaseHelper chirpSDKDatabaseHelper -> chirpSDKDatabaseHelper
    void <init>(android.content.Context) -> <init>
    void recordSay(io.chirp.sdk.model.Chirp,io.chirp.sdk.boundary.DiagnosticsCollector) -> recordSay
    void recordHear(io.chirp.sdk.model.Chirp,io.chirp.sdk.boundary.DiagnosticsCollector) -> recordHear
    java.util.List getSays(com.j256.ormlite.dao.Dao) -> getSays
    java.util.List getHears(com.j256.ormlite.dao.Dao) -> getHears
    void deleteSaysFromDb(java.util.List,com.j256.ormlite.dao.Dao) -> deleteSaysFromDb
    void deleteHearsFromDb(java.util.List,com.j256.ormlite.dao.Dao) -> deleteHearsFromDb
    void deleteDiagnosticHearsFromDb(java.util.List,com.j256.ormlite.dao.Dao) -> deleteDiagnosticHearsFromDb
    void deleteDiagnosticSaysFromDb(java.util.List,com.j256.ormlite.dao.Dao) -> deleteDiagnosticSaysFromDb
    java.lang.String getRandomUUID() -> getRandomUUID
io.chirp.sdk.analytics.AnalyticsPayloadBuilder -> io.chirp.sdk.analytics.AnalyticsPayloadBuilder:
    void <init>() -> <init>
    com.google.gson.JsonArray createJsonPayloadHears(java.util.List) -> createJsonPayloadHears
    com.google.gson.JsonObject createHearJson(io.chirp.sdk.boundary.database.entity.Hear) -> createHearJson
    com.google.gson.JsonArray createJsonPayloadSays(java.util.List) -> createJsonPayloadSays
    com.google.gson.JsonObject createSayJson(io.chirp.sdk.boundary.database.entity.Say) -> createSayJson
    com.google.gson.JsonObject createDiagnosticJson(io.chirp.sdk.boundary.database.entity.Diagnostics) -> createDiagnosticJson
io.chirp.sdk.analytics.AnalyticsService -> io.chirp.sdk.analytics.AnalyticsService:
    int FIRST_PERIOD -> FIRST_PERIOD
    java.lang.String APP_KEY -> APP_KEY
    java.lang.String APP_SECRET -> APP_SECRET
    android.os.IBinder binder -> binder
    void <init>() -> <init>
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void start(java.lang.String,java.lang.String) -> start
    long calcStartTime() -> calcStartTime
    long calcInterval() -> calcInterval
io.chirp.sdk.analytics.AnalyticsService$AnalyticsBinder -> io.chirp.sdk.analytics.AnalyticsService$AnalyticsBinder:
    io.chirp.sdk.analytics.AnalyticsService this$0 -> this$0
    void <init>(io.chirp.sdk.analytics.AnalyticsService) -> <init>
    io.chirp.sdk.analytics.AnalyticsService getService() -> getService
io.chirp.sdk.analytics.AnalyticsTracker -> io.chirp.sdk.analytics.AnalyticsTracker:
    android.content.Context context -> context
    io.chirp.sdk.analytics.AnalyticsDatabaseAdapter analyticsDatabaseAdapter -> analyticsDatabaseAdapter
    void <init>(android.content.Context,java.lang.String,java.lang.String) -> <init>
    void start(java.lang.String,java.lang.String) -> start
    void recordSay(io.chirp.sdk.model.Chirp,io.chirp.sdk.boundary.DiagnosticsCollector) -> recordSay
    void recordHear(io.chirp.sdk.model.Chirp,io.chirp.sdk.boundary.DiagnosticsCollector) -> recordHear
io.chirp.sdk.analytics.StaticAnalyticsPayloadBuilder -> io.chirp.sdk.analytics.StaticAnalyticsPayloadBuilder:
    io.chirp.sdk.boundary.StatsCollector statsCollector -> statsCollector
    void <init>(io.chirp.sdk.boundary.StatsCollector) -> <init>
    com.google.gson.JsonObject createStaticMetaJson() -> createStaticMetaJson
    com.google.gson.JsonObject createStaticDiagnosticJson(int) -> createStaticDiagnosticJson
io.chirp.sdk.boundary.ChirpApi -> io.chirp.sdk.boundary.a:
    io.chirp.sdk.boundary.responses.AuthenticateResponse authenticate(io.chirp.sdk.entity.AuthenticateRequestData) -> authenticate
    io.chirp.sdk.boundary.responses.ChirpResponse create(io.chirp.sdk.entity.ChirpRequestData) -> create
    io.chirp.sdk.boundary.responses.ChirpResponse read(io.chirp.sdk.entity.ChirpData) -> read
    io.chirp.sdk.boundary.responses.AnalyticsResponse analytics(com.google.gson.JsonArray) -> analytics
    void setAccessToken(java.lang.String) -> setAccessToken
    boolean validateKeyAndSecret() -> validateKeyAndSecret
io.chirp.sdk.boundary.ChirpAudioError -> io.chirp.sdk.boundary.ChirpAudioError:
    java.lang.String message -> message
    int code -> code
    io.chirp.sdk.boundary.ChirpAudioError createGenericError(java.lang.String) -> createGenericError
    io.chirp.sdk.boundary.ChirpAudioError createMicrophonePermissionsRequiredError() -> createMicrophonePermissionsRequiredError
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getMessage() -> getMessage
    int getCode() -> getCode
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.chirp.sdk.boundary.ChirpAudioManager -> io.chirp.sdk.boundary.ChirpAudioManager:
    int BUFFER_SIZE_IN_BYTES -> BUFFER_SIZE_IN_BYTES
    int RING_BUFFER_SIZE -> RING_BUFFER_SIZE
    boolean isAudioRunning -> isAudioRunning
    android.media.AudioTrack audioPlayer -> audioPlayer
    android.media.AudioRecord audioRecorder -> audioRecorder
    int sampleRate -> sampleRate
    android.content.Context context -> context
    io.chirp.sdk.boundary.ChirpAudioManagerObserver chirpAudioManagerObserver -> chirpAudioManagerObserver
    java.util.List audioBufferListeners -> audioBufferListeners
    android.os.Handler audioProcessingHandler -> audioProcessingHandler
    short[] inBuffer -> inBuffer
    short[] outBuffer -> outBuffer
    short[] inBufferTemp -> inBufferTemp
    io.chirp.sdk.helpers.RingBuffer inRingBuffer -> inRingBuffer
    android.media.AudioRecord$OnRecordPositionUpdateListener onRecordPositionUpdateListener -> onRecordPositionUpdateListener
    void <init>() -> <init>
    void initialise(android.content.Context,java.lang.String) -> initialise
    void chirp(io.chirp.sdk.model.Chirp) -> chirp
    void setAudioProcessingHandler(android.os.Handler) -> setAudioProcessingHandler
    void setObserver(io.chirp.sdk.boundary.ChirpAudioManagerObserver) -> setObserver
    void startListening() -> startListening
    void stopListening() -> stopListening
    void determineSampleRate() -> determineSampleRate
    void setupAudioRecorder() -> setupAudioRecorder
    void setupAudioPlayer() -> setupAudioPlayer
    void cleanup() -> cleanup
    void cleanupAudioPlayer() -> cleanupAudioPlayer
    void cleanupAudioRecord() -> cleanupAudioRecord
    void notifyObserversOnError(io.chirp.sdk.boundary.ChirpAudioError) -> notifyObserversOnError
    void addAudioBufferListener(io.chirp.sdk.AudioBufferListener) -> addAudioBufferListener
    void removeAudioBufferListener(io.chirp.sdk.AudioBufferListener) -> removeAudioBufferListener
    void notifyObserversOnBufferUpdate(int,short[]) -> notifyObserversOnBufferUpdate
    boolean isVolumeTooLow() -> isVolumeTooLow
    boolean hasStarted() -> hasStarted
    short[] access$000(io.chirp.sdk.boundary.ChirpAudioManager) -> access$000
    io.chirp.sdk.helpers.RingBuffer access$100(io.chirp.sdk.boundary.ChirpAudioManager) -> access$100
    void access$200(io.chirp.sdk.boundary.ChirpAudioManager,int,short[]) -> access$200
    void <clinit>() -> <clinit>
io.chirp.sdk.boundary.ChirpAudioManager$1 -> io.chirp.sdk.boundary.ChirpAudioManager$1:
    io.chirp.sdk.boundary.ChirpAudioManager this$0 -> this$0
    void <init>(io.chirp.sdk.boundary.ChirpAudioManager) -> <init>
    void onMarkerReached(android.media.AudioRecord) -> onMarkerReached
    void onPeriodicNotification(android.media.AudioRecord) -> onPeriodicNotification
io.chirp.sdk.boundary.ChirpAudioManagerObserver -> io.chirp.sdk.boundary.b:
    void onAudioError(io.chirp.sdk.boundary.ChirpAudioError) -> onAudioError
io.chirp.sdk.boundary.DiagnosticsCollector -> io.chirp.sdk.boundary.c:
    void populateHear(android.content.Context,io.chirp.chirpengine.ChirpEngineDiagnostics,long,boolean) -> populateHear
    void populateSay(android.content.Context,int,boolean,long,long,boolean) -> populateSay
    io.chirp.sdk.boundary.database.entity.Diagnostics getDiagnostics() -> getDiagnostics
io.chirp.sdk.boundary.DiagnosticsCollectorReal -> io.chirp.sdk.boundary.DiagnosticsCollectorReal:
    java.lang.String CHIRP_DIAGNOSTICS_SUCCESS -> CHIRP_DIAGNOSTICS_SUCCESS
    java.lang.String CHIRP_DIAGNOSTICS_DECODER_FAILURE -> CHIRP_DIAGNOSTICS_DECODER_FAILURE
    java.lang.String CHIRP_DIAGNOSTICS_NETWORK_TYPE_WIFI -> CHIRP_DIAGNOSTICS_NETWORK_TYPE_WIFI
    java.lang.String CHIRP_DIAGNOSTICS_NETWORK_TYPE_CELLULAR -> CHIRP_DIAGNOSTICS_NETWORK_TYPE_CELLULAR
    java.lang.String CHIRP_DIAGNOSTICS_NETWORK_TYPE_NONE -> CHIRP_DIAGNOSTICS_NETWORK_TYPE_NONE
    java.lang.String CHIRP_DIAGNOSTICS_NETWORK_TYPE_UNKNOWN -> CHIRP_DIAGNOSTICS_NETWORK_TYPE_UNKNOWN
    int diagnosticLevel -> diagnosticLevel
    boolean streamingModeOn -> streamingModeOn
    java.lang.String success -> success
    int errorsCorrected -> errorsCorrected
    float cpuLoad -> cpuLoad
    long deviceMemoryAvailable -> deviceMemoryAvailable
    long deviceHeapAvailable -> deviceHeapAvailable
    java.lang.String deviceNetworkType -> deviceNetworkType
    int deviceNetworkSpeed -> deviceNetworkSpeed
    long engineSessionTime -> engineSessionTime
    long sdkSessionTime -> sdkSessionTime
    java.lang.String engineDiagnostics -> engineDiagnostics
    float deviceAudioHardwareVolume -> deviceAudioHardwareVolume
    void <init>() -> <init>
    void <init>(int,boolean,java.lang.String,int,float,long,long,java.lang.String,int,int,int,java.lang.String,float) -> <init>
    void populateHear(android.content.Context,io.chirp.chirpengine.ChirpEngineDiagnostics,long,boolean) -> populateHear
    void populateSay(android.content.Context,int,boolean,long,long,boolean) -> populateSay
    void populateStats(android.content.Context) -> populateStats
    int collectCPULoad() -> collectCPULoad
    long collectDeviceHeapAvailableBytes() -> collectDeviceHeapAvailableBytes
    long collectDeviceMemoryAvailableBytes(android.content.Context) -> collectDeviceMemoryAvailableBytes
    java.lang.String collectDeviceNetworkType(android.content.Context) -> collectDeviceNetworkType
    int collectDeviceNetworkSpeed() -> collectDeviceNetworkSpeed
    float collectHardwareVolumeLevel(android.content.Context) -> collectHardwareVolumeLevel
    int getDiagnosticLevel() -> getDiagnosticLevel
    java.lang.String getSuccess() -> getSuccess
    int getErrorsCorrected() -> getErrorsCorrected
    float getCpuLoad() -> getCpuLoad
    long getDeviceMemoryAvailable() -> getDeviceMemoryAvailable
    long getDeviceHeapAvailable() -> getDeviceHeapAvailable
    java.lang.String getDeviceNetworkType() -> getDeviceNetworkType
    int getDeviceNetworkSpeed() -> getDeviceNetworkSpeed
    long getEngineSessionTime() -> getEngineSessionTime
    long getSdkSessionTime() -> getSdkSessionTime
    java.lang.String getEngineDiagnostics() -> getEngineDiagnostics
    float getDeviceAudioHardwareVolume() -> getDeviceAudioHardwareVolume
    io.chirp.sdk.boundary.database.entity.Diagnostics getDiagnostics() -> getDiagnostics
    long determineSessionTime(long) -> determineSessionTime
io.chirp.sdk.boundary.SettingsStore -> io.chirp.sdk.boundary.d:
    int getStoredInteger(java.lang.String) -> getStoredInteger
    void storeInteger(java.lang.String,int) -> storeInteger
    java.lang.String getStoredString(java.lang.String) -> getStoredString
    java.lang.Object getStoredObject(java.lang.String,java.lang.Class) -> getStoredObject
    void storeString(java.lang.String,java.lang.String) -> storeString
    void storeObject(java.lang.String,java.lang.Object) -> storeObject
io.chirp.sdk.boundary.SettingsStoreSharedPreferences -> io.chirp.sdk.boundary.SettingsStoreSharedPreferences:
    android.content.SharedPreferences sharedPreferences -> sharedPreferences
    void <init>(android.content.Context) -> <init>
    int getStoredInteger(java.lang.String) -> getStoredInteger
    java.lang.String getStoredString(java.lang.String) -> getStoredString
    java.lang.Object getStoredObject(java.lang.String,java.lang.Class) -> getStoredObject
    void storeInteger(java.lang.String,int) -> storeInteger
    void storeString(java.lang.String,java.lang.String) -> storeString
    void storeObject(java.lang.String,java.lang.Object) -> storeObject
io.chirp.sdk.boundary.StatsCollector -> io.chirp.sdk.boundary.e:
    java.lang.String getDeviceMake() -> getDeviceMake
    java.lang.String getDeviceModel() -> getDeviceModel
    java.lang.String getOS() -> getOS
    java.lang.String getOSVersion() -> getOSVersion
    java.lang.String getSDKVersion() -> getSDKVersion
    int getSDKBuildNumber() -> getSDKBuildNumber
    java.lang.String getEngineVersion() -> getEngineVersion
    int getEngineBuildNumber() -> getEngineBuildNumber
    java.lang.String getEngineProtocol() -> getEngineProtocol
    java.lang.String getHostApplicationId() -> getHostApplicationId
    long getTotalMemory() -> getTotalMemory
    long getTotalHeap() -> getTotalHeap
    java.lang.String getChipset() -> getChipset
    int getAudioBufferSize() -> getAudioBufferSize
    int getAudioSampleRate() -> getAudioSampleRate
io.chirp.sdk.boundary.StatsCollectorReal -> io.chirp.sdk.boundary.StatsCollectorReal:
    java.lang.String deviceMake -> deviceMake
    java.lang.String deviceModel -> deviceModel
    java.lang.String os -> os
    java.lang.String osVersion -> osVersion
    java.lang.String sdkVersion -> sdkVersion
    int sdkBuildNumber -> sdkBuildNumber
    java.lang.String engineVersion -> engineVersion
    int engineBuildNumber -> engineBuildNumber
    java.lang.String engineProtocol -> engineProtocol
    java.lang.String hostApplicationId -> hostApplicationId
    float cpuSpeed -> cpuSpeed
    long totalMemory -> totalMemory
    long totalHeap -> totalHeap
    java.lang.String chipset -> chipset
    int audioBufferSize -> audioBufferSize
    int audioSampleRate -> audioSampleRate
    void <init>(android.content.Context) -> <init>
    java.lang.String collectEngineProtocol() -> collectEngineProtocol
    java.lang.String getHostAppPackageName(android.content.Context) -> getHostAppPackageName
    long collectTotalMemoryBytes(android.content.Context) -> collectTotalMemoryBytes
    long collectTotalHeapBytes(android.content.Context) -> collectTotalHeapBytes
    java.lang.String collectSdkVersion() -> collectSdkVersion
    float collectCpuSpeed() -> collectCpuSpeed
    java.lang.String getDeviceMake() -> getDeviceMake
    java.lang.String getDeviceModel() -> getDeviceModel
    java.lang.String getOS() -> getOS
    java.lang.String getOSVersion() -> getOSVersion
    java.lang.String getSDKVersion() -> getSDKVersion
    int getSDKBuildNumber() -> getSDKBuildNumber
    java.lang.String getEngineVersion() -> getEngineVersion
    int getEngineBuildNumber() -> getEngineBuildNumber
    java.lang.String getEngineProtocol() -> getEngineProtocol
    java.lang.String getHostApplicationId() -> getHostApplicationId
    float getCPUSpeed() -> getCPUSpeed
    long getTotalMemory() -> getTotalMemory
    long getTotalHeap() -> getTotalHeap
    java.lang.String getChipset() -> getChipset
    int getAudioBufferSize() -> getAudioBufferSize
    int getAudioSampleRate() -> getAudioSampleRate
io.chirp.sdk.boundary.database.ChirpSDKDatabaseHelper -> io.chirp.sdk.boundary.database.ChirpSDKDatabaseHelper:
    java.lang.String DATABASE_NAME -> DATABASE_NAME
    int DATABASE_VERSION -> DATABASE_VERSION
    com.j256.ormlite.dao.Dao hearDao -> hearDao
    com.j256.ormlite.dao.Dao sayDao -> sayDao
    com.j256.ormlite.dao.Dao diagnosticsDao -> diagnosticsDao
    void <init>(android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource,int,int) -> onUpgrade
    com.j256.ormlite.dao.Dao getHearDao() -> getHearDao
    com.j256.ormlite.dao.Dao getSayDao() -> getSayDao
    com.j256.ormlite.dao.Dao getDiagnosticsDao() -> getDiagnosticsDao
    void updateDBFrom2to3() -> updateDBFrom2to3
io.chirp.sdk.boundary.database.entity.Diagnostics -> io.chirp.sdk.boundary.database.entity.Diagnostics:
    long id -> id
    int streamingModeOn -> streamingModeOn
    int errorsCorrected -> errorsCorrected
    java.lang.String success -> success
    float cpuLoad -> cpuLoad
    long deviceMemoryAvailable -> deviceMemoryAvailable
    long deviceHeapAvailable -> deviceHeapAvailable
    java.lang.String deviceNetworkType -> deviceNetworkType
    int deviceNetworkSpeed -> deviceNetworkSpeed
    long engineSessionTime -> engineSessionTime
    long sdkSessionTime -> sdkSessionTime
    int logLevel -> logLevel
    java.lang.String engineDiagnostic -> engineDiagnostic
    float deviceAudioHardwareVolume -> deviceAudioHardwareVolume
    float deviceAudioSoftwareVolume -> deviceAudioSoftwareVolume
    void <init>() -> <init>
    void <init>(long,int,int,java.lang.String,float,int,int,java.lang.String,int,long,long,float,float,int,java.lang.String) -> <init>
    long getId() -> getId
    void setId(long) -> setId
    int getErrorsCorrected() -> getErrorsCorrected
    void setErrorsCorrected(int) -> setErrorsCorrected
    java.lang.String getSuccess() -> getSuccess
    void setSuccess(java.lang.String) -> setSuccess
    float getCpuLoad() -> getCpuLoad
    void setCpuLoad(float) -> setCpuLoad
    long getDeviceMemoryAvailable() -> getDeviceMemoryAvailable
    void setDeviceMemoryAvailable(long) -> setDeviceMemoryAvailable
    long getDeviceHeapAvailable() -> getDeviceHeapAvailable
    void setDeviceHeapAvailable(long) -> setDeviceHeapAvailable
    java.lang.String getDeviceNetworkType() -> getDeviceNetworkType
    void setDeviceNetworkType(java.lang.String) -> setDeviceNetworkType
    int getDeviceNetworkSpeed() -> getDeviceNetworkSpeed
    void setDeviceNetworkSpeed(int) -> setDeviceNetworkSpeed
    long getEngineSessionTime() -> getEngineSessionTime
    float getEngineSessionTimeSeconds() -> getEngineSessionTimeSeconds
    void setEngineSessionTime(long) -> setEngineSessionTime
    long getSdkSessionTime() -> getSdkSessionTime
    float getSdkSessionTimeSeconds() -> getSdkSessionTimeSeconds
    void setSdkSessionTime(long) -> setSdkSessionTime
    java.lang.String getEngineDiagnostic() -> getEngineDiagnostic
    void setEngineDiagnostic(java.lang.String) -> setEngineDiagnostic
    int getLogLevel() -> getLogLevel
    void setLogLevel(int) -> setLogLevel
    float getDeviceAudioHardwareVolume() -> getDeviceAudioHardwareVolume
    void setDeviceAudioHardwareVolume(float) -> setDeviceAudioHardwareVolume
    float getDeviceAudioSoftwareVolume() -> getDeviceAudioSoftwareVolume
    void setDeviceAudioSoftwareVolume(float) -> setDeviceAudioSoftwareVolume
    int getStreamingModeOn() -> getStreamingModeOn
    void setStreamingModeOn(boolean) -> setStreamingModeOn
io.chirp.sdk.boundary.database.entity.Hear -> io.chirp.sdk.boundary.database.entity.Hear:
    long id -> id
    java.lang.String uuid -> uuid
    long timestamp -> timestamp
    java.lang.String identifier -> identifier
    io.chirp.sdk.boundary.database.entity.Diagnostics diagnostics -> diagnostics
    void <init>() -> <init>
    void <init>(long,java.lang.String,long,java.lang.String,io.chirp.sdk.boundary.database.entity.Diagnostics) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getId() -> getId
    void setId(long) -> setId
    long getTimestamp() -> getTimestamp
    void setTimestamp(long) -> setTimestamp
    java.lang.String getIdentifier() -> getIdentifier
    void setIdentifier(java.lang.String) -> setIdentifier
    java.lang.String getUuid() -> getUuid
    void setUuid(java.lang.String) -> setUuid
    io.chirp.sdk.boundary.database.entity.Diagnostics getDiagnostics() -> getDiagnostics
    void setDiagnostics(io.chirp.sdk.boundary.database.entity.Diagnostics) -> setDiagnostics
io.chirp.sdk.boundary.database.entity.Say -> io.chirp.sdk.boundary.database.entity.Say:
    long id -> id
    java.lang.String uuid -> uuid
    long timestamp -> timestamp
    java.lang.String identifier -> identifier
    io.chirp.sdk.boundary.database.entity.Diagnostics diagnostics -> diagnostics
    void <init>() -> <init>
    void <init>(long,java.lang.String,long,java.lang.String,io.chirp.sdk.boundary.database.entity.Diagnostics) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getId() -> getId
    void setId(long) -> setId
    long getTimestamp() -> getTimestamp
    void setTimestamp(long) -> setTimestamp
    java.lang.String getIdentifier() -> getIdentifier
    void setIdentifier(java.lang.String) -> setIdentifier
    java.lang.String getUuid() -> getUuid
    void setUuid(java.lang.String) -> setUuid
    io.chirp.sdk.boundary.database.entity.Diagnostics getDiagnostics() -> getDiagnostics
    void setDiagnostics(io.chirp.sdk.boundary.database.entity.Diagnostics) -> setDiagnostics
io.chirp.sdk.boundary.responses.AnalyticsResponse -> io.chirp.sdk.boundary.responses.AnalyticsResponse:
    io.chirp.sdk.entity.ChirpAPIError chirpAPIError -> chirpAPIError
    void <init>() -> <init>
    void <init>(io.chirp.sdk.entity.ChirpAPIError) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    io.chirp.sdk.entity.ChirpAPIError getChirpAPIError() -> getChirpAPIError
io.chirp.sdk.boundary.responses.AuthenticateResponse -> io.chirp.sdk.boundary.responses.AuthenticateResponse:
    io.chirp.sdk.entity.AuthenticateData authenticateData -> authenticateData
    io.chirp.sdk.entity.ChirpAPIError chirpAPIError -> chirpAPIError
    void <init>(io.chirp.sdk.entity.AuthenticateData,io.chirp.sdk.entity.ChirpAPIError) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    io.chirp.sdk.entity.ChirpAPIError getChirpAPIError() -> getChirpAPIError
    io.chirp.sdk.entity.AuthenticateData getAuthenticateData() -> getAuthenticateData
io.chirp.sdk.boundary.responses.ChirpResponse -> io.chirp.sdk.boundary.responses.ChirpResponse:
    io.chirp.sdk.entity.ChirpData chirpData -> chirpData
    io.chirp.sdk.entity.ChirpAPIError chirpAPIError -> chirpAPIError
    void <init>(io.chirp.sdk.entity.ChirpData,io.chirp.sdk.entity.ChirpAPIError) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    io.chirp.sdk.entity.ChirpData getChirpData() -> getChirpData
    io.chirp.sdk.entity.ChirpAPIError getChirpAPIError() -> getChirpAPIError
io.chirp.sdk.boundary.retrofit.ChirpApiAdapter -> io.chirp.sdk.boundary.retrofit.ChirpApiAdapter:
    retrofit2.Call authenticate(com.google.gson.JsonObject) -> authenticate
    retrofit2.Call create(java.lang.String,okhttp3.RequestBody) -> create
    retrofit2.Call read(java.lang.String,java.lang.String) -> read
    retrofit2.Call analytics(java.lang.String,com.google.gson.JsonArray) -> analytics
io.chirp.sdk.boundary.retrofit.ChirpApiRetrofit -> io.chirp.sdk.boundary.retrofit.ChirpApiRetrofit:
    java.lang.String API_BASE_URL -> API_BASE_URL
    java.lang.String ANALYTICS_BASE_URL -> ANALYTICS_BASE_URL
    boolean enableLogs -> enableLogs
    int CONNECT_TIMEOUT_MILLIS -> CONNECT_TIMEOUT_MILLIS
    int READ_TIMEOUT_MILLIS -> READ_TIMEOUT_MILLIS
    int API_KEY_LENGTH -> API_KEY_LENGTH
    int API_SECRET_LENGTH -> API_SECRET_LENGTH
    io.chirp.sdk.boundary.retrofit.ChirpApiAdapter apiAdapter -> apiAdapter
    io.chirp.sdk.boundary.retrofit.ChirpApiAdapter analyticsAdapter -> analyticsAdapter
    java.lang.String apiKey -> apiKey
    java.lang.String secret -> secret
    java.lang.String accessToken -> accessToken
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    io.chirp.sdk.boundary.retrofit.ChirpApiAdapter getService(java.lang.String) -> getService
    io.chirp.sdk.boundary.responses.AuthenticateResponse authenticate(io.chirp.sdk.entity.AuthenticateRequestData) -> authenticate
    io.chirp.sdk.boundary.responses.ChirpResponse create(io.chirp.sdk.entity.ChirpRequestData) -> create
    io.chirp.sdk.boundary.responses.ChirpResponse read(io.chirp.sdk.entity.ChirpData) -> read
    io.chirp.sdk.boundary.responses.AnalyticsResponse analytics(com.google.gson.JsonArray) -> analytics
    void setAccessToken(java.lang.String) -> setAccessToken
    boolean validateKeyAndSecret() -> validateKeyAndSecret
    boolean containsHTTPErrorResponse(retrofit2.Response) -> containsHTTPErrorResponse
    io.chirp.sdk.entity.ChirpAPIError handleIOException(java.io.IOException) -> handleIOException
    io.chirp.sdk.entity.ChirpAPIError handleErrorResponse(retrofit2.Response) -> handleErrorResponse
    boolean validateChirpHeaderIsPresent(okhttp3.Headers) -> validateChirpHeaderIsPresent
    okhttp3.OkHttpClient setupOkHttpClient() -> setupOkHttpClient
io.chirp.sdk.boundary.retrofit.converter.AuthenticateConverter -> io.chirp.sdk.boundary.retrofit.converter.AuthenticateConverter:
    void <init>() -> <init>
    io.chirp.sdk.entity.AuthenticateData deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
io.chirp.sdk.boundary.retrofit.converter.ChirpConverter -> io.chirp.sdk.boundary.retrofit.converter.ChirpConverter:
    void <init>() -> <init>
    io.chirp.sdk.entity.ChirpData deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
io.chirp.sdk.boundary.retrofit.converter.ErrorConverter -> io.chirp.sdk.boundary.retrofit.converter.ErrorConverter:
    void <init>() -> <init>
    io.chirp.sdk.entity.ChirpAPIError deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
io.chirp.sdk.common.BuildConfig -> io.chirp.sdk.common.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
io.chirp.sdk.database.BuildConfig -> io.chirp.sdk.database.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
io.chirp.sdk.engine.BuildConfig -> io.chirp.sdk.engine.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    boolean ENABLE_LOGS -> ENABLE_LOGS
    void <init>() -> <init>
io.chirp.sdk.entity.AccessToken -> io.chirp.sdk.entity.AccessToken:
    java.lang.String accessToken -> accessToken
    java.lang.String expiresAt -> expiresAt
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>() -> <init>
    java.lang.String getToken() -> getToken
    java.lang.String getExpiresAt() -> getExpiresAt
    boolean isValid() -> isValid
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.chirp.sdk.entity.AuthenticateData -> io.chirp.sdk.entity.AuthenticateData:
    io.chirp.sdk.entity.AccessToken accessToken -> accessToken
    io.chirp.sdk.entity.PermissionsData permissionsData -> permissionsData
    int diagnosticLevel -> diagnosticLevel
    void <init>(io.chirp.sdk.entity.AccessToken,io.chirp.sdk.entity.PermissionsData,int) -> <init>
    io.chirp.sdk.entity.AccessToken getAccessToken() -> getAccessToken
    io.chirp.sdk.entity.PermissionsData getPermissionsData() -> getPermissionsData
    int getDiagnosticLevel() -> getDiagnosticLevel
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.chirp.sdk.entity.AuthenticateRequestData -> io.chirp.sdk.entity.AuthenticateRequestData:
    java.lang.String deviceId -> deviceId
    com.google.gson.JsonObject metaJson -> metaJson
    com.google.gson.JsonObject diagnosticJson -> diagnosticJson
    void <init>(java.lang.String,com.google.gson.JsonObject,com.google.gson.JsonObject) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getDeviceId() -> getDeviceId
    com.google.gson.JsonObject getMetaJson() -> getMetaJson
    com.google.gson.JsonObject getDiagnosticJson() -> getDiagnosticJson
io.chirp.sdk.entity.ChirpAPIError -> io.chirp.sdk.entity.ChirpAPIError:
    java.lang.String message -> message
    int code -> code
    int API_ERROR_400 -> API_ERROR_400
    int API_ERROR_401 -> API_ERROR_401
    int API_ERROR_403 -> API_ERROR_403
    io.chirp.sdk.entity.ChirpAPIError createBadlyFormedKeySecretError() -> createBadlyFormedKeySecretError
    io.chirp.sdk.entity.ChirpAPIError createUnauthorisedError() -> createUnauthorisedError
    io.chirp.sdk.entity.ChirpAPIError createForbiddenError() -> createForbiddenError
    io.chirp.sdk.entity.ChirpAPIError createNotFoundError() -> createNotFoundError
    io.chirp.sdk.entity.ChirpAPIError createInternalServerError() -> createInternalServerError
    io.chirp.sdk.entity.ChirpAPIError createNetworkError() -> createNetworkError
    io.chirp.sdk.entity.ChirpAPIError createGenericError() -> createGenericError
    io.chirp.sdk.entity.ChirpAPIError createGenericError(java.lang.String) -> createGenericError
    io.chirp.sdk.entity.ChirpAPIError createChirpHeaderMissingError() -> createChirpHeaderMissingError
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getMessage() -> getMessage
    int getCode() -> getCode
io.chirp.sdk.entity.ChirpData -> io.chirp.sdk.entity.ChirpData:
    java.lang.String identifier -> identifier
    java.lang.String encoded -> encoded
    java.lang.String createdAt -> createdAt
    java.lang.String data -> data
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getIdentifier() -> getIdentifier
    java.lang.String getEncodedIdentifier() -> getEncodedIdentifier
    java.lang.String getCreatedAt() -> getCreatedAt
    java.lang.String getData() -> getData
io.chirp.sdk.entity.ChirpRequestData -> io.chirp.sdk.entity.ChirpRequestData:
    org.json.JSONObject data -> data
    void <init>(org.json.JSONObject) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.json.JSONObject constructJsonOject() -> constructJsonOject
    org.json.JSONObject toJsonObject() -> toJsonObject
io.chirp.sdk.entity.PermissionsData -> io.chirp.sdk.entity.PermissionsData:
    boolean enabled -> enabled
    java.lang.String[] chirps -> chirps
    java.lang.String[] analytics -> analytics
    java.lang.String[] protocols -> protocols
    void <init>(boolean,java.lang.String[],java.lang.String[],java.lang.String[]) -> <init>
    boolean hasAnalyticsPermission() -> hasAnalyticsPermission
    boolean hasChirpsPermission(java.lang.String) -> hasChirpsPermission
    boolean hasSetProtocolPermission() -> hasSetProtocolPermission
    io.chirp.sdk.entity.PermissionsData getDefaultPermissionsData() -> getDefaultPermissionsData
    io.chirp.sdk.entity.PermissionsData getDeniedPermissionsData() -> getDeniedPermissionsData
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.chirp.sdk.helpers.ChirpErrorFactory -> io.chirp.sdk.helpers.ChirpErrorFactory:
    java.lang.String messageSuffix -> messageSuffix
    void <init>() -> <init>
    io.chirp.sdk.model.ChirpError createChirpError(java.lang.String,int) -> createChirpError
    io.chirp.sdk.model.ChirpError createChirpErrorFromAPIError(io.chirp.sdk.entity.ChirpAPIError) -> createChirpErrorFromAPIError
    io.chirp.sdk.model.ChirpError createChirpErrorFromAudioError(io.chirp.sdk.boundary.ChirpAudioError) -> createChirpErrorFromAudioError
    io.chirp.sdk.model.ChirpError createInvalidCredentialsError() -> createInvalidCredentialsError
    io.chirp.sdk.model.ChirpError createPermissionsSayError() -> createPermissionsSayError
    io.chirp.sdk.model.ChirpError createPermissionsHearError() -> createPermissionsHearError
    io.chirp.sdk.model.ChirpError createDeviceIsMutedError() -> createDeviceIsMutedError
    io.chirp.sdk.model.ChirpError createIdentifierIsInvalid() -> createIdentifierIsInvalid
    io.chirp.sdk.model.ChirpError createInStreamModeError() -> createInStreamModeError
    java.lang.String createFullErrorMessage(java.lang.String,int) -> createFullErrorMessage
io.chirp.sdk.helpers.ConnectivityAdapter -> io.chirp.sdk.helpers.ConnectivityAdapter:
    void <init>() -> <init>
    boolean isOnline(android.content.Context) -> isOnline
io.chirp.sdk.helpers.DateTimeHelper -> io.chirp.sdk.helpers.DateTimeHelper:
    org.joda.time.format.DateTimeFormatter dateTimeFormatter -> dateTimeFormatter
    void <init>() -> <init>
    long convertIso8601ToTimestamp(java.lang.String) -> convertIso8601ToTimestamp
    java.lang.String convertToIso8601(long) -> convertToIso8601
    void <clinit>() -> <clinit>
io.chirp.sdk.helpers.DeviceHelper -> io.chirp.sdk.helpers.DeviceHelper:
    void <init>() -> <init>
    boolean isEmulator() -> isEmulator
io.chirp.sdk.helpers.PermissionHelper -> io.chirp.sdk.helpers.PermissionHelper:
    void <init>() -> <init>
    boolean doWeHaveAudioRecordPermission(android.content.Context) -> doWeHaveAudioRecordPermission
io.chirp.sdk.helpers.PriorityWorkerThread -> io.chirp.sdk.helpers.PriorityWorkerThread:
    android.os.Handler handler -> handler
    void <init>() -> <init>
    void run() -> run
io.chirp.sdk.helpers.RingBuffer -> io.chirp.sdk.helpers.RingBuffer:
    short[] elements -> elements
    int capacity -> capacity
    int writePos -> writePos
    int available -> available
    void <init>(int) -> <init>
    void reset() -> reset
    boolean put(short) -> put
    int put(short[]) -> put
    int put(short[],int) -> put
    short take() -> take
    int take(short[]) -> take
    int take(short[],int) -> take
io.chirp.sdk.helpers.RingBuffer$RingBufferEmptyException -> io.chirp.sdk.helpers.RingBuffer$RingBufferEmptyException:
    io.chirp.sdk.helpers.RingBuffer this$0 -> this$0
    void <init>(io.chirp.sdk.helpers.RingBuffer) -> <init>
io.chirp.sdk.helpers.RingBuffer$RingBufferFullException -> io.chirp.sdk.helpers.RingBuffer$RingBufferFullException:
    io.chirp.sdk.helpers.RingBuffer this$0 -> this$0
    void <init>(io.chirp.sdk.helpers.RingBuffer) -> <init>
io.chirp.sdk.model.Chirp -> io.chirp.sdk.model.Chirp:
    io.chirp.sdk.entity.ChirpData chirpData -> chirpData
    io.chirp.chirpengine.ChirpT chirpT -> chirpT
    org.json.JSONObject jsonData -> jsonData
    void <init>(org.json.JSONObject) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(int[]) -> <init>
    void <init>(io.chirp.sdk.entity.ChirpData) -> <init>
    void <init>(io.chirp.chirpengine.ChirpT) -> <init>
    void populateJSONData(java.lang.String) -> populateJSONData
    org.json.JSONObject getJsonData() -> getJsonData
    java.lang.String getIdentifier() -> getIdentifier
    int[] getMessage() -> getMessage
    io.chirp.sdk.entity.ChirpData getChirpData() -> getChirpData
    io.chirp.chirpengine.ChirpT getChirpT() -> getChirpT
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.chirp.sdk.model.ChirpAudioState -> io.chirp.sdk.model.ChirpAudioState:
    io.chirp.sdk.model.ChirpAudioState ChirpAudioStateStopped -> ChirpAudioStateStopped
    io.chirp.sdk.model.ChirpAudioState ChirpAudioStateReady -> ChirpAudioStateReady
    io.chirp.sdk.model.ChirpAudioState ChirpAudioStateChirping -> ChirpAudioStateChirping
    io.chirp.sdk.model.ChirpAudioState ChirpAudioStateReceiving -> ChirpAudioStateReceiving
    io.chirp.sdk.model.ChirpAudioState ChirpAudioStateStreaming -> ChirpAudioStateStreaming
    io.chirp.sdk.model.ChirpAudioState[] $VALUES -> $VALUES
    io.chirp.sdk.model.ChirpAudioState[] values() -> values
    io.chirp.sdk.model.ChirpAudioState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    io.chirp.sdk.model.ChirpAudioState createChirpAudioState(int) -> createChirpAudioState
    void <clinit>() -> <clinit>
io.chirp.sdk.model.ChirpError -> io.chirp.sdk.model.ChirpError:
    java.lang.String message -> message
    int code -> code
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getMessage() -> getMessage
    int getCode() -> getCode
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
io.chirp.sdk.model.ChirpProtocolName -> io.chirp.sdk.model.ChirpProtocolName:
    io.chirp.sdk.model.ChirpProtocolName ChirpProtocolNameStandard -> ChirpProtocolNameStandard
    io.chirp.sdk.model.ChirpProtocolName ChirpProtocolNameUltrasonic -> ChirpProtocolNameUltrasonic
    io.chirp.sdk.model.ChirpProtocolName[] $VALUES -> $VALUES
    io.chirp.sdk.model.ChirpProtocolName[] values() -> values
    io.chirp.sdk.model.ChirpProtocolName valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.chirp.sdk.model.ChirpStreamingMode -> io.chirp.sdk.model.ChirpStreamingMode:
    io.chirp.sdk.model.ChirpStreamingMode ChirpStreamingModeOff -> ChirpStreamingModeOff
    io.chirp.sdk.model.ChirpStreamingMode ChirpStreamingModeOn -> ChirpStreamingModeOn
    io.chirp.sdk.model.ChirpStreamingMode[] $VALUES -> $VALUES
    io.chirp.sdk.model.ChirpStreamingMode[] values() -> values
    io.chirp.sdk.model.ChirpStreamingMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    io.chirp.sdk.model.ChirpStreamingMode createChirpStreamMode(int) -> createChirpStreamMode
    void <clinit>() -> <clinit>
io.chirp.sdk.network.BuildConfig -> io.chirp.sdk.network.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    java.lang.String ANALYTICS_BASE_URL -> ANALYTICS_BASE_URL
    java.lang.String API_BASE_URL -> API_BASE_URL
    boolean ENABLE_LOGS -> ENABLE_LOGS
    void <init>() -> <init>
io.chirp.sdk.observers.AuthenticateObserver -> io.chirp.sdk.a.a:
    void onAuthenticateError(io.chirp.sdk.model.ChirpError) -> onAuthenticateError
    void onAuthenticationSuccess() -> onAuthenticationSuccess
io.chirp.sdk.observers.PlayObserver -> io.chirp.sdk.a.b:
    void onPlayError(io.chirp.sdk.model.ChirpError) -> onPlayError
io.chirp.sdk.result.ChirpPlayResult -> io.chirp.sdk.result.ChirpPlayResult:
    io.chirp.sdk.result.ChirpPlayResult OK -> OK
    io.chirp.sdk.result.ChirpPlayResult NOT_STARTED -> NOT_STARTED
    io.chirp.sdk.result.ChirpPlayResult IN_STREAM_MODE -> IN_STREAM_MODE
    int code -> code
    java.lang.String description -> description
    io.chirp.sdk.result.ChirpPlayResult[] $VALUES -> $VALUES
    io.chirp.sdk.result.ChirpPlayResult[] values() -> values
    io.chirp.sdk.result.ChirpPlayResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    java.lang.String getDescription() -> getDescription
    int getCode() -> getCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
io.chirp.sdk.result.ChirpProtocolResult -> io.chirp.sdk.result.ChirpProtocolResult:
    io.chirp.sdk.result.ChirpProtocolResult OK -> OK
    io.chirp.sdk.result.ChirpProtocolResult INVALID_NAME -> INVALID_NAME
    io.chirp.sdk.result.ChirpProtocolResult ALREADY_STARTED -> ALREADY_STARTED
    io.chirp.sdk.result.ChirpProtocolResult INVALID_PERMISSIONS -> INVALID_PERMISSIONS
    int code -> code
    java.lang.String description -> description
    io.chirp.sdk.result.ChirpProtocolResult[] $VALUES -> $VALUES
    io.chirp.sdk.result.ChirpProtocolResult[] values() -> values
    io.chirp.sdk.result.ChirpProtocolResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    java.lang.String getDescription() -> getDescription
    int getCode() -> getCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
io.chirp.sdk.result.ChirpValidationResult -> io.chirp.sdk.result.ChirpValidationResult:
    io.chirp.sdk.result.ChirpValidationResult OK -> OK
    io.chirp.sdk.result.ChirpValidationResult IDENTIFIER_INVALID -> IDENTIFIER_INVALID
    io.chirp.sdk.result.ChirpValidationResult IDENTIFIER_NOT_SPECIFIED -> IDENTIFIER_NOT_SPECIFIED
    io.chirp.sdk.result.ChirpValidationResult INCORRECT_ALPHABET -> INCORRECT_ALPHABET
    io.chirp.sdk.result.ChirpValidationResult INVALID_MESSAGE_LENGTH -> INVALID_MESSAGE_LENGTH
    io.chirp.sdk.result.ChirpValidationResult INVALID_ENCODED_LENGTH -> INVALID_ENCODED_LENGTH
    io.chirp.sdk.result.ChirpValidationResult CONTAINS_UNKNOWN_SYMBOLS -> CONTAINS_UNKNOWN_SYMBOLS
    io.chirp.sdk.result.ChirpValidationResult DECODE_FAILED -> DECODE_FAILED
    int code -> code
    java.lang.String description -> description
    io.chirp.sdk.result.ChirpValidationResult[] $VALUES -> $VALUES
    io.chirp.sdk.result.ChirpValidationResult[] values() -> values
    io.chirp.sdk.result.ChirpValidationResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    java.lang.String getDescription() -> getDescription
    int getCode() -> getCode
    java.lang.String toString() -> toString
    io.chirp.sdk.result.ChirpValidationResult createChirpValidationResult(int) -> createChirpValidationResult
    void <clinit>() -> <clinit>
io.chirp.sdk.scenario.AuthenticateScenario -> io.chirp.sdk.scenario.AuthenticateScenario:
    android.content.Context context -> context
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.observers.AuthenticateObserver authenticateObserver -> authenticateObserver
    io.chirp.sdk.helpers.ConnectivityAdapter connectivityAdapter -> connectivityAdapter
    io.chirp.sdk.boundary.StatsCollector statsCollector -> statsCollector
    io.chirp.sdk.entity.ChirpAPIError reauthenticate(android.content.Context,io.chirp.sdk.boundary.ChirpApi,io.chirp.sdk.user.UserManager,io.chirp.sdk.helpers.ConnectivityAdapter) -> reauthenticate
    void <init>(android.content.Context,io.chirp.sdk.boundary.ChirpApi,io.chirp.sdk.user.UserManager,io.chirp.sdk.observers.AuthenticateObserver,io.chirp.sdk.helpers.ConnectivityAdapter,io.chirp.sdk.boundary.StatsCollector) -> <init>
    void run() -> run
    io.chirp.sdk.entity.ChirpAPIError authenticate() -> authenticate
    void verifyPermissions(io.chirp.sdk.entity.ChirpAPIError) -> verifyPermissions
    void setPermissionsToDenied() -> setPermissionsToDenied
    void authenticateError(io.chirp.sdk.entity.ChirpAPIError) -> authenticateError
    void authenticateError(io.chirp.sdk.model.ChirpError) -> authenticateError
    void updateEngine() -> updateEngine
io.chirp.sdk.scenario.CreateScenario -> io.chirp.sdk.scenario.CreateScenario:
    android.content.Context context -> context
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.model.Chirp chirpRequest -> chirpRequest
    io.chirp.sdk.CallbackCreate callbackCreate -> callbackCreate
    io.chirp.sdk.helpers.ConnectivityAdapter connectivityAdapter -> connectivityAdapter
    boolean isStandardProtocol -> isStandardProtocol
    io.chirp.sdk.scenario.RetryLoop retryLoop -> retryLoop
    void <init>(android.content.Context,io.chirp.sdk.boundary.ChirpApi,io.chirp.sdk.user.UserManager,io.chirp.sdk.model.Chirp,io.chirp.sdk.CallbackCreate,io.chirp.sdk.helpers.ConnectivityAdapter,boolean) -> <init>
    void run() -> run
    void doCreateScenario() -> doCreateScenario
    boolean hasValidApiPermissions(io.chirp.sdk.entity.ChirpAPIError) -> hasValidApiPermissions
    void doReauthenticateScenario() -> doReauthenticateScenario
    void createError(io.chirp.sdk.entity.ChirpAPIError) -> createError
    void createSuccess(io.chirp.sdk.model.Chirp) -> createSuccess
io.chirp.sdk.scenario.HearScenario -> io.chirp.sdk.scenario.HearScenario:
    android.content.Context context -> context
    io.chirp.sdk.ChirpSDKDelegator chirpSDKDelegator -> chirpSDKDelegator
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.analytics.AnalyticsTracker analyticsTracker -> analyticsTracker
    java.util.List observers -> observers
    io.chirp.sdk.boundary.DiagnosticsCollector diagnosticsCollector -> diagnosticsCollector
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    java.lang.String lastChirpIdentifier -> lastChirpIdentifier
    void <init>(android.content.Context,io.chirp.sdk.ChirpSDKDelegator,io.chirp.sdk.user.UserManager,io.chirp.sdk.analytics.AnalyticsTracker,java.util.List,io.chirp.sdk.boundary.DiagnosticsCollector,io.chirp.sdk.boundary.ChirpApi) -> <init>
    void onChirpReceived(io.chirp.chirpengine.ChirpT,io.chirp.chirpengine.ChirpEngineDiagnostics) -> onChirpReceived
    void onChirpDecodeFailed(io.chirp.chirpengine.ChirpEngineDiagnostics) -> onChirpDecodeFailed
    void onFrontDoorReceived() -> onFrontDoorReceived
    void recordHear(io.chirp.sdk.model.Chirp,io.chirp.sdk.boundary.DiagnosticsCollector) -> recordHear
    void notifyObserversChirpReceived(io.chirp.sdk.model.Chirp) -> notifyObserversChirpReceived
    void notifyObserversFrontDoorReceived() -> notifyObserversFrontDoorReceived
    void notifyObserversChirpHearFailed() -> notifyObserversChirpHearFailed
    void notifyObserversChirpError(io.chirp.sdk.model.ChirpError) -> notifyObserversChirpError
    boolean isStreamingModeOn() -> isStreamingModeOn
io.chirp.sdk.scenario.PlayRepeatingScenario -> io.chirp.sdk.scenario.PlayRepeatingScenario:
    android.content.Context context -> context
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    io.chirp.sdk.model.Chirp chirp -> chirp
    long repeatIntervalMS -> repeatIntervalMS
    io.chirp.sdk.boundary.ChirpAudioManager chirpAudioManager -> chirpAudioManager
    io.chirp.sdk.analytics.AnalyticsTracker analyticsTracker -> analyticsTracker
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.observers.PlayObserver playObserver -> playObserver
    io.chirp.sdk.boundary.DiagnosticsCollector diagnosticsCollector -> diagnosticsCollector
    java.util.Timer timer -> timer
    java.util.TimerTask timerTask -> timerTask
    void <init>(android.content.Context,io.chirp.sdk.boundary.ChirpApi,io.chirp.sdk.model.Chirp,long,io.chirp.sdk.boundary.ChirpAudioManager,io.chirp.sdk.analytics.AnalyticsTracker,io.chirp.sdk.user.UserManager,io.chirp.sdk.observers.PlayObserver,io.chirp.sdk.boundary.DiagnosticsCollector) -> <init>
    void run() -> run
    void recordSay(io.chirp.sdk.model.Chirp) -> recordSay
    void startTimer() -> startTimer
    void stop() -> stop
    io.chirp.sdk.model.Chirp access$000(io.chirp.sdk.scenario.PlayRepeatingScenario) -> access$000
    io.chirp.sdk.boundary.ChirpAudioManager access$100(io.chirp.sdk.scenario.PlayRepeatingScenario) -> access$100
io.chirp.sdk.scenario.PlayRepeatingScenario$1 -> io.chirp.sdk.scenario.PlayRepeatingScenario$1:
    io.chirp.sdk.scenario.PlayRepeatingScenario this$0 -> this$0
    void <init>(io.chirp.sdk.scenario.PlayRepeatingScenario) -> <init>
    void run() -> run
io.chirp.sdk.scenario.PlayScenario -> io.chirp.sdk.scenario.PlayScenario:
    android.content.Context context -> context
    io.chirp.sdk.model.Chirp chirp -> chirp
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    io.chirp.sdk.boundary.ChirpAudioManager chirpAudioManager -> chirpAudioManager
    io.chirp.sdk.analytics.AnalyticsTracker analyticsTracker -> analyticsTracker
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.observers.PlayObserver playObserver -> playObserver
    io.chirp.sdk.boundary.DiagnosticsCollector diagnosticsCollector -> diagnosticsCollector
    boolean isStreaming -> isStreaming
    void <init>(android.content.Context,io.chirp.sdk.boundary.ChirpApi,io.chirp.sdk.model.Chirp,io.chirp.sdk.boundary.ChirpAudioManager,io.chirp.sdk.analytics.AnalyticsTracker,io.chirp.sdk.user.UserManager,io.chirp.sdk.observers.PlayObserver,io.chirp.sdk.boundary.DiagnosticsCollector,boolean) -> <init>
    void run() -> run
    void recordSay(io.chirp.sdk.model.Chirp) -> recordSay
io.chirp.sdk.scenario.ReadScenario -> io.chirp.sdk.scenario.ReadScenario:
    android.content.Context context -> context
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.model.Chirp chirp -> chirp
    io.chirp.sdk.CallbackRead callbackRead -> callbackRead
    io.chirp.sdk.helpers.ConnectivityAdapter connectivityAdapter -> connectivityAdapter
    boolean isStandardProtocol -> isStandardProtocol
    io.chirp.sdk.scenario.RetryLoop retryLoop -> retryLoop
    void <init>(android.content.Context,io.chirp.sdk.boundary.ChirpApi,io.chirp.sdk.user.UserManager,io.chirp.sdk.model.Chirp,io.chirp.sdk.CallbackRead,io.chirp.sdk.helpers.ConnectivityAdapter,boolean) -> <init>
    void run() -> run
    void doReadScenario() -> doReadScenario
    boolean hasValidApiPermissions(io.chirp.sdk.entity.ChirpAPIError) -> hasValidApiPermissions
    void doReauthenticateScenario() -> doReauthenticateScenario
    void readError(io.chirp.sdk.entity.ChirpAPIError) -> readError
    void readSuccess(io.chirp.sdk.entity.ChirpData) -> readSuccess
io.chirp.sdk.scenario.RetryLoop -> io.chirp.sdk.scenario.RetryLoop:
    int numOfRetries -> numOfRetries
    int retryCount -> retryCount
    void <init>(int) -> <init>
    boolean shouldRetry() -> shouldRetry
    void updateCount() -> updateCount
io.chirp.sdk.scenario.UploadAnalyticsScenario -> io.chirp.sdk.scenario.UploadAnalyticsScenario:
    android.content.Context context -> context
    io.chirp.sdk.boundary.ChirpApi chirpApi -> chirpApi
    io.chirp.sdk.helpers.ConnectivityAdapter connectivityAdapter -> connectivityAdapter
    io.chirp.sdk.analytics.AnalyticsDatabaseAdapter analyticsDatabaseAdapter -> analyticsDatabaseAdapter
    io.chirp.sdk.user.UserManager userManager -> userManager
    io.chirp.sdk.boundary.database.ChirpSDKDatabaseHelper chirpSDKDatabaseHelper -> chirpSDKDatabaseHelper
    void <init>(android.content.Context,io.chirp.sdk.boundary.ChirpApi,io.chirp.sdk.helpers.ConnectivityAdapter,io.chirp.sdk.analytics.AnalyticsDatabaseAdapter,io.chirp.sdk.user.UserManager,io.chirp.sdk.boundary.database.ChirpSDKDatabaseHelper) -> <init>
    void run() -> run
    boolean verifyAuthenticated() -> verifyAuthenticated
    boolean attemptToAuthenticate() -> attemptToAuthenticate
    void uploadAnalytics() -> uploadAnalytics
    boolean uploadSays(java.util.List) -> uploadSays
    boolean uploadHears(java.util.List) -> uploadHears
    void checkChirpApiError(io.chirp.sdk.entity.ChirpAPIError) -> checkChirpApiError
io.chirp.sdk.user.UserManager -> io.chirp.sdk.user.UserManager:
    io.chirp.sdk.boundary.SettingsStore settingsStore -> settingsStore
    long sdkSessionStartedTimeMS -> sdkSessionStartedTimeMS
    java.lang.String deviceId -> deviceId
    io.chirp.sdk.entity.AccessToken accessToken -> accessToken
    io.chirp.sdk.entity.PermissionsData permissionsData -> permissionsData
    int diagnosticLevel -> diagnosticLevel
    void <init>(io.chirp.sdk.boundary.SettingsStore) -> <init>
    void initSDKSessionStartedTime() -> initSDKSessionStartedTime
    void initDeviceId() -> initDeviceId
    void initAccessToken() -> initAccessToken
    void initPermissionsData() -> initPermissionsData
    void initDiagnosticLevel() -> initDiagnosticLevel
    long getSdkSessionStartedTimeMS() -> getSdkSessionStartedTimeMS
    java.lang.String getDeviceId() -> getDeviceId
    io.chirp.sdk.entity.AccessToken getAccessToken() -> getAccessToken
    void updateAuthenticateData(io.chirp.sdk.entity.AuthenticateData) -> updateAuthenticateData
    void setAccessToken(io.chirp.sdk.entity.AccessToken) -> setAccessToken
    io.chirp.sdk.entity.PermissionsData getPermissionsData() -> getPermissionsData
    int getDiagnosticLevel() -> getDiagnosticLevel
okhttp3.Address -> okhttp3.Address:
    okhttp3.HttpUrl url -> url
    okhttp3.Dns dns -> dns
    javax.net.SocketFactory socketFactory -> socketFactory
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.net.ProxySelector proxySelector -> proxySelector
    java.net.Proxy proxy -> proxy
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector) -> <init>
    okhttp3.HttpUrl url() -> url
    okhttp3.Dns dns() -> dns
    javax.net.SocketFactory socketFactory() -> socketFactory
    okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    java.util.List protocols() -> protocols
    java.util.List connectionSpecs() -> connectionSpecs
    java.net.ProxySelector proxySelector() -> proxySelector
    java.net.Proxy proxy() -> proxy
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean equalsNonHost(okhttp3.Address) -> equalsNonHost
    java.lang.String toString() -> toString
okhttp3.Authenticator -> okhttp3.Authenticator:
    okhttp3.Authenticator NONE -> NONE
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
    void <clinit>() -> <clinit>
okhttp3.Authenticator$1 -> okhttp3.Authenticator$1:
    void <init>() -> <init>
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
okhttp3.Cache -> okhttp3.Cache:
    int VERSION -> VERSION
    int ENTRY_METADATA -> ENTRY_METADATA
    int ENTRY_BODY -> ENTRY_BODY
    int ENTRY_COUNT -> ENTRY_COUNT
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    okhttp3.internal.cache.DiskLruCache cache -> cache
    int writeSuccessCount -> writeSuccessCount
    int writeAbortCount -> writeAbortCount
    int networkCount -> networkCount
    int hitCount -> hitCount
    int requestCount -> requestCount
    void <init>(java.io.File,long) -> <init>
    void <init>(java.io.File,long,okhttp3.internal.io.FileSystem) -> <init>
    java.lang.String key(okhttp3.HttpUrl) -> key
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor) -> abortQuietly
    void initialize() -> initialize
    void delete() -> delete
    void evictAll() -> evictAll
    java.util.Iterator urls() -> urls
    int writeAbortCount() -> writeAbortCount
    int writeSuccessCount() -> writeSuccessCount
    long size() -> size
    long maxSize() -> maxSize
    void flush() -> flush
    void close() -> close
    java.io.File directory() -> directory
    boolean isClosed() -> isClosed
    void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    int networkCount() -> networkCount
    int hitCount() -> hitCount
    int requestCount() -> requestCount
    int readInt(okio.BufferedSource) -> readInt
okhttp3.Cache$1 -> okhttp3.Cache$1:
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache) -> <init>
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
okhttp3.Cache$2 -> okhttp3.Cache$2:
    java.util.Iterator delegate -> delegate
    java.lang.String nextUrl -> nextUrl
    boolean canRemove -> canRemove
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
okhttp3.Cache$CacheRequestImpl -> okhttp3.Cache$CacheRequestImpl:
    okhttp3.internal.cache.DiskLruCache$Editor editor -> editor
    okio.Sink cacheOut -> cacheOut
    okio.Sink body -> body
    boolean done -> done
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor) -> <init>
    void abort() -> abort
    okio.Sink body() -> body
okhttp3.Cache$CacheRequestImpl$1 -> okhttp3.Cache$CacheRequestImpl$1:
    okhttp3.Cache val$this$0 -> val$this$0
    okhttp3.internal.cache.DiskLruCache$Editor val$editor -> val$editor
    okhttp3.Cache$CacheRequestImpl this$1 -> this$1
    void <init>(okhttp3.Cache$CacheRequestImpl,okio.Sink,okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor) -> <init>
    void close() -> close
okhttp3.Cache$CacheResponseBody -> okhttp3.Cache$CacheResponseBody:
    okhttp3.internal.cache.DiskLruCache$Snapshot snapshot -> snapshot
    okio.BufferedSource bodySource -> bodySource
    java.lang.String contentType -> contentType
    java.lang.String contentLength -> contentLength
    void <init>(okhttp3.internal.cache.DiskLruCache$Snapshot,java.lang.String,java.lang.String) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.Cache$CacheResponseBody$1 -> okhttp3.Cache$CacheResponseBody$1:
    okhttp3.internal.cache.DiskLruCache$Snapshot val$snapshot -> val$snapshot
    okhttp3.Cache$CacheResponseBody this$0 -> this$0
    void <init>(okhttp3.Cache$CacheResponseBody,okio.Source,okhttp3.internal.cache.DiskLruCache$Snapshot) -> <init>
    void close() -> close
okhttp3.Cache$Entry -> okhttp3.Cache$Entry:
    java.lang.String SENT_MILLIS -> SENT_MILLIS
    java.lang.String RECEIVED_MILLIS -> RECEIVED_MILLIS
    java.lang.String url -> url
    okhttp3.Headers varyHeaders -> varyHeaders
    java.lang.String requestMethod -> requestMethod
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Headers responseHeaders -> responseHeaders
    okhttp3.Handshake handshake -> handshake
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    void <init>(okio.Source) -> <init>
    void <init>(okhttp3.Response) -> <init>
    void writeTo(okhttp3.internal.cache.DiskLruCache$Editor) -> writeTo
    boolean isHttps() -> isHttps
    java.util.List readCertificateList(okio.BufferedSource) -> readCertificateList
    void writeCertList(okio.BufferedSink,java.util.List) -> writeCertList
    boolean matches(okhttp3.Request,okhttp3.Response) -> matches
    okhttp3.Response response(okhttp3.internal.cache.DiskLruCache$Snapshot) -> response
    void <clinit>() -> <clinit>
okhttp3.CacheControl -> okhttp3.CacheControl:
    okhttp3.CacheControl FORCE_NETWORK -> FORCE_NETWORK
    okhttp3.CacheControl FORCE_CACHE -> FORCE_CACHE
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int sMaxAgeSeconds -> sMaxAgeSeconds
    boolean isPrivate -> isPrivate
    boolean isPublic -> isPublic
    boolean mustRevalidate -> mustRevalidate
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    boolean immutable -> immutable
    java.lang.String headerValue -> headerValue
    void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,boolean,java.lang.String) -> <init>
    void <init>(okhttp3.CacheControl$Builder) -> <init>
    boolean noCache() -> noCache
    boolean noStore() -> noStore
    int maxAgeSeconds() -> maxAgeSeconds
    int sMaxAgeSeconds() -> sMaxAgeSeconds
    boolean isPrivate() -> isPrivate
    boolean isPublic() -> isPublic
    boolean mustRevalidate() -> mustRevalidate
    int maxStaleSeconds() -> maxStaleSeconds
    int minFreshSeconds() -> minFreshSeconds
    boolean onlyIfCached() -> onlyIfCached
    boolean noTransform() -> noTransform
    boolean immutable() -> immutable
    okhttp3.CacheControl parse(okhttp3.Headers) -> parse
    java.lang.String toString() -> toString
    java.lang.String headerValue() -> headerValue
    void <clinit>() -> <clinit>
okhttp3.CacheControl$Builder -> okhttp3.CacheControl$Builder:
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    boolean immutable -> immutable
    void <init>() -> <init>
    okhttp3.CacheControl$Builder noCache() -> noCache
    okhttp3.CacheControl$Builder noStore() -> noStore
    okhttp3.CacheControl$Builder maxAge(int,java.util.concurrent.TimeUnit) -> maxAge
    okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit) -> maxStale
    okhttp3.CacheControl$Builder minFresh(int,java.util.concurrent.TimeUnit) -> minFresh
    okhttp3.CacheControl$Builder onlyIfCached() -> onlyIfCached
    okhttp3.CacheControl$Builder noTransform() -> noTransform
    okhttp3.CacheControl$Builder immutable() -> immutable
    okhttp3.CacheControl build() -> build
okhttp3.Call -> okhttp3.Call:
    okhttp3.Request request() -> request
    okhttp3.Response execute() -> execute
    void enqueue(okhttp3.Callback) -> enqueue
    void cancel() -> cancel
    boolean isExecuted() -> isExecuted
    boolean isCanceled() -> isCanceled
    okhttp3.Call clone() -> clone
okhttp3.Call$Factory -> okhttp3.Call$Factory:
    okhttp3.Call newCall(okhttp3.Request) -> newCall
okhttp3.Callback -> okhttp3.Callback:
    void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
okhttp3.CertificatePinner -> okhttp3.CertificatePinner:
    okhttp3.CertificatePinner DEFAULT -> DEFAULT
    java.util.Set pins -> pins
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void check(java.lang.String,java.util.List) -> check
    void check(java.lang.String,java.security.cert.Certificate[]) -> check
    java.util.List findMatchingPins(java.lang.String) -> findMatchingPins
    okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner) -> withCertificateChainCleaner
    java.lang.String pin(java.security.cert.Certificate) -> pin
    okio.ByteString sha1(java.security.cert.X509Certificate) -> sha1
    okio.ByteString sha256(java.security.cert.X509Certificate) -> sha256
    void <clinit>() -> <clinit>
okhttp3.CertificatePinner$Builder -> okhttp3.CertificatePinner$Builder:
    java.util.List pins -> pins
    void <init>() -> <init>
    okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[]) -> add
    okhttp3.CertificatePinner build() -> build
okhttp3.CertificatePinner$Pin -> okhttp3.CertificatePinner$Pin:
    java.lang.String WILDCARD -> WILDCARD
    java.lang.String pattern -> pattern
    java.lang.String canonicalHostname -> canonicalHostname
    java.lang.String hashAlgorithm -> hashAlgorithm
    okio.ByteString hash -> hash
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean matches(java.lang.String) -> matches
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okhttp3.Challenge -> okhttp3.Challenge:
    java.lang.String scheme -> scheme
    java.lang.String realm -> realm
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String scheme() -> scheme
    java.lang.String realm() -> realm
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okhttp3.CipherSuite -> okhttp3.CipherSuite:
    java.util.Comparator ORDER_BY_NAME -> ORDER_BY_NAME
    java.util.Map INSTANCES -> INSTANCES
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_MD5 -> TLS_RSA_WITH_NULL_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA -> TLS_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> TLS_RSA_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_MD5 -> TLS_RSA_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_SHA -> TLS_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_DES_CBC_SHA -> TLS_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA -> TLS_DHE_DSS_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA -> TLS_DHE_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> TLS_DH_anon_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 -> TLS_DH_anon_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA -> TLS_DH_anon_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_SHA -> TLS_KRB5_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA -> TLS_KRB5_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_SHA -> TLS_KRB5_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 -> TLS_KRB5_WITH_DES_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 -> TLS_KRB5_WITH_3DES_EDE_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_MD5 -> TLS_KRB5_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA -> TLS_KRB5_EXPORT_WITH_RC4_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 -> TLS_KRB5_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA -> TLS_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA -> TLS_DH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA -> TLS_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA -> TLS_DH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA256 -> TLS_RSA_WITH_NULL_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 -> TLS_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 -> TLS_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA -> TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA -> TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA -> TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 -> TLS_DH_anon_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 -> TLS_DH_anon_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA -> TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA -> TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA -> TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_RC4_128_SHA -> TLS_PSK_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_PSK_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA -> TLS_PSK_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA -> TLS_PSK_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_SEED_CBC_SHA -> TLS_RSA_WITH_SEED_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 -> TLS_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 -> TLS_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 -> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 -> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 -> TLS_DH_anon_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 -> TLS_DH_anon_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    okhttp3.CipherSuite TLS_FALLBACK_SCSV -> TLS_FALLBACK_SCSV
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA -> TLS_ECDH_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> TLS_ECDH_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA -> TLS_ECDHE_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA -> TLS_ECDH_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA -> TLS_ECDH_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA -> TLS_ECDHE_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA -> TLS_ECDHE_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_NULL_SHA -> TLS_ECDH_anon_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA -> TLS_ECDH_anon_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> TLS_ECDH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> TLS_ECDH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA -> TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA -> TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 -> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 -> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
    java.lang.String javaName -> javaName
    okhttp3.CipherSuite forJavaName(java.lang.String) -> forJavaName
    java.util.List forJavaNames(java.lang.String[]) -> forJavaNames
    void <init>(java.lang.String) -> <init>
    okhttp3.CipherSuite of(java.lang.String,int) -> of
    java.lang.String javaName() -> javaName
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.CipherSuite$1 -> okhttp3.CipherSuite$1:
    void <init>() -> <init>
    int compare(java.lang.String,java.lang.String) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
okhttp3.Connection -> okhttp3.Connection:
    okhttp3.Route route() -> route
    java.net.Socket socket() -> socket
    okhttp3.Handshake handshake() -> handshake
    okhttp3.Protocol protocol() -> protocol
okhttp3.ConnectionPool -> okhttp3.ConnectionPool:
    java.util.concurrent.Executor executor -> executor
    int maxIdleConnections -> maxIdleConnections
    long keepAliveDurationNs -> keepAliveDurationNs
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    java.util.Deque connections -> connections
    okhttp3.internal.connection.RouteDatabase routeDatabase -> routeDatabase
    boolean cleanupRunning -> cleanupRunning
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void <init>(int,long,java.util.concurrent.TimeUnit) -> <init>
    int idleConnectionCount() -> idleConnectionCount
    int connectionCount() -> connectionCount
    okhttp3.internal.connection.RealConnection get(okhttp3.Address,okhttp3.internal.connection.StreamAllocation,okhttp3.Route) -> get
    java.net.Socket deduplicate(okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> deduplicate
    void put(okhttp3.internal.connection.RealConnection) -> put
    boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    void evictAll() -> evictAll
    long cleanup(long) -> cleanup
    int pruneAndGetAllocationCount(okhttp3.internal.connection.RealConnection,long) -> pruneAndGetAllocationCount
    void <clinit>() -> <clinit>
okhttp3.ConnectionPool$1 -> okhttp3.ConnectionPool$1:
    okhttp3.ConnectionPool this$0 -> this$0
    void <init>(okhttp3.ConnectionPool) -> <init>
    void run() -> run
okhttp3.ConnectionSpec -> okhttp3.ConnectionSpec:
    okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES -> APPROVED_CIPHER_SUITES
    okhttp3.ConnectionSpec MODERN_TLS -> MODERN_TLS
    okhttp3.ConnectionSpec COMPATIBLE_TLS -> COMPATIBLE_TLS
    okhttp3.ConnectionSpec CLEARTEXT -> CLEARTEXT
    boolean tls -> tls
    boolean supportsTlsExtensions -> supportsTlsExtensions
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    void <init>(okhttp3.ConnectionSpec$Builder) -> <init>
    boolean isTls() -> isTls
    java.util.List cipherSuites() -> cipherSuites
    java.util.List tlsVersions() -> tlsVersions
    boolean supportsTlsExtensions() -> supportsTlsExtensions
    void apply(javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean) -> supportedSpec
    boolean isCompatible(javax.net.ssl.SSLSocket) -> isCompatible
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.ConnectionSpec$Builder -> okhttp3.ConnectionSpec$Builder:
    boolean tls -> tls
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    boolean supportsTlsExtensions -> supportsTlsExtensions
    void <init>(boolean) -> <init>
    void <init>(okhttp3.ConnectionSpec) -> <init>
    okhttp3.ConnectionSpec$Builder allEnabledCipherSuites() -> allEnabledCipherSuites
    okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[]) -> cipherSuites
    okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[]) -> cipherSuites
    okhttp3.ConnectionSpec$Builder allEnabledTlsVersions() -> allEnabledTlsVersions
    okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[]) -> tlsVersions
    okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[]) -> tlsVersions
    okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean) -> supportsTlsExtensions
    okhttp3.ConnectionSpec build() -> build
okhttp3.Cookie -> okhttp3.Cookie:
    java.util.regex.Pattern YEAR_PATTERN -> YEAR_PATTERN
    java.util.regex.Pattern MONTH_PATTERN -> MONTH_PATTERN
    java.util.regex.Pattern DAY_OF_MONTH_PATTERN -> DAY_OF_MONTH_PATTERN
    java.util.regex.Pattern TIME_PATTERN -> TIME_PATTERN
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    void <init>(java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> <init>
    void <init>(okhttp3.Cookie$Builder) -> <init>
    java.lang.String name() -> name
    java.lang.String value() -> value
    boolean persistent() -> persistent
    long expiresAt() -> expiresAt
    boolean hostOnly() -> hostOnly
    java.lang.String domain() -> domain
    java.lang.String path() -> path
    boolean httpOnly() -> httpOnly
    boolean secure() -> secure
    boolean matches(okhttp3.HttpUrl) -> matches
    boolean domainMatch(java.lang.String,java.lang.String) -> domainMatch
    boolean pathMatch(okhttp3.HttpUrl,java.lang.String) -> pathMatch
    okhttp3.Cookie parse(okhttp3.HttpUrl,java.lang.String) -> parse
    okhttp3.Cookie parse(long,okhttp3.HttpUrl,java.lang.String) -> parse
    long parseExpires(java.lang.String,int,int) -> parseExpires
    int dateCharacterOffset(java.lang.String,int,int,boolean) -> dateCharacterOffset
    long parseMaxAge(java.lang.String) -> parseMaxAge
    java.lang.String parseDomain(java.lang.String) -> parseDomain
    java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers) -> parseAll
    java.lang.String toString() -> toString
    java.lang.String toString(boolean) -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
okhttp3.Cookie$Builder -> okhttp3.Cookie$Builder:
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    void <init>() -> <init>
    okhttp3.Cookie$Builder name(java.lang.String) -> name
    okhttp3.Cookie$Builder value(java.lang.String) -> value
    okhttp3.Cookie$Builder expiresAt(long) -> expiresAt
    okhttp3.Cookie$Builder domain(java.lang.String) -> domain
    okhttp3.Cookie$Builder hostOnlyDomain(java.lang.String) -> hostOnlyDomain
    okhttp3.Cookie$Builder domain(java.lang.String,boolean) -> domain
    okhttp3.Cookie$Builder path(java.lang.String) -> path
    okhttp3.Cookie$Builder secure() -> secure
    okhttp3.Cookie$Builder httpOnly() -> httpOnly
    okhttp3.Cookie build() -> build
okhttp3.CookieJar -> okhttp3.CookieJar:
    okhttp3.CookieJar NO_COOKIES -> NO_COOKIES
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
    void <clinit>() -> <clinit>
okhttp3.CookieJar$1 -> okhttp3.CookieJar$1:
    void <init>() -> <init>
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
okhttp3.Credentials -> okhttp3.Credentials:
    void <init>() -> <init>
    java.lang.String basic(java.lang.String,java.lang.String) -> basic
    java.lang.String basic(java.lang.String,java.lang.String,java.nio.charset.Charset) -> basic
okhttp3.Dispatcher -> okhttp3.Dispatcher:
    int maxRequests -> maxRequests
    int maxRequestsPerHost -> maxRequestsPerHost
    java.lang.Runnable idleCallback -> idleCallback
    java.util.concurrent.ExecutorService executorService -> executorService
    java.util.Deque readyAsyncCalls -> readyAsyncCalls
    java.util.Deque runningAsyncCalls -> runningAsyncCalls
    java.util.Deque runningSyncCalls -> runningSyncCalls
    void <init>(java.util.concurrent.ExecutorService) -> <init>
    void <init>() -> <init>
    java.util.concurrent.ExecutorService executorService() -> executorService
    void setMaxRequests(int) -> setMaxRequests
    int getMaxRequests() -> getMaxRequests
    void setMaxRequestsPerHost(int) -> setMaxRequestsPerHost
    int getMaxRequestsPerHost() -> getMaxRequestsPerHost
    void setIdleCallback(java.lang.Runnable) -> setIdleCallback
    void enqueue(okhttp3.RealCall$AsyncCall) -> enqueue
    void cancelAll() -> cancelAll
    void promoteCalls() -> promoteCalls
    int runningCallsForHost(okhttp3.RealCall$AsyncCall) -> runningCallsForHost
    void executed(okhttp3.RealCall) -> executed
    void finished(okhttp3.RealCall$AsyncCall) -> finished
    void finished(okhttp3.RealCall) -> finished
    void finished(java.util.Deque,java.lang.Object,boolean) -> finished
    java.util.List queuedCalls() -> queuedCalls
    java.util.List runningCalls() -> runningCalls
    int queuedCallsCount() -> queuedCallsCount
    int runningCallsCount() -> runningCallsCount
okhttp3.Dns -> okhttp3.Dns:
    okhttp3.Dns SYSTEM -> SYSTEM
    java.util.List lookup(java.lang.String) -> lookup
    void <clinit>() -> <clinit>
okhttp3.Dns$1 -> okhttp3.Dns$1:
    void <init>() -> <init>
    java.util.List lookup(java.lang.String) -> lookup
okhttp3.EventListener -> okhttp3.EventListener:
    okhttp3.EventListener NONE -> NONE
    void <init>() -> <init>
    okhttp3.EventListener$Factory factory(okhttp3.EventListener) -> factory
    void fetchStart(okhttp3.Call) -> fetchStart
    void dnsStart(okhttp3.Call,java.lang.String) -> dnsStart
    void dnsEnd(okhttp3.Call,java.lang.String,java.util.List,java.lang.Throwable) -> dnsEnd
    void connectStart(okhttp3.Call,java.net.InetAddress,int) -> connectStart
    void secureConnectStart(okhttp3.Call) -> secureConnectStart
    void secureConnectEnd(okhttp3.Call,okhttp3.Handshake,java.lang.Throwable) -> secureConnectEnd
    void connectEnd(okhttp3.Call,java.net.InetAddress,int,java.lang.String,java.lang.Throwable) -> connectEnd
    void requestHeadersStart(okhttp3.Call) -> requestHeadersStart
    void requestHeadersEnd(okhttp3.Call,java.lang.Throwable) -> requestHeadersEnd
    void requestBodyStart(okhttp3.Call) -> requestBodyStart
    void requestBodyEnd(okhttp3.Call,java.lang.Throwable) -> requestBodyEnd
    void responseHeadersStart(okhttp3.Call) -> responseHeadersStart
    void responseHeadersEnd(okhttp3.Call,java.lang.Throwable) -> responseHeadersEnd
    void responseBodyStart(okhttp3.Call) -> responseBodyStart
    void responseBodyEnd(okhttp3.Call,java.lang.Throwable) -> responseBodyEnd
    void fetchEnd(okhttp3.Call,java.lang.Throwable) -> fetchEnd
    void <clinit>() -> <clinit>
okhttp3.EventListener$1 -> okhttp3.EventListener$1:
    void <init>() -> <init>
okhttp3.EventListener$2 -> okhttp3.EventListener$2:
    okhttp3.EventListener val$listener -> val$listener
    void <init>(okhttp3.EventListener) -> <init>
    okhttp3.EventListener create(okhttp3.Call) -> create
okhttp3.EventListener$Factory -> okhttp3.EventListener$Factory:
    okhttp3.EventListener create(okhttp3.Call) -> create
okhttp3.FormBody -> okhttp3.FormBody:
    okhttp3.MediaType CONTENT_TYPE -> CONTENT_TYPE
    java.util.List encodedNames -> encodedNames
    java.util.List encodedValues -> encodedValues
    void <init>(java.util.List,java.util.List) -> <init>
    int size() -> size
    java.lang.String encodedName(int) -> encodedName
    java.lang.String name(int) -> name
    java.lang.String encodedValue(int) -> encodedValue
    java.lang.String value(int) -> value
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    void <clinit>() -> <clinit>
okhttp3.FormBody$Builder -> okhttp3.FormBody$Builder:
    java.util.List names -> names
    java.util.List values -> values
    void <init>() -> <init>
    okhttp3.FormBody$Builder add(java.lang.String,java.lang.String) -> add
    okhttp3.FormBody$Builder addEncoded(java.lang.String,java.lang.String) -> addEncoded
    okhttp3.FormBody build() -> build
okhttp3.Handshake -> okhttp3.Handshake:
    okhttp3.TlsVersion tlsVersion -> tlsVersion
    okhttp3.CipherSuite cipherSuite -> cipherSuite
    java.util.List peerCertificates -> peerCertificates
    java.util.List localCertificates -> localCertificates
    void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> <init>
    okhttp3.Handshake get(javax.net.ssl.SSLSession) -> get
    okhttp3.Handshake get(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> get
    okhttp3.TlsVersion tlsVersion() -> tlsVersion
    okhttp3.CipherSuite cipherSuite() -> cipherSuite
    java.util.List peerCertificates() -> peerCertificates
    java.security.Principal peerPrincipal() -> peerPrincipal
    java.util.List localCertificates() -> localCertificates
    java.security.Principal localPrincipal() -> localPrincipal
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.Headers -> okhttp3.Headers:
    java.lang.String[] namesAndValues -> namesAndValues
    void <init>(okhttp3.Headers$Builder) -> <init>
    void <init>(java.lang.String[]) -> <init>
    java.lang.String get(java.lang.String) -> get
    java.util.Date getDate(java.lang.String) -> getDate
    int size() -> size
    java.lang.String name(int) -> name
    java.lang.String value(int) -> value
    java.util.Set names() -> names
    java.util.List values(java.lang.String) -> values
    okhttp3.Headers$Builder newBuilder() -> newBuilder
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Map toMultimap() -> toMultimap
    java.lang.String get(java.lang.String[],java.lang.String) -> get
    okhttp3.Headers of(java.lang.String[]) -> of
    okhttp3.Headers of(java.util.Map) -> of
okhttp3.Headers$Builder -> okhttp3.Headers$Builder:
    java.util.List namesAndValues -> namesAndValues
    void <init>() -> <init>
    okhttp3.Headers$Builder addLenient(java.lang.String) -> addLenient
    okhttp3.Headers$Builder add(java.lang.String) -> add
    okhttp3.Headers$Builder add(java.lang.String,java.lang.String) -> add
    okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String) -> addLenient
    okhttp3.Headers$Builder removeAll(java.lang.String) -> removeAll
    okhttp3.Headers$Builder set(java.lang.String,java.lang.String) -> set
    void checkNameAndValue(java.lang.String,java.lang.String) -> checkNameAndValue
    java.lang.String get(java.lang.String) -> get
    okhttp3.Headers build() -> build
okhttp3.HttpUrl -> okhttp3.HttpUrl:
    char[] HEX_DIGITS -> HEX_DIGITS
    java.lang.String USERNAME_ENCODE_SET -> USERNAME_ENCODE_SET
    java.lang.String PASSWORD_ENCODE_SET -> PASSWORD_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET -> PATH_SEGMENT_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET_URI -> PATH_SEGMENT_ENCODE_SET_URI
    java.lang.String QUERY_ENCODE_SET -> QUERY_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET -> QUERY_COMPONENT_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET_URI -> QUERY_COMPONENT_ENCODE_SET_URI
    java.lang.String FORM_ENCODE_SET -> FORM_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET -> FRAGMENT_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET_URI -> FRAGMENT_ENCODE_SET_URI
    java.lang.String scheme -> scheme
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String host -> host
    int port -> port
    java.util.List pathSegments -> pathSegments
    java.util.List queryNamesAndValues -> queryNamesAndValues
    java.lang.String fragment -> fragment
    java.lang.String url -> url
    void <init>(okhttp3.HttpUrl$Builder) -> <init>
    java.net.URL url() -> url
    java.net.URI uri() -> uri
    java.lang.String scheme() -> scheme
    boolean isHttps() -> isHttps
    java.lang.String encodedUsername() -> encodedUsername
    java.lang.String username() -> username
    java.lang.String encodedPassword() -> encodedPassword
    java.lang.String password() -> password
    java.lang.String host() -> host
    int port() -> port
    int defaultPort(java.lang.String) -> defaultPort
    int pathSize() -> pathSize
    java.lang.String encodedPath() -> encodedPath
    void pathSegmentsToString(java.lang.StringBuilder,java.util.List) -> pathSegmentsToString
    java.util.List encodedPathSegments() -> encodedPathSegments
    java.util.List pathSegments() -> pathSegments
    java.lang.String encodedQuery() -> encodedQuery
    void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List) -> namesAndValuesToQueryString
    java.util.List queryStringToNamesAndValues(java.lang.String) -> queryStringToNamesAndValues
    java.lang.String query() -> query
    int querySize() -> querySize
    java.lang.String queryParameter(java.lang.String) -> queryParameter
    java.util.Set queryParameterNames() -> queryParameterNames
    java.util.List queryParameterValues(java.lang.String) -> queryParameterValues
    java.lang.String queryParameterName(int) -> queryParameterName
    java.lang.String queryParameterValue(int) -> queryParameterValue
    java.lang.String encodedFragment() -> encodedFragment
    java.lang.String fragment() -> fragment
    java.lang.String redact() -> redact
    okhttp3.HttpUrl resolve(java.lang.String) -> resolve
    okhttp3.HttpUrl$Builder newBuilder() -> newBuilder
    okhttp3.HttpUrl$Builder newBuilder(java.lang.String) -> newBuilder
    okhttp3.HttpUrl parse(java.lang.String) -> parse
    okhttp3.HttpUrl get(java.net.URL) -> get
    okhttp3.HttpUrl getChecked(java.lang.String) -> getChecked
    okhttp3.HttpUrl get(java.net.URI) -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String topPrivateDomain() -> topPrivateDomain
    java.lang.String percentDecode(java.lang.String,boolean) -> percentDecode
    java.util.List percentDecode(java.util.List,boolean) -> percentDecode
    java.lang.String percentDecode(java.lang.String,int,int,boolean) -> percentDecode
    void percentDecode(okio.Buffer,java.lang.String,int,int,boolean) -> percentDecode
    boolean percentEncoded(java.lang.String,int,int) -> percentEncoded
    int decodeHexDigit(char) -> decodeHexDigit
    java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    void <clinit>() -> <clinit>
okhttp3.HttpUrl$1 -> okhttp3.HttpUrl$1:
    int[] $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult -> $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult
    void <clinit>() -> <clinit>
okhttp3.HttpUrl$Builder -> okhttp3.HttpUrl$Builder:
    java.lang.String scheme -> scheme
    java.lang.String encodedUsername -> encodedUsername
    java.lang.String encodedPassword -> encodedPassword
    java.lang.String host -> host
    int port -> port
    java.util.List encodedPathSegments -> encodedPathSegments
    java.util.List encodedQueryNamesAndValues -> encodedQueryNamesAndValues
    java.lang.String encodedFragment -> encodedFragment
    void <init>() -> <init>
    okhttp3.HttpUrl$Builder scheme(java.lang.String) -> scheme
    okhttp3.HttpUrl$Builder username(java.lang.String) -> username
    okhttp3.HttpUrl$Builder encodedUsername(java.lang.String) -> encodedUsername
    okhttp3.HttpUrl$Builder password(java.lang.String) -> password
    okhttp3.HttpUrl$Builder encodedPassword(java.lang.String) -> encodedPassword
    okhttp3.HttpUrl$Builder host(java.lang.String) -> host
    okhttp3.HttpUrl$Builder port(int) -> port
    int effectivePort() -> effectivePort
    okhttp3.HttpUrl$Builder addPathSegment(java.lang.String) -> addPathSegment
    okhttp3.HttpUrl$Builder addPathSegments(java.lang.String) -> addPathSegments
    okhttp3.HttpUrl$Builder addEncodedPathSegment(java.lang.String) -> addEncodedPathSegment
    okhttp3.HttpUrl$Builder addEncodedPathSegments(java.lang.String) -> addEncodedPathSegments
    okhttp3.HttpUrl$Builder addPathSegments(java.lang.String,boolean) -> addPathSegments
    okhttp3.HttpUrl$Builder setPathSegment(int,java.lang.String) -> setPathSegment
    okhttp3.HttpUrl$Builder setEncodedPathSegment(int,java.lang.String) -> setEncodedPathSegment
    okhttp3.HttpUrl$Builder removePathSegment(int) -> removePathSegment
    okhttp3.HttpUrl$Builder encodedPath(java.lang.String) -> encodedPath
    okhttp3.HttpUrl$Builder query(java.lang.String) -> query
    okhttp3.HttpUrl$Builder encodedQuery(java.lang.String) -> encodedQuery
    okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String) -> addQueryParameter
    okhttp3.HttpUrl$Builder addEncodedQueryParameter(java.lang.String,java.lang.String) -> addEncodedQueryParameter
    okhttp3.HttpUrl$Builder setQueryParameter(java.lang.String,java.lang.String) -> setQueryParameter
    okhttp3.HttpUrl$Builder setEncodedQueryParameter(java.lang.String,java.lang.String) -> setEncodedQueryParameter
    okhttp3.HttpUrl$Builder removeAllQueryParameters(java.lang.String) -> removeAllQueryParameters
    okhttp3.HttpUrl$Builder removeAllEncodedQueryParameters(java.lang.String) -> removeAllEncodedQueryParameters
    void removeAllCanonicalQueryParameters(java.lang.String) -> removeAllCanonicalQueryParameters
    okhttp3.HttpUrl$Builder fragment(java.lang.String) -> fragment
    okhttp3.HttpUrl$Builder encodedFragment(java.lang.String) -> encodedFragment
    okhttp3.HttpUrl$Builder reencodeForUri() -> reencodeForUri
    okhttp3.HttpUrl build() -> build
    java.lang.String toString() -> toString
    okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String) -> parse
    void resolvePath(java.lang.String,int,int) -> resolvePath
    void push(java.lang.String,int,int,boolean,boolean) -> push
    boolean isDot(java.lang.String) -> isDot
    boolean isDotDot(java.lang.String) -> isDotDot
    void pop() -> pop
    int schemeDelimiterOffset(java.lang.String,int,int) -> schemeDelimiterOffset
    int slashCount(java.lang.String,int,int) -> slashCount
    int portColonOffset(java.lang.String,int,int) -> portColonOffset
    java.lang.String canonicalizeHost(java.lang.String,int,int) -> canonicalizeHost
    java.net.InetAddress decodeIpv6(java.lang.String,int,int) -> decodeIpv6
    boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int) -> decodeIpv4Suffix
    java.lang.String inet6AddressToAscii(byte[]) -> inet6AddressToAscii
    int parsePort(java.lang.String,int,int) -> parsePort
okhttp3.HttpUrl$Builder$ParseResult -> okhttp3.HttpUrl$Builder$ParseResult:
    okhttp3.HttpUrl$Builder$ParseResult SUCCESS -> SUCCESS
    okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME -> MISSING_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME -> UNSUPPORTED_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT -> INVALID_PORT
    okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST -> INVALID_HOST
    okhttp3.HttpUrl$Builder$ParseResult[] $VALUES -> $VALUES
    okhttp3.HttpUrl$Builder$ParseResult[] values() -> values
    okhttp3.HttpUrl$Builder$ParseResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
okhttp3.Interceptor -> okhttp3.Interceptor:
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.Interceptor$Chain -> okhttp3.Interceptor$Chain:
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
    okhttp3.Connection connection() -> connection
okhttp3.MediaType -> okhttp3.MediaType:
    java.lang.String TOKEN -> TOKEN
    java.lang.String QUOTED -> QUOTED
    java.util.regex.Pattern TYPE_SUBTYPE -> TYPE_SUBTYPE
    java.util.regex.Pattern PARAMETER -> PARAMETER
    java.lang.String mediaType -> mediaType
    java.lang.String type -> type
    java.lang.String subtype -> subtype
    java.lang.String charset -> charset
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    okhttp3.MediaType parse(java.lang.String) -> parse
    java.lang.String type() -> type
    java.lang.String subtype() -> subtype
    java.nio.charset.Charset charset() -> charset
    java.nio.charset.Charset charset(java.nio.charset.Charset) -> charset
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
okhttp3.MultipartBody -> okhttp3.MultipartBody:
    okhttp3.MediaType MIXED -> MIXED
    okhttp3.MediaType ALTERNATIVE -> ALTERNATIVE
    okhttp3.MediaType DIGEST -> DIGEST
    okhttp3.MediaType PARALLEL -> PARALLEL
    okhttp3.MediaType FORM -> FORM
    byte[] COLONSPACE -> COLONSPACE
    byte[] CRLF -> CRLF
    byte[] DASHDASH -> DASHDASH
    okio.ByteString boundary -> boundary
    okhttp3.MediaType originalType -> originalType
    okhttp3.MediaType contentType -> contentType
    java.util.List parts -> parts
    long contentLength -> contentLength
    void <init>(okio.ByteString,okhttp3.MediaType,java.util.List) -> <init>
    okhttp3.MediaType type() -> type
    java.lang.String boundary() -> boundary
    int size() -> size
    java.util.List parts() -> parts
    okhttp3.MultipartBody$Part part(int) -> part
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    java.lang.StringBuilder appendQuotedString(java.lang.StringBuilder,java.lang.String) -> appendQuotedString
    void <clinit>() -> <clinit>
okhttp3.MultipartBody$Builder -> okhttp3.MultipartBody$Builder:
    okio.ByteString boundary -> boundary
    okhttp3.MediaType type -> type
    java.util.List parts -> parts
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    okhttp3.MultipartBody$Builder setType(okhttp3.MediaType) -> setType
    okhttp3.MultipartBody$Builder addPart(okhttp3.RequestBody) -> addPart
    okhttp3.MultipartBody$Builder addPart(okhttp3.Headers,okhttp3.RequestBody) -> addPart
    okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String) -> addFormDataPart
    okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String,okhttp3.RequestBody) -> addFormDataPart
    okhttp3.MultipartBody$Builder addPart(okhttp3.MultipartBody$Part) -> addPart
    okhttp3.MultipartBody build() -> build
okhttp3.MultipartBody$Part -> okhttp3.MultipartBody$Part:
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    okhttp3.MultipartBody$Part create(okhttp3.RequestBody) -> create
    okhttp3.MultipartBody$Part create(okhttp3.Headers,okhttp3.RequestBody) -> create
    okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String) -> createFormData
    okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String,okhttp3.RequestBody) -> createFormData
    void <init>(okhttp3.Headers,okhttp3.RequestBody) -> <init>
    okhttp3.Headers headers() -> headers
    okhttp3.RequestBody body() -> body
okhttp3.OkHttpClient -> okhttp3.OkHttpClient:
    java.util.List DEFAULT_PROTOCOLS -> DEFAULT_PROTOCOLS
    java.util.List DEFAULT_CONNECTION_SPECS -> DEFAULT_CONNECTION_SPECS
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    okhttp3.EventListener$Factory eventListenerFactory -> eventListenerFactory
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    int pingInterval -> pingInterval
    void <init>() -> <init>
    void <init>(okhttp3.OkHttpClient$Builder) -> <init>
    javax.net.ssl.X509TrustManager systemDefaultTrustManager() -> systemDefaultTrustManager
    javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager) -> systemDefaultSslSocketFactory
    int connectTimeoutMillis() -> connectTimeoutMillis
    int readTimeoutMillis() -> readTimeoutMillis
    int writeTimeoutMillis() -> writeTimeoutMillis
    int pingIntervalMillis() -> pingIntervalMillis
    java.net.Proxy proxy() -> proxy
    java.net.ProxySelector proxySelector() -> proxySelector
    okhttp3.CookieJar cookieJar() -> cookieJar
    okhttp3.Cache cache() -> cache
    okhttp3.internal.cache.InternalCache internalCache() -> internalCache
    okhttp3.Dns dns() -> dns
    javax.net.SocketFactory socketFactory() -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    okhttp3.Authenticator authenticator() -> authenticator
    okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    okhttp3.ConnectionPool connectionPool() -> connectionPool
    boolean followSslRedirects() -> followSslRedirects
    boolean followRedirects() -> followRedirects
    boolean retryOnConnectionFailure() -> retryOnConnectionFailure
    okhttp3.Dispatcher dispatcher() -> dispatcher
    java.util.List protocols() -> protocols
    java.util.List connectionSpecs() -> connectionSpecs
    java.util.List interceptors() -> interceptors
    java.util.List networkInterceptors() -> networkInterceptors
    okhttp3.EventListener$Factory eventListenerFactory() -> eventListenerFactory
    okhttp3.Call newCall(okhttp3.Request) -> newCall
    okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener) -> newWebSocket
    okhttp3.OkHttpClient$Builder newBuilder() -> newBuilder
    void <clinit>() -> <clinit>
okhttp3.OkHttpClient$1 -> okhttp3.OkHttpClient$1:
    void <init>() -> <init>
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.cache.InternalCache) -> setCache
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation,okhttp3.Route) -> get
    boolean equalsNonHost(okhttp3.Address,okhttp3.Address) -> equalsNonHost
    java.net.Socket deduplicate(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> deduplicate
    void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> put
    okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    int code(okhttp3.Response$Builder) -> code
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
    okhttp3.internal.connection.StreamAllocation streamAllocation(okhttp3.Call) -> streamAllocation
    okhttp3.Call newWebSocketCall(okhttp3.OkHttpClient,okhttp3.Request) -> newWebSocketCall
okhttp3.OkHttpClient$Builder -> okhttp3.OkHttpClient$Builder:
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    okhttp3.EventListener$Factory eventListenerFactory -> eventListenerFactory
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    int pingInterval -> pingInterval
    void <init>() -> <init>
    void <init>(okhttp3.OkHttpClient) -> <init>
    okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit) -> connectTimeout
    okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit) -> readTimeout
    okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit) -> writeTimeout
    okhttp3.OkHttpClient$Builder pingInterval(long,java.util.concurrent.TimeUnit) -> pingInterval
    int checkDuration(java.lang.String,long,java.util.concurrent.TimeUnit) -> checkDuration
    okhttp3.OkHttpClient$Builder proxy(java.net.Proxy) -> proxy
    okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector) -> proxySelector
    okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar) -> cookieJar
    void setInternalCache(okhttp3.internal.cache.InternalCache) -> setInternalCache
    okhttp3.OkHttpClient$Builder cache(okhttp3.Cache) -> cache
    okhttp3.OkHttpClient$Builder dns(okhttp3.Dns) -> dns
    okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory) -> socketFactory
    okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory) -> sslSocketFactory
    okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager) -> sslSocketFactory
    okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier) -> hostnameVerifier
    okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner) -> certificatePinner
    okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator) -> authenticator
    okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator) -> proxyAuthenticator
    okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool) -> connectionPool
    okhttp3.OkHttpClient$Builder followSslRedirects(boolean) -> followSslRedirects
    okhttp3.OkHttpClient$Builder followRedirects(boolean) -> followRedirects
    okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean) -> retryOnConnectionFailure
    okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher) -> dispatcher
    okhttp3.OkHttpClient$Builder protocols(java.util.List) -> protocols
    okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List) -> connectionSpecs
    java.util.List interceptors() -> interceptors
    okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor) -> addInterceptor
    java.util.List networkInterceptors() -> networkInterceptors
    okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor) -> addNetworkInterceptor
    okhttp3.OkHttpClient$Builder eventListener(okhttp3.EventListener) -> eventListener
    okhttp3.OkHttpClient$Builder eventListenerFactory(okhttp3.EventListener$Factory) -> eventListenerFactory
    okhttp3.OkHttpClient build() -> build
okhttp3.Protocol -> okhttp3.Protocol:
    okhttp3.Protocol HTTP_1_0 -> HTTP_1_0
    okhttp3.Protocol HTTP_1_1 -> HTTP_1_1
    okhttp3.Protocol SPDY_3 -> SPDY_3
    okhttp3.Protocol HTTP_2 -> HTTP_2
    java.lang.String protocol -> protocol
    okhttp3.Protocol[] $VALUES -> $VALUES
    okhttp3.Protocol[] values() -> values
    okhttp3.Protocol valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    okhttp3.Protocol get(java.lang.String) -> get
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.RealCall -> okhttp3.RealCall:
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor -> retryAndFollowUpInterceptor
    okhttp3.EventListener eventListener -> eventListener
    okhttp3.Request originalRequest -> originalRequest
    boolean forWebSocket -> forWebSocket
    boolean executed -> executed
    void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean) -> <init>
    okhttp3.Request request() -> request
    okhttp3.Response execute() -> execute
    void captureCallStackTrace() -> captureCallStackTrace
    void enqueue(okhttp3.Callback) -> enqueue
    void cancel() -> cancel
    boolean isExecuted() -> isExecuted
    boolean isCanceled() -> isCanceled
    okhttp3.RealCall clone() -> clone
    okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    java.lang.String toLoggableString() -> toLoggableString
    java.lang.String redactedUrl() -> redactedUrl
    okhttp3.Response getResponseWithInterceptorChain() -> getResponseWithInterceptorChain
    java.lang.Object clone() -> clone
    okhttp3.Call clone() -> clone
okhttp3.RealCall$AsyncCall -> okhttp3.RealCall$AsyncCall:
    okhttp3.Callback responseCallback -> responseCallback
    okhttp3.RealCall this$0 -> this$0
    void <init>(okhttp3.RealCall,okhttp3.Callback) -> <init>
    java.lang.String host() -> host
    okhttp3.Request request() -> request
    okhttp3.RealCall get() -> get
    void execute() -> execute
okhttp3.Request -> okhttp3.Request:
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    okhttp3.CacheControl cacheControl -> cacheControl
    void <init>(okhttp3.Request$Builder) -> <init>
    okhttp3.HttpUrl url() -> url
    java.lang.String method() -> method
    okhttp3.Headers headers() -> headers
    java.lang.String header(java.lang.String) -> header
    java.util.List headers(java.lang.String) -> headers
    okhttp3.RequestBody body() -> body
    java.lang.Object tag() -> tag
    okhttp3.Request$Builder newBuilder() -> newBuilder
    okhttp3.CacheControl cacheControl() -> cacheControl
    boolean isHttps() -> isHttps
    java.lang.String toString() -> toString
okhttp3.Request$Builder -> okhttp3.Request$Builder:
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers$Builder headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    void <init>() -> <init>
    void <init>(okhttp3.Request) -> <init>
    okhttp3.Request$Builder url(okhttp3.HttpUrl) -> url
    okhttp3.Request$Builder url(java.lang.String) -> url
    okhttp3.Request$Builder url(java.net.URL) -> url
    okhttp3.Request$Builder header(java.lang.String,java.lang.String) -> header
    okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    okhttp3.Request$Builder removeHeader(java.lang.String) -> removeHeader
    okhttp3.Request$Builder headers(okhttp3.Headers) -> headers
    okhttp3.Request$Builder cacheControl(okhttp3.CacheControl) -> cacheControl
    okhttp3.Request$Builder get() -> get
    okhttp3.Request$Builder head() -> head
    okhttp3.Request$Builder post(okhttp3.RequestBody) -> post
    okhttp3.Request$Builder delete(okhttp3.RequestBody) -> delete
    okhttp3.Request$Builder delete() -> delete
    okhttp3.Request$Builder put(okhttp3.RequestBody) -> put
    okhttp3.Request$Builder patch(okhttp3.RequestBody) -> patch
    okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody) -> method
    okhttp3.Request$Builder tag(java.lang.Object) -> tag
    okhttp3.Request build() -> build
okhttp3.RequestBody -> okhttp3.RequestBody:
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,okio.ByteString) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,byte[]) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,java.io.File) -> create
okhttp3.RequestBody$1 -> okhttp3.RequestBody$1:
    okhttp3.MediaType val$contentType -> val$contentType
    okio.ByteString val$content -> val$content
    void <init>(okhttp3.MediaType,okio.ByteString) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$2 -> okhttp3.RequestBody$2:
    okhttp3.MediaType val$contentType -> val$contentType
    int val$byteCount -> val$byteCount
    byte[] val$content -> val$content
    int val$offset -> val$offset
    void <init>(okhttp3.MediaType,int,byte[],int) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$3 -> okhttp3.RequestBody$3:
    okhttp3.MediaType val$contentType -> val$contentType
    java.io.File val$file -> val$file
    void <init>(okhttp3.MediaType,java.io.File) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.Response -> okhttp3.Response:
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    okhttp3.CacheControl cacheControl -> cacheControl
    void <init>(okhttp3.Response$Builder) -> <init>
    okhttp3.Request request() -> request
    okhttp3.Protocol protocol() -> protocol
    int code() -> code
    boolean isSuccessful() -> isSuccessful
    java.lang.String message() -> message
    okhttp3.Handshake handshake() -> handshake
    java.util.List headers(java.lang.String) -> headers
    java.lang.String header(java.lang.String) -> header
    java.lang.String header(java.lang.String,java.lang.String) -> header
    okhttp3.Headers headers() -> headers
    okhttp3.ResponseBody peekBody(long) -> peekBody
    okhttp3.ResponseBody body() -> body
    okhttp3.Response$Builder newBuilder() -> newBuilder
    boolean isRedirect() -> isRedirect
    okhttp3.Response networkResponse() -> networkResponse
    okhttp3.Response cacheResponse() -> cacheResponse
    okhttp3.Response priorResponse() -> priorResponse
    java.util.List challenges() -> challenges
    okhttp3.CacheControl cacheControl() -> cacheControl
    long sentRequestAtMillis() -> sentRequestAtMillis
    long receivedResponseAtMillis() -> receivedResponseAtMillis
    void close() -> close
    java.lang.String toString() -> toString
okhttp3.Response$Builder -> okhttp3.Response$Builder:
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers$Builder headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    void <init>() -> <init>
    void <init>(okhttp3.Response) -> <init>
    okhttp3.Response$Builder request(okhttp3.Request) -> request
    okhttp3.Response$Builder protocol(okhttp3.Protocol) -> protocol
    okhttp3.Response$Builder code(int) -> code
    okhttp3.Response$Builder message(java.lang.String) -> message
    okhttp3.Response$Builder handshake(okhttp3.Handshake) -> handshake
    okhttp3.Response$Builder header(java.lang.String,java.lang.String) -> header
    okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    okhttp3.Response$Builder removeHeader(java.lang.String) -> removeHeader
    okhttp3.Response$Builder headers(okhttp3.Headers) -> headers
    okhttp3.Response$Builder body(okhttp3.ResponseBody) -> body
    okhttp3.Response$Builder networkResponse(okhttp3.Response) -> networkResponse
    okhttp3.Response$Builder cacheResponse(okhttp3.Response) -> cacheResponse
    void checkSupportResponse(java.lang.String,okhttp3.Response) -> checkSupportResponse
    okhttp3.Response$Builder priorResponse(okhttp3.Response) -> priorResponse
    void checkPriorResponse(okhttp3.Response) -> checkPriorResponse
    okhttp3.Response$Builder sentRequestAtMillis(long) -> sentRequestAtMillis
    okhttp3.Response$Builder receivedResponseAtMillis(long) -> receivedResponseAtMillis
    okhttp3.Response build() -> build
okhttp3.ResponseBody -> okhttp3.ResponseBody:
    java.io.Reader reader -> reader
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    java.io.InputStream byteStream() -> byteStream
    okio.BufferedSource source() -> source
    byte[] bytes() -> bytes
    java.io.Reader charStream() -> charStream
    java.lang.String string() -> string
    java.nio.charset.Charset charset() -> charset
    void close() -> close
    okhttp3.ResponseBody create(okhttp3.MediaType,java.lang.String) -> create
    okhttp3.ResponseBody create(okhttp3.MediaType,byte[]) -> create
    okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource) -> create
okhttp3.ResponseBody$1 -> okhttp3.ResponseBody$1:
    okhttp3.MediaType val$contentType -> val$contentType
    long val$contentLength -> val$contentLength
    okio.BufferedSource val$content -> val$content
    void <init>(okhttp3.MediaType,long,okio.BufferedSource) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.ResponseBody$BomAwareReader -> okhttp3.ResponseBody$BomAwareReader:
    okio.BufferedSource source -> source
    java.nio.charset.Charset charset -> charset
    boolean closed -> closed
    java.io.Reader delegate -> delegate
    void <init>(okio.BufferedSource,java.nio.charset.Charset) -> <init>
    int read(char[],int,int) -> read
    void close() -> close
okhttp3.Route -> okhttp3.Route:
    okhttp3.Address address -> address
    java.net.Proxy proxy -> proxy
    java.net.InetSocketAddress inetSocketAddress -> inetSocketAddress
    void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress) -> <init>
    okhttp3.Address address() -> address
    java.net.Proxy proxy() -> proxy
    java.net.InetSocketAddress socketAddress() -> socketAddress
    boolean requiresTunnel() -> requiresTunnel
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okhttp3.TlsVersion -> okhttp3.TlsVersion:
    okhttp3.TlsVersion TLS_1_3 -> TLS_1_3
    okhttp3.TlsVersion TLS_1_2 -> TLS_1_2
    okhttp3.TlsVersion TLS_1_1 -> TLS_1_1
    okhttp3.TlsVersion TLS_1_0 -> TLS_1_0
    okhttp3.TlsVersion SSL_3_0 -> SSL_3_0
    java.lang.String javaName -> javaName
    okhttp3.TlsVersion[] $VALUES -> $VALUES
    okhttp3.TlsVersion[] values() -> values
    okhttp3.TlsVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    okhttp3.TlsVersion forJavaName(java.lang.String) -> forJavaName
    java.util.List forJavaNames(java.lang.String[]) -> forJavaNames
    java.lang.String javaName() -> javaName
    void <clinit>() -> <clinit>
okhttp3.WebSocket -> okhttp3.WebSocket:
    okhttp3.Request request() -> request
    long queueSize() -> queueSize
    boolean send(java.lang.String) -> send
    boolean send(okio.ByteString) -> send
    boolean close(int,java.lang.String) -> close
    void cancel() -> cancel
okhttp3.WebSocket$Factory -> okhttp3.WebSocket$Factory:
    okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener) -> newWebSocket
okhttp3.WebSocketListener -> okhttp3.WebSocketListener:
    void <init>() -> <init>
    void onOpen(okhttp3.WebSocket,okhttp3.Response) -> onOpen
    void onMessage(okhttp3.WebSocket,java.lang.String) -> onMessage
    void onMessage(okhttp3.WebSocket,okio.ByteString) -> onMessage
    void onClosing(okhttp3.WebSocket,int,java.lang.String) -> onClosing
    void onClosed(okhttp3.WebSocket,int,java.lang.String) -> onClosed
    void onFailure(okhttp3.WebSocket,java.lang.Throwable,okhttp3.Response) -> onFailure
okhttp3.internal.Internal -> okhttp3.internal.Internal:
    okhttp3.internal.Internal instance -> instance
    void <init>() -> <init>
    void initializeInstanceForTests() -> initializeInstanceForTests
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.cache.InternalCache) -> setCache
    okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation,okhttp3.Route) -> get
    boolean equalsNonHost(okhttp3.Address,okhttp3.Address) -> equalsNonHost
    java.net.Socket deduplicate(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> deduplicate
    void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> put
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    int code(okhttp3.Response$Builder) -> code
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
    okhttp3.internal.connection.StreamAllocation streamAllocation(okhttp3.Call) -> streamAllocation
    okhttp3.Call newWebSocketCall(okhttp3.OkHttpClient,okhttp3.Request) -> newWebSocketCall
okhttp3.internal.NamedRunnable -> okhttp3.internal.NamedRunnable:
    java.lang.String name -> name
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
    void run() -> run
    void execute() -> execute
okhttp3.internal.Util -> okhttp3.internal.Util:
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    java.lang.String[] EMPTY_STRING_ARRAY -> EMPTY_STRING_ARRAY
    okhttp3.ResponseBody EMPTY_RESPONSE -> EMPTY_RESPONSE
    okhttp3.RequestBody EMPTY_REQUEST -> EMPTY_REQUEST
    okio.ByteString UTF_8_BOM -> UTF_8_BOM
    okio.ByteString UTF_16_BE_BOM -> UTF_16_BE_BOM
    okio.ByteString UTF_16_LE_BOM -> UTF_16_LE_BOM
    okio.ByteString UTF_32_BE_BOM -> UTF_32_BE_BOM
    okio.ByteString UTF_32_LE_BOM -> UTF_32_LE_BOM
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset UTF_16_BE -> UTF_16_BE
    java.nio.charset.Charset UTF_16_LE -> UTF_16_LE
    java.nio.charset.Charset UTF_32_BE -> UTF_32_BE
    java.nio.charset.Charset UTF_32_LE -> UTF_32_LE
    java.util.TimeZone UTC -> UTC
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    java.util.regex.Pattern VERIFY_AS_IP_ADDRESS -> VERIFY_AS_IP_ADDRESS
    void <init>() -> <init>
    void checkOffsetAndCount(long,long,long) -> checkOffsetAndCount
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    void closeQuietly(java.io.Closeable) -> closeQuietly
    void closeQuietly(java.net.Socket) -> closeQuietly
    void closeQuietly(java.net.ServerSocket) -> closeQuietly
    boolean discard(okio.Source,int,java.util.concurrent.TimeUnit) -> discard
    boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit) -> skipAll
    java.util.List immutableList(java.util.List) -> immutableList
    java.util.List immutableList(java.lang.Object[]) -> immutableList
    java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean) -> threadFactory
    java.lang.String[] intersect(java.util.Comparator,java.lang.String[],java.lang.String[]) -> intersect
    boolean nonEmptyIntersection(java.util.Comparator,java.lang.String[],java.lang.String[]) -> nonEmptyIntersection
    java.lang.String hostHeader(okhttp3.HttpUrl,boolean) -> hostHeader
    java.lang.String toHumanReadableAscii(java.lang.String) -> toHumanReadableAscii
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> isAndroidGetsocknameError
    int indexOf(java.util.Comparator,java.lang.String[],java.lang.String) -> indexOf
    java.lang.String[] concat(java.lang.String[],java.lang.String) -> concat
    int skipLeadingAsciiWhitespace(java.lang.String,int,int) -> skipLeadingAsciiWhitespace
    int skipTrailingAsciiWhitespace(java.lang.String,int,int) -> skipTrailingAsciiWhitespace
    java.lang.String trimSubstring(java.lang.String,int,int) -> trimSubstring
    int delimiterOffset(java.lang.String,int,int,java.lang.String) -> delimiterOffset
    int delimiterOffset(java.lang.String,int,int,char) -> delimiterOffset
    java.lang.String domainToAscii(java.lang.String) -> domainToAscii
    boolean containsInvalidHostnameAsciiCodes(java.lang.String) -> containsInvalidHostnameAsciiCodes
    int indexOfControlOrNonAscii(java.lang.String) -> indexOfControlOrNonAscii
    boolean verifyAsIpAddress(java.lang.String) -> verifyAsIpAddress
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    java.nio.charset.Charset bomAwareCharset(okio.BufferedSource,java.nio.charset.Charset) -> bomAwareCharset
    void <clinit>() -> <clinit>
okhttp3.internal.Util$1 -> okhttp3.internal.Util$1:
    void <init>() -> <init>
    int compare(java.lang.String,java.lang.String) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
okhttp3.internal.Util$2 -> okhttp3.internal.Util$2:
    java.lang.String val$name -> val$name
    boolean val$daemon -> val$daemon
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
okhttp3.internal.Version -> okhttp3.internal.Version:
    java.lang.String userAgent() -> userAgent
    void <init>() -> <init>
okhttp3.internal.cache.CacheInterceptor -> okhttp3.internal.cache.CacheInterceptor:
    okhttp3.internal.cache.InternalCache cache -> cache
    void <init>(okhttp3.internal.cache.InternalCache) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    okhttp3.Response stripBody(okhttp3.Response) -> stripBody
    okhttp3.Response cacheWritingResponse(okhttp3.internal.cache.CacheRequest,okhttp3.Response) -> cacheWritingResponse
    okhttp3.Headers combine(okhttp3.Headers,okhttp3.Headers) -> combine
    boolean isEndToEnd(java.lang.String) -> isEndToEnd
okhttp3.internal.cache.CacheInterceptor$1 -> okhttp3.internal.cache.CacheInterceptor$1:
    boolean cacheRequestClosed -> cacheRequestClosed
    okio.BufferedSource val$source -> val$source
    okhttp3.internal.cache.CacheRequest val$cacheRequest -> val$cacheRequest
    okio.BufferedSink val$cacheBody -> val$cacheBody
    okhttp3.internal.cache.CacheInterceptor this$0 -> this$0
    void <init>(okhttp3.internal.cache.CacheInterceptor,okio.BufferedSource,okhttp3.internal.cache.CacheRequest,okio.BufferedSink) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okhttp3.internal.cache.CacheRequest -> okhttp3.internal.cache.CacheRequest:
    okio.Sink body() -> body
    void abort() -> abort
okhttp3.internal.cache.CacheStrategy -> okhttp3.internal.cache.CacheStrategy:
    okhttp3.Request networkRequest -> networkRequest
    okhttp3.Response cacheResponse -> cacheResponse
    void <init>(okhttp3.Request,okhttp3.Response) -> <init>
    boolean isCacheable(okhttp3.Response,okhttp3.Request) -> isCacheable
okhttp3.internal.cache.CacheStrategy$Factory -> okhttp3.internal.cache.CacheStrategy$Factory:
    long nowMillis -> nowMillis
    okhttp3.Request request -> request
    okhttp3.Response cacheResponse -> cacheResponse
    java.util.Date servedDate -> servedDate
    java.lang.String servedDateString -> servedDateString
    java.util.Date lastModified -> lastModified
    java.lang.String lastModifiedString -> lastModifiedString
    java.util.Date expires -> expires
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    java.lang.String etag -> etag
    int ageSeconds -> ageSeconds
    void <init>(long,okhttp3.Request,okhttp3.Response) -> <init>
    okhttp3.internal.cache.CacheStrategy get() -> get
    okhttp3.internal.cache.CacheStrategy getCandidate() -> getCandidate
    long computeFreshnessLifetime() -> computeFreshnessLifetime
    long cacheResponseAge() -> cacheResponseAge
    boolean isFreshnessLifetimeHeuristic() -> isFreshnessLifetimeHeuristic
    boolean hasConditions(okhttp3.Request) -> hasConditions
okhttp3.internal.cache.DiskLruCache -> okhttp3.internal.cache.DiskLruCache:
    java.lang.String JOURNAL_FILE -> JOURNAL_FILE
    java.lang.String JOURNAL_FILE_TEMP -> JOURNAL_FILE_TEMP
    java.lang.String JOURNAL_FILE_BACKUP -> JOURNAL_FILE_BACKUP
    java.lang.String MAGIC -> MAGIC
    java.lang.String VERSION_1 -> VERSION_1
    long ANY_SEQUENCE_NUMBER -> ANY_SEQUENCE_NUMBER
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> LEGAL_KEY_PATTERN
    java.lang.String CLEAN -> CLEAN
    java.lang.String DIRTY -> DIRTY
    java.lang.String REMOVE -> REMOVE
    java.lang.String READ -> READ
    okhttp3.internal.io.FileSystem fileSystem -> fileSystem
    java.io.File directory -> directory
    java.io.File journalFile -> journalFile
    java.io.File journalFileTmp -> journalFileTmp
    java.io.File journalFileBackup -> journalFileBackup
    int appVersion -> appVersion
    long maxSize -> maxSize
    int valueCount -> valueCount
    long size -> size
    okio.BufferedSink journalWriter -> journalWriter
    java.util.LinkedHashMap lruEntries -> lruEntries
    int redundantOpCount -> redundantOpCount
    boolean hasJournalErrors -> hasJournalErrors
    boolean initialized -> initialized
    boolean closed -> closed
    boolean mostRecentTrimFailed -> mostRecentTrimFailed
    boolean mostRecentRebuildFailed -> mostRecentRebuildFailed
    long nextSequenceNumber -> nextSequenceNumber
    java.util.concurrent.Executor executor -> executor
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.internal.io.FileSystem,java.io.File,int,int,long,java.util.concurrent.Executor) -> <init>
    void initialize() -> initialize
    okhttp3.internal.cache.DiskLruCache create(okhttp3.internal.io.FileSystem,java.io.File,int,int,long) -> create
    void readJournal() -> readJournal
    okio.BufferedSink newJournalWriter() -> newJournalWriter
    void readJournalLine(java.lang.String) -> readJournalLine
    void processJournal() -> processJournal
    void rebuildJournal() -> rebuildJournal
    okhttp3.internal.cache.DiskLruCache$Snapshot get(java.lang.String) -> get
    okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String) -> edit
    okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String,long) -> edit
    java.io.File getDirectory() -> getDirectory
    long getMaxSize() -> getMaxSize
    void setMaxSize(long) -> setMaxSize
    long size() -> size
    void completeEdit(okhttp3.internal.cache.DiskLruCache$Editor,boolean) -> completeEdit
    boolean journalRebuildRequired() -> journalRebuildRequired
    boolean remove(java.lang.String) -> remove
    boolean removeEntry(okhttp3.internal.cache.DiskLruCache$Entry) -> removeEntry
    boolean isClosed() -> isClosed
    void checkNotClosed() -> checkNotClosed
    void flush() -> flush
    void close() -> close
    void trimToSize() -> trimToSize
    void delete() -> delete
    void evictAll() -> evictAll
    void validateKey(java.lang.String) -> validateKey
    java.util.Iterator snapshots() -> snapshots
    void <clinit>() -> <clinit>
okhttp3.internal.cache.DiskLruCache$1 -> okhttp3.internal.cache.DiskLruCache$1:
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache) -> <init>
    void run() -> run
okhttp3.internal.cache.DiskLruCache$2 -> okhttp3.internal.cache.DiskLruCache$2:
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,okio.Sink) -> <init>
    void onException(java.io.IOException) -> onException
    void <clinit>() -> <clinit>
okhttp3.internal.cache.DiskLruCache$3 -> okhttp3.internal.cache.DiskLruCache$3:
    java.util.Iterator delegate -> delegate
    okhttp3.internal.cache.DiskLruCache$Snapshot nextSnapshot -> nextSnapshot
    okhttp3.internal.cache.DiskLruCache$Snapshot removeSnapshot -> removeSnapshot
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache) -> <init>
    boolean hasNext() -> hasNext
    okhttp3.internal.cache.DiskLruCache$Snapshot next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
okhttp3.internal.cache.DiskLruCache$Editor -> okhttp3.internal.cache.DiskLruCache$Editor:
    okhttp3.internal.cache.DiskLruCache$Entry entry -> entry
    boolean[] written -> written
    boolean done -> done
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Entry) -> <init>
    void detach() -> detach
    okio.Source newSource(int) -> newSource
    okio.Sink newSink(int) -> newSink
    void commit() -> commit
    void abort() -> abort
    void abortUnlessCommitted() -> abortUnlessCommitted
okhttp3.internal.cache.DiskLruCache$Editor$1 -> okhttp3.internal.cache.DiskLruCache$Editor$1:
    okhttp3.internal.cache.DiskLruCache$Editor this$1 -> this$1
    void <init>(okhttp3.internal.cache.DiskLruCache$Editor,okio.Sink) -> <init>
    void onException(java.io.IOException) -> onException
okhttp3.internal.cache.DiskLruCache$Entry -> okhttp3.internal.cache.DiskLruCache$Entry:
    java.lang.String key -> key
    long[] lengths -> lengths
    java.io.File[] cleanFiles -> cleanFiles
    java.io.File[] dirtyFiles -> dirtyFiles
    boolean readable -> readable
    okhttp3.internal.cache.DiskLruCache$Editor currentEditor -> currentEditor
    long sequenceNumber -> sequenceNumber
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String) -> <init>
    void setLengths(java.lang.String[]) -> setLengths
    void writeLengths(okio.BufferedSink) -> writeLengths
    java.io.IOException invalidLengths(java.lang.String[]) -> invalidLengths
    okhttp3.internal.cache.DiskLruCache$Snapshot snapshot() -> snapshot
okhttp3.internal.cache.DiskLruCache$Snapshot -> okhttp3.internal.cache.DiskLruCache$Snapshot:
    java.lang.String key -> key
    long sequenceNumber -> sequenceNumber
    okio.Source[] sources -> sources
    long[] lengths -> lengths
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,long,okio.Source[],long[]) -> <init>
    java.lang.String key() -> key
    okhttp3.internal.cache.DiskLruCache$Editor edit() -> edit
    okio.Source getSource(int) -> getSource
    long getLength(int) -> getLength
    void close() -> close
    java.lang.String access$000(okhttp3.internal.cache.DiskLruCache$Snapshot) -> access$000
okhttp3.internal.cache.FaultHidingSink -> okhttp3.internal.cache.FaultHidingSink:
    boolean hasErrors -> hasErrors
    void <init>(okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    void onException(java.io.IOException) -> onException
okhttp3.internal.cache.InternalCache -> okhttp3.internal.cache.InternalCache:
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
okhttp3.internal.cache2.FileOperator -> okhttp3.internal.cache2.FileOperator:
    int BUFFER_SIZE -> BUFFER_SIZE
    byte[] byteArray -> byteArray
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    java.nio.channels.FileChannel fileChannel -> fileChannel
    void <init>(java.nio.channels.FileChannel) -> <init>
    void write(long,okio.Buffer,long) -> write
    void read(long,okio.Buffer,long) -> read
okhttp3.internal.cache2.Relay -> okhttp3.internal.cache2.Relay:
    int SOURCE_UPSTREAM -> SOURCE_UPSTREAM
    int SOURCE_FILE -> SOURCE_FILE
    okio.ByteString PREFIX_CLEAN -> PREFIX_CLEAN
    okio.ByteString PREFIX_DIRTY -> PREFIX_DIRTY
    long FILE_HEADER_SIZE -> FILE_HEADER_SIZE
    java.io.RandomAccessFile file -> file
    java.lang.Thread upstreamReader -> upstreamReader
    okio.Source upstream -> upstream
    okio.Buffer upstreamBuffer -> upstreamBuffer
    long upstreamPos -> upstreamPos
    boolean complete -> complete
    okio.ByteString metadata -> metadata
    okio.Buffer buffer -> buffer
    long bufferMaxSize -> bufferMaxSize
    int sourceCount -> sourceCount
    void <init>(java.io.RandomAccessFile,okio.Source,long,okio.ByteString,long) -> <init>
    okhttp3.internal.cache2.Relay edit(java.io.File,okio.Source,okio.ByteString,long) -> edit
    okhttp3.internal.cache2.Relay read(java.io.File) -> read
    void writeHeader(okio.ByteString,long,long) -> writeHeader
    void writeMetadata(long) -> writeMetadata
    void commit(long) -> commit
    boolean isClosed() -> isClosed
    okio.ByteString metadata() -> metadata
    okio.Source newSource() -> newSource
    void <clinit>() -> <clinit>
okhttp3.internal.cache2.Relay$RelaySource -> okhttp3.internal.cache2.Relay$RelaySource:
    okio.Timeout timeout -> timeout
    okhttp3.internal.cache2.FileOperator fileOperator -> fileOperator
    long sourcePos -> sourcePos
    okhttp3.internal.cache2.Relay this$0 -> this$0
    void <init>(okhttp3.internal.cache2.Relay) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okhttp3.internal.connection.ConnectInterceptor -> okhttp3.internal.connection.ConnectInterceptor:
    okhttp3.OkHttpClient client -> client
    void <init>(okhttp3.OkHttpClient) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.internal.connection.ConnectionSpecSelector -> okhttp3.internal.connection.ConnectionSpecSelector:
    java.util.List connectionSpecs -> connectionSpecs
    int nextModeIndex -> nextModeIndex
    boolean isFallbackPossible -> isFallbackPossible
    boolean isFallback -> isFallback
    void <init>(java.util.List) -> <init>
    okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket) -> configureSecureSocket
    boolean connectionFailed(java.io.IOException) -> connectionFailed
    boolean isFallbackPossible(javax.net.ssl.SSLSocket) -> isFallbackPossible
okhttp3.internal.connection.RealConnection -> okhttp3.internal.connection.RealConnection:
    java.lang.String NPE_THROW_WITH_NULL -> NPE_THROW_WITH_NULL
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Route route -> route
    java.net.Socket rawSocket -> rawSocket
    java.net.Socket socket -> socket
    okhttp3.Handshake handshake -> handshake
    okhttp3.Protocol protocol -> protocol
    okhttp3.internal.http2.Http2Connection http2Connection -> http2Connection
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    boolean noNewStreams -> noNewStreams
    int successCount -> successCount
    int allocationLimit -> allocationLimit
    java.util.List allocations -> allocations
    long idleAtNanos -> idleAtNanos
    void <init>(okhttp3.ConnectionPool,okhttp3.Route) -> <init>
    okhttp3.internal.connection.RealConnection testConnection(okhttp3.ConnectionPool,okhttp3.Route,java.net.Socket,long) -> testConnection
    void connect(int,int,int,boolean) -> connect
    void connectTunnel(int,int,int) -> connectTunnel
    void connectSocket(int,int) -> connectSocket
    void establishProtocol(okhttp3.internal.connection.ConnectionSpecSelector) -> establishProtocol
    void connectTls(okhttp3.internal.connection.ConnectionSpecSelector) -> connectTls
    okhttp3.Request createTunnel(int,int,okhttp3.Request,okhttp3.HttpUrl) -> createTunnel
    okhttp3.Request createTunnelRequest() -> createTunnelRequest
    boolean isEligible(okhttp3.Address,okhttp3.Route) -> isEligible
    boolean supportsUrl(okhttp3.HttpUrl) -> supportsUrl
    okhttp3.internal.http.HttpCodec newCodec(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation) -> newCodec
    okhttp3.internal.ws.RealWebSocket$Streams newWebSocketStreams(okhttp3.internal.connection.StreamAllocation) -> newWebSocketStreams
    okhttp3.Route route() -> route
    void cancel() -> cancel
    java.net.Socket socket() -> socket
    boolean isHealthy(boolean) -> isHealthy
    void onStream(okhttp3.internal.http2.Http2Stream) -> onStream
    void onSettings(okhttp3.internal.http2.Http2Connection) -> onSettings
    okhttp3.Handshake handshake() -> handshake
    boolean isMultiplexed() -> isMultiplexed
    okhttp3.Protocol protocol() -> protocol
    java.lang.String toString() -> toString
okhttp3.internal.connection.RealConnection$1 -> okhttp3.internal.connection.RealConnection$1:
    okhttp3.internal.connection.StreamAllocation val$streamAllocation -> val$streamAllocation
    okhttp3.internal.connection.RealConnection this$0 -> this$0
    void <init>(okhttp3.internal.connection.RealConnection,boolean,okio.BufferedSource,okio.BufferedSink,okhttp3.internal.connection.StreamAllocation) -> <init>
    void close() -> close
okhttp3.internal.connection.RouteDatabase -> okhttp3.internal.connection.RouteDatabase:
    java.util.Set failedRoutes -> failedRoutes
    void <init>() -> <init>
    void failed(okhttp3.Route) -> failed
    void connected(okhttp3.Route) -> connected
    boolean shouldPostpone(okhttp3.Route) -> shouldPostpone
okhttp3.internal.connection.RouteException -> okhttp3.internal.connection.RouteException:
    java.lang.reflect.Method addSuppressedExceptionMethod -> addSuppressedExceptionMethod
    java.io.IOException lastException -> lastException
    void <init>(java.io.IOException) -> <init>
    java.io.IOException getLastConnectException() -> getLastConnectException
    void addConnectException(java.io.IOException) -> addConnectException
    void addSuppressedIfPossible(java.io.IOException,java.io.IOException) -> addSuppressedIfPossible
    void <clinit>() -> <clinit>
okhttp3.internal.connection.RouteSelector -> okhttp3.internal.connection.RouteSelector:
    okhttp3.Address address -> address
    okhttp3.internal.connection.RouteDatabase routeDatabase -> routeDatabase
    java.net.Proxy lastProxy -> lastProxy
    java.net.InetSocketAddress lastInetSocketAddress -> lastInetSocketAddress
    java.util.List proxies -> proxies
    int nextProxyIndex -> nextProxyIndex
    java.util.List inetSocketAddresses -> inetSocketAddresses
    int nextInetSocketAddressIndex -> nextInetSocketAddressIndex
    java.util.List postponedRoutes -> postponedRoutes
    void <init>(okhttp3.Address,okhttp3.internal.connection.RouteDatabase) -> <init>
    boolean hasNext() -> hasNext
    okhttp3.Route next() -> next
    void connectFailed(okhttp3.Route,java.io.IOException) -> connectFailed
    void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy) -> resetNextProxy
    boolean hasNextProxy() -> hasNextProxy
    java.net.Proxy nextProxy() -> nextProxy
    void resetNextInetSocketAddress(java.net.Proxy) -> resetNextInetSocketAddress
    java.lang.String getHostString(java.net.InetSocketAddress) -> getHostString
    boolean hasNextInetSocketAddress() -> hasNextInetSocketAddress
    java.net.InetSocketAddress nextInetSocketAddress() -> nextInetSocketAddress
    boolean hasNextPostponed() -> hasNextPostponed
    okhttp3.Route nextPostponed() -> nextPostponed
okhttp3.internal.connection.StreamAllocation -> okhttp3.internal.connection.StreamAllocation:
    okhttp3.Address address -> address
    okhttp3.Route route -> route
    okhttp3.ConnectionPool connectionPool -> connectionPool
    java.lang.Object callStackTrace -> callStackTrace
    okhttp3.internal.connection.RouteSelector routeSelector -> routeSelector
    int refusedStreamCount -> refusedStreamCount
    okhttp3.internal.connection.RealConnection connection -> connection
    boolean released -> released
    boolean canceled -> canceled
    okhttp3.internal.http.HttpCodec codec -> codec
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.ConnectionPool,okhttp3.Address,java.lang.Object) -> <init>
    okhttp3.internal.http.HttpCodec newStream(okhttp3.OkHttpClient,boolean) -> newStream
    okhttp3.internal.connection.RealConnection findHealthyConnection(int,int,int,boolean,boolean) -> findHealthyConnection
    okhttp3.internal.connection.RealConnection findConnection(int,int,int,boolean) -> findConnection
    void streamFinished(boolean,okhttp3.internal.http.HttpCodec) -> streamFinished
    okhttp3.internal.http.HttpCodec codec() -> codec
    okhttp3.internal.connection.RouteDatabase routeDatabase() -> routeDatabase
    okhttp3.internal.connection.RealConnection connection() -> connection
    void release() -> release
    void noNewStreams() -> noNewStreams
    java.net.Socket deallocate(boolean,boolean,boolean) -> deallocate
    void cancel() -> cancel
    void streamFailed(java.io.IOException) -> streamFailed
    void acquire(okhttp3.internal.connection.RealConnection) -> acquire
    void release(okhttp3.internal.connection.RealConnection) -> release
    java.net.Socket releaseAndAcquire(okhttp3.internal.connection.RealConnection) -> releaseAndAcquire
    boolean hasMoreRoutes() -> hasMoreRoutes
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.internal.connection.StreamAllocation$StreamAllocationReference -> okhttp3.internal.connection.StreamAllocation$StreamAllocationReference:
    java.lang.Object callStackTrace -> callStackTrace
    void <init>(okhttp3.internal.connection.StreamAllocation,java.lang.Object) -> <init>
okhttp3.internal.http.BridgeInterceptor -> okhttp3.internal.http.BridgeInterceptor:
    okhttp3.CookieJar cookieJar -> cookieJar
    void <init>(okhttp3.CookieJar) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    java.lang.String cookieHeader(java.util.List) -> cookieHeader
okhttp3.internal.http.CallServerInterceptor -> okhttp3.internal.http.CallServerInterceptor:
    boolean forWebSocket -> forWebSocket
    void <init>(boolean) -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.internal.http.HttpCodec -> okhttp3.internal.http.HttpCodec:
    int DISCARD_STREAM_TIMEOUT_MILLIS -> DISCARD_STREAM_TIMEOUT_MILLIS
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    void flushRequest() -> flushRequest
    void finishRequest() -> finishRequest
    okhttp3.Response$Builder readResponseHeaders(boolean) -> readResponseHeaders
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    void cancel() -> cancel
okhttp3.internal.http.HttpDate -> okhttp3.internal.http.HttpDate:
    long MAX_DATE -> MAX_DATE
    java.lang.ThreadLocal STANDARD_DATE_FORMAT -> STANDARD_DATE_FORMAT
    java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS -> BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS
    java.text.DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS -> BROWSER_COMPATIBLE_DATE_FORMATS
    java.util.Date parse(java.lang.String) -> parse
    java.lang.String format(java.util.Date) -> format
    void <init>() -> <init>
    void <clinit>() -> <clinit>
okhttp3.internal.http.HttpDate$1 -> okhttp3.internal.http.HttpDate$1:
    void <init>() -> <init>
    java.text.DateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
okhttp3.internal.http.HttpHeaders -> okhttp3.internal.http.HttpHeaders:
    java.lang.String TOKEN -> TOKEN
    java.lang.String QUOTED_STRING -> QUOTED_STRING
    java.util.regex.Pattern PARAMETER -> PARAMETER
    void <init>() -> <init>
    long contentLength(okhttp3.Response) -> contentLength
    long contentLength(okhttp3.Headers) -> contentLength
    long stringToLong(java.lang.String) -> stringToLong
    boolean varyMatches(okhttp3.Response,okhttp3.Headers,okhttp3.Request) -> varyMatches
    boolean hasVaryAll(okhttp3.Response) -> hasVaryAll
    boolean hasVaryAll(okhttp3.Headers) -> hasVaryAll
    java.util.Set varyFields(okhttp3.Response) -> varyFields
    java.util.Set varyFields(okhttp3.Headers) -> varyFields
    okhttp3.Headers varyHeaders(okhttp3.Response) -> varyHeaders
    okhttp3.Headers varyHeaders(okhttp3.Headers,okhttp3.Headers) -> varyHeaders
    java.util.List parseChallenges(okhttp3.Headers,java.lang.String) -> parseChallenges
    void receiveHeaders(okhttp3.CookieJar,okhttp3.HttpUrl,okhttp3.Headers) -> receiveHeaders
    boolean hasBody(okhttp3.Response) -> hasBody
    int skipUntil(java.lang.String,int,java.lang.String) -> skipUntil
    int skipWhitespace(java.lang.String,int) -> skipWhitespace
    int parseSeconds(java.lang.String,int) -> parseSeconds
    void <clinit>() -> <clinit>
okhttp3.internal.http.HttpMethod -> okhttp3.internal.http.HttpMethod:
    boolean invalidatesCache(java.lang.String) -> invalidatesCache
    boolean requiresRequestBody(java.lang.String) -> requiresRequestBody
    boolean permitsRequestBody(java.lang.String) -> permitsRequestBody
    boolean redirectsWithBody(java.lang.String) -> redirectsWithBody
    boolean redirectsToGet(java.lang.String) -> redirectsToGet
    void <init>() -> <init>
okhttp3.internal.http.RealInterceptorChain -> okhttp3.internal.http.RealInterceptorChain:
    java.util.List interceptors -> interceptors
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.internal.http.HttpCodec httpCodec -> httpCodec
    okhttp3.internal.connection.RealConnection connection -> connection
    int index -> index
    okhttp3.Request request -> request
    int calls -> calls
    void <init>(java.util.List,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpCodec,okhttp3.internal.connection.RealConnection,int,okhttp3.Request) -> <init>
    okhttp3.Connection connection() -> connection
    okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    okhttp3.internal.http.HttpCodec httpStream() -> httpStream
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
    okhttp3.Response proceed(okhttp3.Request,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpCodec,okhttp3.internal.connection.RealConnection) -> proceed
okhttp3.internal.http.RealResponseBody -> okhttp3.internal.http.RealResponseBody:
    okhttp3.Headers headers -> headers
    okio.BufferedSource source -> source
    void <init>(okhttp3.Headers,okio.BufferedSource) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.internal.http.RequestLine -> okhttp3.internal.http.RequestLine:
    void <init>() -> <init>
    java.lang.String get(okhttp3.Request,java.net.Proxy$Type) -> get
    boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type) -> includeAuthorityInRequestLine
    java.lang.String requestPath(okhttp3.HttpUrl) -> requestPath
okhttp3.internal.http.RetryAndFollowUpInterceptor -> okhttp3.internal.http.RetryAndFollowUpInterceptor:
    int MAX_FOLLOW_UPS -> MAX_FOLLOW_UPS
    okhttp3.OkHttpClient client -> client
    boolean forWebSocket -> forWebSocket
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    java.lang.Object callStackTrace -> callStackTrace
    boolean canceled -> canceled
    void <init>(okhttp3.OkHttpClient,boolean) -> <init>
    void cancel() -> cancel
    boolean isCanceled() -> isCanceled
    void setCallStackTrace(java.lang.Object) -> setCallStackTrace
    okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    okhttp3.Address createAddress(okhttp3.HttpUrl) -> createAddress
    boolean recover(java.io.IOException,boolean,okhttp3.Request) -> recover
    boolean isRecoverable(java.io.IOException,boolean) -> isRecoverable
    okhttp3.Request followUpRequest(okhttp3.Response) -> followUpRequest
    boolean sameConnection(okhttp3.Response,okhttp3.HttpUrl) -> sameConnection
okhttp3.internal.http.StatusLine -> okhttp3.internal.http.StatusLine:
    int HTTP_TEMP_REDIRECT -> HTTP_TEMP_REDIRECT
    int HTTP_PERM_REDIRECT -> HTTP_PERM_REDIRECT
    int HTTP_CONTINUE -> HTTP_CONTINUE
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    void <init>(okhttp3.Protocol,int,java.lang.String) -> <init>
    okhttp3.internal.http.StatusLine get(okhttp3.Response) -> get
    okhttp3.internal.http.StatusLine parse(java.lang.String) -> parse
    java.lang.String toString() -> toString
okhttp3.internal.http.UnrepeatableRequestBody -> okhttp3.internal.http.UnrepeatableRequestBody:
okhttp3.internal.http1.Http1Codec -> okhttp3.internal.http1.Http1Codec:
    int STATE_IDLE -> STATE_IDLE
    int STATE_OPEN_REQUEST_BODY -> STATE_OPEN_REQUEST_BODY
    int STATE_WRITING_REQUEST_BODY -> STATE_WRITING_REQUEST_BODY
    int STATE_READ_RESPONSE_HEADERS -> STATE_READ_RESPONSE_HEADERS
    int STATE_OPEN_RESPONSE_BODY -> STATE_OPEN_RESPONSE_BODY
    int STATE_READING_RESPONSE_BODY -> STATE_READING_RESPONSE_BODY
    int STATE_CLOSED -> STATE_CLOSED
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    int state -> state
    void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okio.BufferedSource,okio.BufferedSink) -> <init>
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void cancel() -> cancel
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    okio.Source getTransferStream(okhttp3.Response) -> getTransferStream
    boolean isClosed() -> isClosed
    void flushRequest() -> flushRequest
    void finishRequest() -> finishRequest
    void writeRequest(okhttp3.Headers,java.lang.String) -> writeRequest
    okhttp3.Response$Builder readResponseHeaders(boolean) -> readResponseHeaders
    okhttp3.Headers readHeaders() -> readHeaders
    okio.Sink newChunkedSink() -> newChunkedSink
    okio.Sink newFixedLengthSink(long) -> newFixedLengthSink
    okio.Source newFixedLengthSource(long) -> newFixedLengthSource
    okio.Source newChunkedSource(okhttp3.HttpUrl) -> newChunkedSource
    okio.Source newUnknownLengthSource() -> newUnknownLengthSource
    void detachTimeout(okio.ForwardingTimeout) -> detachTimeout
okhttp3.internal.http1.Http1Codec$1 -> okhttp3.internal.http1.Http1Codec$1:
okhttp3.internal.http1.Http1Codec$AbstractSource -> okhttp3.internal.http1.Http1Codec$AbstractSource:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    void <init>(okhttp3.internal.http1.Http1Codec) -> <init>
    okio.Timeout timeout() -> timeout
    void endOfInput(boolean) -> endOfInput
    void <init>(okhttp3.internal.http1.Http1Codec,okhttp3.internal.http1.Http1Codec$1) -> <init>
okhttp3.internal.http1.Http1Codec$ChunkedSink -> okhttp3.internal.http1.Http1Codec$ChunkedSink:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    void <init>(okhttp3.internal.http1.Http1Codec) -> <init>
    okio.Timeout timeout() -> timeout
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
okhttp3.internal.http1.Http1Codec$ChunkedSource -> okhttp3.internal.http1.Http1Codec$ChunkedSource:
    long NO_CHUNK_YET -> NO_CHUNK_YET
    okhttp3.HttpUrl url -> url
    long bytesRemainingInChunk -> bytesRemainingInChunk
    boolean hasMoreChunks -> hasMoreChunks
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    void <init>(okhttp3.internal.http1.Http1Codec,okhttp3.HttpUrl) -> <init>
    long read(okio.Buffer,long) -> read
    void readChunkSize() -> readChunkSize
    void close() -> close
okhttp3.internal.http1.Http1Codec$FixedLengthSink -> okhttp3.internal.http1.Http1Codec$FixedLengthSink:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    void <init>(okhttp3.internal.http1.Http1Codec,long) -> <init>
    okio.Timeout timeout() -> timeout
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
okhttp3.internal.http1.Http1Codec$FixedLengthSource -> okhttp3.internal.http1.Http1Codec$FixedLengthSource:
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    void <init>(okhttp3.internal.http1.Http1Codec,long) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
okhttp3.internal.http1.Http1Codec$UnknownLengthSource -> okhttp3.internal.http1.Http1Codec$UnknownLengthSource:
    boolean inputExhausted -> inputExhausted
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    void <init>(okhttp3.internal.http1.Http1Codec) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
okhttp3.internal.http2.ConnectionShutdownException -> okhttp3.internal.http2.ConnectionShutdownException:
    void <init>() -> <init>
okhttp3.internal.http2.ErrorCode -> okhttp3.internal.http2.ErrorCode:
    okhttp3.internal.http2.ErrorCode NO_ERROR -> NO_ERROR
    okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR -> PROTOCOL_ERROR
    okhttp3.internal.http2.ErrorCode INTERNAL_ERROR -> INTERNAL_ERROR
    okhttp3.internal.http2.ErrorCode FLOW_CONTROL_ERROR -> FLOW_CONTROL_ERROR
    okhttp3.internal.http2.ErrorCode REFUSED_STREAM -> REFUSED_STREAM
    okhttp3.internal.http2.ErrorCode CANCEL -> CANCEL
    int httpCode -> httpCode
    okhttp3.internal.http2.ErrorCode[] $VALUES -> $VALUES
    okhttp3.internal.http2.ErrorCode[] values() -> values
    okhttp3.internal.http2.ErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    okhttp3.internal.http2.ErrorCode fromHttp2(int) -> fromHttp2
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Header -> okhttp3.internal.http2.Header:
    okio.ByteString PSEUDO_PREFIX -> PSEUDO_PREFIX
    okio.ByteString RESPONSE_STATUS -> RESPONSE_STATUS
    okio.ByteString TARGET_METHOD -> TARGET_METHOD
    okio.ByteString TARGET_PATH -> TARGET_PATH
    okio.ByteString TARGET_SCHEME -> TARGET_SCHEME
    okio.ByteString TARGET_AUTHORITY -> TARGET_AUTHORITY
    okio.ByteString name -> name
    okio.ByteString value -> value
    int hpackSize -> hpackSize
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(okio.ByteString,java.lang.String) -> <init>
    void <init>(okio.ByteString,okio.ByteString) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Hpack -> okhttp3.internal.http2.Hpack:
    int PREFIX_4_BITS -> PREFIX_4_BITS
    int PREFIX_5_BITS -> PREFIX_5_BITS
    int PREFIX_6_BITS -> PREFIX_6_BITS
    int PREFIX_7_BITS -> PREFIX_7_BITS
    okhttp3.internal.http2.Header[] STATIC_HEADER_TABLE -> STATIC_HEADER_TABLE
    java.util.Map NAME_TO_FIRST_INDEX -> NAME_TO_FIRST_INDEX
    void <init>() -> <init>
    java.util.Map nameToFirstIndex() -> nameToFirstIndex
    okio.ByteString checkLowercase(okio.ByteString) -> checkLowercase
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Hpack$Reader -> okhttp3.internal.http2.Hpack$Reader:
    java.util.List headerList -> headerList
    okio.BufferedSource source -> source
    int headerTableSizeSetting -> headerTableSizeSetting
    int maxDynamicTableByteCount -> maxDynamicTableByteCount
    okhttp3.internal.http2.Header[] dynamicTable -> dynamicTable
    int nextHeaderIndex -> nextHeaderIndex
    int headerCount -> headerCount
    int dynamicTableByteCount -> dynamicTableByteCount
    void <init>(int,okio.Source) -> <init>
    void <init>(int,int,okio.Source) -> <init>
    int maxDynamicTableByteCount() -> maxDynamicTableByteCount
    void adjustDynamicTableByteCount() -> adjustDynamicTableByteCount
    void clearDynamicTable() -> clearDynamicTable
    int evictToRecoverBytes(int) -> evictToRecoverBytes
    void readHeaders() -> readHeaders
    java.util.List getAndResetHeaderList() -> getAndResetHeaderList
    void readIndexedHeader(int) -> readIndexedHeader
    int dynamicTableIndex(int) -> dynamicTableIndex
    void readLiteralHeaderWithoutIndexingIndexedName(int) -> readLiteralHeaderWithoutIndexingIndexedName
    void readLiteralHeaderWithoutIndexingNewName() -> readLiteralHeaderWithoutIndexingNewName
    void readLiteralHeaderWithIncrementalIndexingIndexedName(int) -> readLiteralHeaderWithIncrementalIndexingIndexedName
    void readLiteralHeaderWithIncrementalIndexingNewName() -> readLiteralHeaderWithIncrementalIndexingNewName
    okio.ByteString getName(int) -> getName
    boolean isStaticHeader(int) -> isStaticHeader
    void insertIntoDynamicTable(int,okhttp3.internal.http2.Header) -> insertIntoDynamicTable
    int readByte() -> readByte
    int readInt(int,int) -> readInt
    okio.ByteString readByteString() -> readByteString
okhttp3.internal.http2.Hpack$Writer -> okhttp3.internal.http2.Hpack$Writer:
    int SETTINGS_HEADER_TABLE_SIZE -> SETTINGS_HEADER_TABLE_SIZE
    int SETTINGS_HEADER_TABLE_SIZE_LIMIT -> SETTINGS_HEADER_TABLE_SIZE_LIMIT
    okio.Buffer out -> out
    boolean useCompression -> useCompression
    int smallestHeaderTableSizeSetting -> smallestHeaderTableSizeSetting
    boolean emitDynamicTableSizeUpdate -> emitDynamicTableSizeUpdate
    int headerTableSizeSetting -> headerTableSizeSetting
    int maxDynamicTableByteCount -> maxDynamicTableByteCount
    okhttp3.internal.http2.Header[] dynamicTable -> dynamicTable
    int nextHeaderIndex -> nextHeaderIndex
    int headerCount -> headerCount
    int dynamicTableByteCount -> dynamicTableByteCount
    void <init>(okio.Buffer) -> <init>
    void <init>(int,boolean,okio.Buffer) -> <init>
    void clearDynamicTable() -> clearDynamicTable
    int evictToRecoverBytes(int) -> evictToRecoverBytes
    void insertIntoDynamicTable(okhttp3.internal.http2.Header) -> insertIntoDynamicTable
    void writeHeaders(java.util.List) -> writeHeaders
    void writeInt(int,int,int) -> writeInt
    void writeByteString(okio.ByteString) -> writeByteString
    void setHeaderTableSizeSetting(int) -> setHeaderTableSizeSetting
    void adjustDynamicTableByteCount() -> adjustDynamicTableByteCount
okhttp3.internal.http2.Http2 -> okhttp3.internal.http2.Http2:
    okio.ByteString CONNECTION_PREFACE -> CONNECTION_PREFACE
    int INITIAL_MAX_FRAME_SIZE -> INITIAL_MAX_FRAME_SIZE
    byte TYPE_DATA -> TYPE_DATA
    byte TYPE_HEADERS -> TYPE_HEADERS
    byte TYPE_PRIORITY -> TYPE_PRIORITY
    byte TYPE_RST_STREAM -> TYPE_RST_STREAM
    byte TYPE_SETTINGS -> TYPE_SETTINGS
    byte TYPE_PUSH_PROMISE -> TYPE_PUSH_PROMISE
    byte TYPE_PING -> TYPE_PING
    byte TYPE_GOAWAY -> TYPE_GOAWAY
    byte TYPE_WINDOW_UPDATE -> TYPE_WINDOW_UPDATE
    byte TYPE_CONTINUATION -> TYPE_CONTINUATION
    byte FLAG_NONE -> FLAG_NONE
    byte FLAG_ACK -> FLAG_ACK
    byte FLAG_END_STREAM -> FLAG_END_STREAM
    byte FLAG_END_HEADERS -> FLAG_END_HEADERS
    byte FLAG_END_PUSH_PROMISE -> FLAG_END_PUSH_PROMISE
    byte FLAG_PADDED -> FLAG_PADDED
    byte FLAG_PRIORITY -> FLAG_PRIORITY
    byte FLAG_COMPRESSED -> FLAG_COMPRESSED
    java.lang.String[] FRAME_NAMES -> FRAME_NAMES
    java.lang.String[] FLAGS -> FLAGS
    java.lang.String[] BINARY -> BINARY
    void <init>() -> <init>
    java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[]) -> illegalArgument
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> ioException
    java.lang.String frameLog(boolean,int,int,byte,byte) -> frameLog
    java.lang.String formatFlags(byte,byte) -> formatFlags
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Codec -> okhttp3.internal.http2.Http2Codec:
    okio.ByteString CONNECTION -> CONNECTION
    okio.ByteString HOST -> HOST
    okio.ByteString KEEP_ALIVE -> KEEP_ALIVE
    okio.ByteString PROXY_CONNECTION -> PROXY_CONNECTION
    okio.ByteString TRANSFER_ENCODING -> TRANSFER_ENCODING
    okio.ByteString TE -> TE
    okio.ByteString ENCODING -> ENCODING
    okio.ByteString UPGRADE -> UPGRADE
    java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS -> HTTP_2_SKIPPED_REQUEST_HEADERS
    java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS -> HTTP_2_SKIPPED_RESPONSE_HEADERS
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.internal.http2.Http2Connection connection -> connection
    okhttp3.internal.http2.Http2Stream stream -> stream
    void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http2.Http2Connection) -> <init>
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    void flushRequest() -> flushRequest
    void finishRequest() -> finishRequest
    okhttp3.Response$Builder readResponseHeaders(boolean) -> readResponseHeaders
    java.util.List http2HeadersList(okhttp3.Request) -> http2HeadersList
    okhttp3.Response$Builder readHttp2HeadersList(java.util.List) -> readHttp2HeadersList
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    void cancel() -> cancel
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Codec$StreamFinishingSource -> okhttp3.internal.http2.Http2Codec$StreamFinishingSource:
    okhttp3.internal.http2.Http2Codec this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Codec,okio.Source) -> <init>
    void close() -> close
okhttp3.internal.http2.Http2Connection -> okhttp3.internal.http2.Http2Connection:
    java.util.concurrent.ExecutorService executor -> executor
    boolean client -> client
    okhttp3.internal.http2.Http2Connection$Listener listener -> listener
    java.util.Map streams -> streams
    java.lang.String hostname -> hostname
    int lastGoodStreamId -> lastGoodStreamId
    int nextStreamId -> nextStreamId
    boolean shutdown -> shutdown
    java.util.concurrent.ExecutorService pushExecutor -> pushExecutor
    java.util.Map pings -> pings
    okhttp3.internal.http2.PushObserver pushObserver -> pushObserver
    int nextPingId -> nextPingId
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    okhttp3.internal.http2.Settings okHttpSettings -> okHttpSettings
    int OKHTTP_CLIENT_WINDOW_SIZE -> OKHTTP_CLIENT_WINDOW_SIZE
    okhttp3.internal.http2.Settings peerSettings -> peerSettings
    boolean receivedInitialPeerSettings -> receivedInitialPeerSettings
    java.net.Socket socket -> socket
    okhttp3.internal.http2.Http2Writer writer -> writer
    okhttp3.internal.http2.Http2Connection$ReaderRunnable readerRunnable -> readerRunnable
    java.util.Set currentPushRequests -> currentPushRequests
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.internal.http2.Http2Connection$Builder) -> <init>
    okhttp3.Protocol getProtocol() -> getProtocol
    int openStreamCount() -> openStreamCount
    okhttp3.internal.http2.Http2Stream getStream(int) -> getStream
    okhttp3.internal.http2.Http2Stream removeStream(int) -> removeStream
    int maxConcurrentStreams() -> maxConcurrentStreams
    okhttp3.internal.http2.Http2Stream pushStream(int,java.util.List,boolean) -> pushStream
    okhttp3.internal.http2.Http2Stream newStream(java.util.List,boolean) -> newStream
    okhttp3.internal.http2.Http2Stream newStream(int,java.util.List,boolean) -> newStream
    void writeSynReply(int,boolean,java.util.List) -> writeSynReply
    void writeData(int,boolean,okio.Buffer,long) -> writeData
    void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    void writeSynResetLater(int,okhttp3.internal.http2.ErrorCode) -> writeSynResetLater
    void writeSynReset(int,okhttp3.internal.http2.ErrorCode) -> writeSynReset
    void writeWindowUpdateLater(int,long) -> writeWindowUpdateLater
    okhttp3.internal.http2.Ping ping() -> ping
    void writePingLater(boolean,int,int,okhttp3.internal.http2.Ping) -> writePingLater
    void writePing(boolean,int,int,okhttp3.internal.http2.Ping) -> writePing
    okhttp3.internal.http2.Ping removePing(int) -> removePing
    void flush() -> flush
    void shutdown(okhttp3.internal.http2.ErrorCode) -> shutdown
    void close() -> close
    void close(okhttp3.internal.http2.ErrorCode,okhttp3.internal.http2.ErrorCode) -> close
    void start() -> start
    void start(boolean) -> start
    void setSettings(okhttp3.internal.http2.Settings) -> setSettings
    boolean isShutdown() -> isShutdown
    boolean pushedStream(int) -> pushedStream
    void pushRequestLater(int,java.util.List) -> pushRequestLater
    void pushHeadersLater(int,java.util.List,boolean) -> pushHeadersLater
    void pushDataLater(int,okio.BufferedSource,int,boolean) -> pushDataLater
    void pushResetLater(int,okhttp3.internal.http2.ErrorCode) -> pushResetLater
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Connection$1 -> okhttp3.internal.http2.Http2Connection$1:
    int val$streamId -> val$streamId
    okhttp3.internal.http2.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,okhttp3.internal.http2.ErrorCode) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$2 -> okhttp3.internal.http2.Http2Connection$2:
    int val$streamId -> val$streamId
    long val$unacknowledgedBytesRead -> val$unacknowledgedBytesRead
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,long) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$3 -> okhttp3.internal.http2.Http2Connection$3:
    boolean val$reply -> val$reply
    int val$payload1 -> val$payload1
    int val$payload2 -> val$payload2
    okhttp3.internal.http2.Ping val$ping -> val$ping
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],boolean,int,int,okhttp3.internal.http2.Ping) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$4 -> okhttp3.internal.http2.Http2Connection$4:
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,java.util.List) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$5 -> okhttp3.internal.http2.Http2Connection$5:
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,java.util.List,boolean) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$6 -> okhttp3.internal.http2.Http2Connection$6:
    int val$streamId -> val$streamId
    okio.Buffer val$buffer -> val$buffer
    int val$byteCount -> val$byteCount
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,okio.Buffer,int,boolean) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$7 -> okhttp3.internal.http2.Http2Connection$7:
    int val$streamId -> val$streamId
    okhttp3.internal.http2.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,okhttp3.internal.http2.ErrorCode) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$Builder -> okhttp3.internal.http2.Http2Connection$Builder:
    java.net.Socket socket -> socket
    java.lang.String hostname -> hostname
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    okhttp3.internal.http2.Http2Connection$Listener listener -> listener
    okhttp3.internal.http2.PushObserver pushObserver -> pushObserver
    boolean client -> client
    void <init>(boolean) -> <init>
    okhttp3.internal.http2.Http2Connection$Builder socket(java.net.Socket) -> socket
    okhttp3.internal.http2.Http2Connection$Builder socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink) -> socket
    okhttp3.internal.http2.Http2Connection$Builder listener(okhttp3.internal.http2.Http2Connection$Listener) -> listener
    okhttp3.internal.http2.Http2Connection$Builder pushObserver(okhttp3.internal.http2.PushObserver) -> pushObserver
    okhttp3.internal.http2.Http2Connection build() -> build
okhttp3.internal.http2.Http2Connection$Listener -> okhttp3.internal.http2.Http2Connection$Listener:
    okhttp3.internal.http2.Http2Connection$Listener REFUSE_INCOMING_STREAMS -> REFUSE_INCOMING_STREAMS
    void <init>() -> <init>
    void onStream(okhttp3.internal.http2.Http2Stream) -> onStream
    void onSettings(okhttp3.internal.http2.Http2Connection) -> onSettings
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Connection$Listener$1 -> okhttp3.internal.http2.Http2Connection$Listener$1:
    void <init>() -> <init>
    void onStream(okhttp3.internal.http2.Http2Stream) -> onStream
okhttp3.internal.http2.Http2Connection$ReaderRunnable -> okhttp3.internal.http2.Http2Connection$ReaderRunnable:
    okhttp3.internal.http2.Http2Reader reader -> reader
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Connection,okhttp3.internal.http2.Http2Reader) -> <init>
    void execute() -> execute
    void data(boolean,int,okio.BufferedSource,int) -> data
    void headers(boolean,int,int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.http2.ErrorCode) -> rstStream
    void settings(boolean,okhttp3.internal.http2.Settings) -> settings
    void applyAndAckSettings(okhttp3.internal.http2.Settings) -> applyAndAckSettings
    void ackSettings() -> ackSettings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.http2.ErrorCode,okio.ByteString) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void priority(int,int,int,boolean) -> priority
    void pushPromise(int,int,java.util.List) -> pushPromise
    void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
okhttp3.internal.http2.Http2Connection$ReaderRunnable$1 -> okhttp3.internal.http2.Http2Connection$ReaderRunnable$1:
    okhttp3.internal.http2.Http2Stream val$newStream -> val$newStream
    okhttp3.internal.http2.Http2Connection$ReaderRunnable this$1 -> this$1
    void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[],okhttp3.internal.http2.Http2Stream) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$ReaderRunnable$2 -> okhttp3.internal.http2.Http2Connection$ReaderRunnable$2:
    okhttp3.internal.http2.Http2Connection$ReaderRunnable this$1 -> this$1
    void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[]) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Connection$ReaderRunnable$3 -> okhttp3.internal.http2.Http2Connection$ReaderRunnable$3:
    okhttp3.internal.http2.Settings val$peerSettings -> val$peerSettings
    okhttp3.internal.http2.Http2Connection$ReaderRunnable this$1 -> this$1
    void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[],okhttp3.internal.http2.Settings) -> <init>
    void execute() -> execute
okhttp3.internal.http2.Http2Reader -> okhttp3.internal.http2.Http2Reader:
    java.util.logging.Logger logger -> logger
    okio.BufferedSource source -> source
    okhttp3.internal.http2.Http2Reader$ContinuationSource continuation -> continuation
    boolean client -> client
    okhttp3.internal.http2.Hpack$Reader hpackReader -> hpackReader
    void <init>(okio.BufferedSource,boolean) -> <init>
    void readConnectionPreface(okhttp3.internal.http2.Http2Reader$Handler) -> readConnectionPreface
    boolean nextFrame(boolean,okhttp3.internal.http2.Http2Reader$Handler) -> nextFrame
    void readHeaders(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readHeaders
    java.util.List readHeaderBlock(int,short,byte,int) -> readHeaderBlock
    void readData(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readData
    void readPriority(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readPriority
    void readPriority(okhttp3.internal.http2.Http2Reader$Handler,int) -> readPriority
    void readRstStream(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readRstStream
    void readSettings(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readSettings
    void readPushPromise(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readPushPromise
    void readPing(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readPing
    void readGoAway(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readGoAway
    void readWindowUpdate(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readWindowUpdate
    void close() -> close
    int readMedium(okio.BufferedSource) -> readMedium
    int lengthWithoutPadding(int,byte,short) -> lengthWithoutPadding
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Reader$ContinuationSource -> okhttp3.internal.http2.Http2Reader$ContinuationSource:
    okio.BufferedSource source -> source
    int length -> length
    byte flags -> flags
    int streamId -> streamId
    int left -> left
    short padding -> padding
    void <init>(okio.BufferedSource) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
    void readContinuationHeader() -> readContinuationHeader
okhttp3.internal.http2.Http2Reader$Handler -> okhttp3.internal.http2.Http2Reader$Handler:
    void data(boolean,int,okio.BufferedSource,int) -> data
    void headers(boolean,int,int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.http2.ErrorCode) -> rstStream
    void settings(boolean,okhttp3.internal.http2.Settings) -> settings
    void ackSettings() -> ackSettings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.http2.ErrorCode,okio.ByteString) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void priority(int,int,int,boolean) -> priority
    void pushPromise(int,int,java.util.List) -> pushPromise
    void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
okhttp3.internal.http2.Http2Stream -> okhttp3.internal.http2.Http2Stream:
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    int id -> id
    okhttp3.internal.http2.Http2Connection connection -> connection
    java.util.List requestHeaders -> requestHeaders
    java.util.List responseHeaders -> responseHeaders
    boolean hasResponseHeaders -> hasResponseHeaders
    okhttp3.internal.http2.Http2Stream$FramingSource source -> source
    okhttp3.internal.http2.Http2Stream$FramingSink sink -> sink
    okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout -> readTimeout
    okhttp3.internal.http2.Http2Stream$StreamTimeout writeTimeout -> writeTimeout
    okhttp3.internal.http2.ErrorCode errorCode -> errorCode
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(int,okhttp3.internal.http2.Http2Connection,boolean,boolean,java.util.List) -> <init>
    int getId() -> getId
    boolean isOpen() -> isOpen
    boolean isLocallyInitiated() -> isLocallyInitiated
    okhttp3.internal.http2.Http2Connection getConnection() -> getConnection
    java.util.List getRequestHeaders() -> getRequestHeaders
    java.util.List takeResponseHeaders() -> takeResponseHeaders
    okhttp3.internal.http2.ErrorCode getErrorCode() -> getErrorCode
    void sendResponseHeaders(java.util.List,boolean) -> sendResponseHeaders
    okio.Timeout readTimeout() -> readTimeout
    okio.Timeout writeTimeout() -> writeTimeout
    okio.Source getSource() -> getSource
    okio.Sink getSink() -> getSink
    void close(okhttp3.internal.http2.ErrorCode) -> close
    void closeLater(okhttp3.internal.http2.ErrorCode) -> closeLater
    boolean closeInternal(okhttp3.internal.http2.ErrorCode) -> closeInternal
    void receiveHeaders(java.util.List) -> receiveHeaders
    void receiveData(okio.BufferedSource,int) -> receiveData
    void receiveFin() -> receiveFin
    void receiveRstStream(okhttp3.internal.http2.ErrorCode) -> receiveRstStream
    void cancelStreamIfNecessary() -> cancelStreamIfNecessary
    void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    void checkOutNotClosed() -> checkOutNotClosed
    void waitForIo() -> waitForIo
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Stream$FramingSink -> okhttp3.internal.http2.Http2Stream$FramingSink:
    long EMIT_BUFFER_SIZE -> EMIT_BUFFER_SIZE
    okio.Buffer sendBuffer -> sendBuffer
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.http2.Http2Stream this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Stream) -> <init>
    void write(okio.Buffer,long) -> write
    void emitFrame(boolean) -> emitFrame
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Stream$FramingSource -> okhttp3.internal.http2.Http2Stream$FramingSource:
    okio.Buffer receiveBuffer -> receiveBuffer
    okio.Buffer readBuffer -> readBuffer
    long maxByteCount -> maxByteCount
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.http2.Http2Stream this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Stream,long) -> <init>
    long read(okio.Buffer,long) -> read
    void waitUntilReadable() -> waitUntilReadable
    void receive(okio.BufferedSource,long) -> receive
    okio.Timeout timeout() -> timeout
    void close() -> close
    void checkNotClosed() -> checkNotClosed
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Stream$StreamTimeout -> okhttp3.internal.http2.Http2Stream$StreamTimeout:
    okhttp3.internal.http2.Http2Stream this$0 -> this$0
    void <init>(okhttp3.internal.http2.Http2Stream) -> <init>
    void timedOut() -> timedOut
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    void exitAndThrowIfTimedOut() -> exitAndThrowIfTimedOut
okhttp3.internal.http2.Http2Writer -> okhttp3.internal.http2.Http2Writer:
    java.util.logging.Logger logger -> logger
    okio.BufferedSink sink -> sink
    boolean client -> client
    okio.Buffer hpackBuffer -> hpackBuffer
    int maxFrameSize -> maxFrameSize
    boolean closed -> closed
    okhttp3.internal.http2.Hpack$Writer hpackWriter -> hpackWriter
    void <init>(okio.BufferedSink,boolean) -> <init>
    void connectionPreface() -> connectionPreface
    void applyAndAckSettings(okhttp3.internal.http2.Settings) -> applyAndAckSettings
    void pushPromise(int,int,java.util.List) -> pushPromise
    void flush() -> flush
    void synStream(boolean,int,int,java.util.List) -> synStream
    void synReply(boolean,int,java.util.List) -> synReply
    void headers(int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.http2.ErrorCode) -> rstStream
    int maxDataLength() -> maxDataLength
    void data(boolean,int,okio.Buffer,int) -> data
    void dataFrame(int,byte,okio.Buffer,int) -> dataFrame
    void settings(okhttp3.internal.http2.Settings) -> settings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.http2.ErrorCode,byte[]) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void frameHeader(int,int,byte,byte) -> frameHeader
    void close() -> close
    void writeMedium(okio.BufferedSink,int) -> writeMedium
    void writeContinuationFrames(int,long) -> writeContinuationFrames
    void headers(boolean,int,java.util.List) -> headers
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Huffman -> okhttp3.internal.http2.Huffman:
    int[] CODES -> CODES
    byte[] CODE_LENGTHS -> CODE_LENGTHS
    okhttp3.internal.http2.Huffman INSTANCE -> INSTANCE
    okhttp3.internal.http2.Huffman$Node root -> root
    okhttp3.internal.http2.Huffman get() -> get
    void <init>() -> <init>
    void encode(okio.ByteString,okio.BufferedSink) -> encode
    int encodedLength(okio.ByteString) -> encodedLength
    byte[] decode(byte[]) -> decode
    void buildTree() -> buildTree
    void addCode(int,int,byte) -> addCode
    void <clinit>() -> <clinit>
okhttp3.internal.http2.Huffman$Node -> okhttp3.internal.http2.Huffman$Node:
    okhttp3.internal.http2.Huffman$Node[] children -> children
    int symbol -> symbol
    int terminalBits -> terminalBits
    void <init>() -> <init>
    void <init>(int,int) -> <init>
okhttp3.internal.http2.Ping -> okhttp3.internal.http2.Ping:
    java.util.concurrent.CountDownLatch latch -> latch
    long sent -> sent
    long received -> received
    void <init>() -> <init>
    void send() -> send
    void receive() -> receive
    void cancel() -> cancel
    long roundTripTime() -> roundTripTime
    long roundTripTime(long,java.util.concurrent.TimeUnit) -> roundTripTime
okhttp3.internal.http2.PushObserver -> okhttp3.internal.http2.PushObserver:
    okhttp3.internal.http2.PushObserver CANCEL -> CANCEL
    boolean onRequest(int,java.util.List) -> onRequest
    boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    void onReset(int,okhttp3.internal.http2.ErrorCode) -> onReset
    void <clinit>() -> <clinit>
okhttp3.internal.http2.PushObserver$1 -> okhttp3.internal.http2.PushObserver$1:
    void <init>() -> <init>
    boolean onRequest(int,java.util.List) -> onRequest
    boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    void onReset(int,okhttp3.internal.http2.ErrorCode) -> onReset
okhttp3.internal.http2.Settings -> okhttp3.internal.http2.Settings:
    int DEFAULT_INITIAL_WINDOW_SIZE -> DEFAULT_INITIAL_WINDOW_SIZE
    int HEADER_TABLE_SIZE -> HEADER_TABLE_SIZE
    int ENABLE_PUSH -> ENABLE_PUSH
    int MAX_CONCURRENT_STREAMS -> MAX_CONCURRENT_STREAMS
    int MAX_FRAME_SIZE -> MAX_FRAME_SIZE
    int MAX_HEADER_LIST_SIZE -> MAX_HEADER_LIST_SIZE
    int INITIAL_WINDOW_SIZE -> INITIAL_WINDOW_SIZE
    int COUNT -> COUNT
    int set -> set
    int[] values -> values
    void <init>() -> <init>
    void clear() -> clear
    okhttp3.internal.http2.Settings set(int,int) -> set
    boolean isSet(int) -> isSet
    int get(int) -> get
    int size() -> size
    int getHeaderTableSize() -> getHeaderTableSize
    boolean getEnablePush(boolean) -> getEnablePush
    int getMaxConcurrentStreams(int) -> getMaxConcurrentStreams
    int getMaxFrameSize(int) -> getMaxFrameSize
    int getMaxHeaderListSize(int) -> getMaxHeaderListSize
    int getInitialWindowSize() -> getInitialWindowSize
    void merge(okhttp3.internal.http2.Settings) -> merge
okhttp3.internal.http2.StreamResetException -> okhttp3.internal.http2.StreamResetException:
    okhttp3.internal.http2.ErrorCode errorCode -> errorCode
    void <init>(okhttp3.internal.http2.ErrorCode) -> <init>
okhttp3.internal.io.FileSystem -> okhttp3.internal.io.FileSystem:
    okhttp3.internal.io.FileSystem SYSTEM -> SYSTEM
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    void delete(java.io.File) -> delete
    boolean exists(java.io.File) -> exists
    long size(java.io.File) -> size
    void rename(java.io.File,java.io.File) -> rename
    void deleteContents(java.io.File) -> deleteContents
    void <clinit>() -> <clinit>
okhttp3.internal.io.FileSystem$1 -> okhttp3.internal.io.FileSystem$1:
    void <init>() -> <init>
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    void delete(java.io.File) -> delete
    boolean exists(java.io.File) -> exists
    long size(java.io.File) -> size
    void rename(java.io.File,java.io.File) -> rename
    void deleteContents(java.io.File) -> deleteContents
okhttp3.internal.platform.AndroidPlatform -> okhttp3.internal.platform.AndroidPlatform:
    int MAX_LOG_LENGTH -> MAX_LOG_LENGTH
    java.lang.Class sslParametersClass -> sslParametersClass
    okhttp3.internal.platform.OptionalMethod setUseSessionTickets -> setUseSessionTickets
    okhttp3.internal.platform.OptionalMethod setHostname -> setHostname
    okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol -> getAlpnSelectedProtocol
    okhttp3.internal.platform.OptionalMethod setAlpnProtocols -> setAlpnProtocols
    okhttp3.internal.platform.AndroidPlatform$CloseGuard closeGuard -> closeGuard
    void <init>(java.lang.Class,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod) -> <init>
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    void log(int,java.lang.String,java.lang.Throwable) -> log
    java.lang.Object getStackTraceForCloseable(java.lang.String) -> getStackTraceForCloseable
    void logCloseableLeak(java.lang.String,java.lang.Object) -> logCloseableLeak
    boolean isCleartextTrafficPermitted(java.lang.String) -> isCleartextTrafficPermitted
    okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager) -> buildCertificateChainCleaner
    okhttp3.internal.platform.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner -> okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner:
    java.lang.Object x509TrustManagerExtensions -> x509TrustManagerExtensions
    java.lang.reflect.Method checkServerTrusted -> checkServerTrusted
    void <init>(java.lang.Object,java.lang.reflect.Method) -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.internal.platform.AndroidPlatform$CloseGuard -> okhttp3.internal.platform.AndroidPlatform$CloseGuard:
    java.lang.reflect.Method getMethod -> getMethod
    java.lang.reflect.Method openMethod -> openMethod
    java.lang.reflect.Method warnIfOpenMethod -> warnIfOpenMethod
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
    java.lang.Object createAndOpen(java.lang.String) -> createAndOpen
    boolean warnIfOpen(java.lang.Object) -> warnIfOpen
    okhttp3.internal.platform.AndroidPlatform$CloseGuard get() -> get
okhttp3.internal.platform.Jdk9Platform -> okhttp3.internal.platform.Jdk9Platform:
    java.lang.reflect.Method setProtocolMethod -> setProtocolMethod
    java.lang.reflect.Method getProtocolMethod -> getProtocolMethod
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    okhttp3.internal.platform.Jdk9Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.JdkWithJettyBootPlatform -> okhttp3.internal.platform.JdkWithJettyBootPlatform:
    java.lang.reflect.Method putMethod -> putMethod
    java.lang.reflect.Method getMethod -> getMethod
    java.lang.reflect.Method removeMethod -> removeMethod
    java.lang.Class clientProviderClass -> clientProviderClass
    java.lang.Class serverProviderClass -> serverProviderClass
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class) -> <init>
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    okhttp3.internal.platform.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider -> okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider:
    java.util.List protocols -> protocols
    boolean unsupported -> unsupported
    java.lang.String selected -> selected
    void <init>(java.util.List) -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
okhttp3.internal.platform.OptionalMethod -> okhttp3.internal.platform.OptionalMethod:
    java.lang.Class returnType -> returnType
    java.lang.String methodName -> methodName
    java.lang.Class[] methodParams -> methodParams
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    boolean isSupported(java.lang.Object) -> isSupported
    java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[]) -> invokeOptional
    java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeOptionalWithoutCheckedException
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeWithoutCheckedException
    java.lang.reflect.Method getMethod(java.lang.Class) -> getMethod
    java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getPublicMethod
okhttp3.internal.platform.Platform -> okhttp3.internal.platform.Platform:
    okhttp3.internal.platform.Platform PLATFORM -> PLATFORM
    int INFO -> INFO
    int WARN -> WARN
    java.util.logging.Logger logger -> logger
    void <init>() -> <init>
    okhttp3.internal.platform.Platform get() -> get
    java.lang.String getPrefix() -> getPrefix
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    void log(int,java.lang.String,java.lang.Throwable) -> log
    boolean isCleartextTrafficPermitted(java.lang.String) -> isCleartextTrafficPermitted
    java.lang.Object getStackTraceForCloseable(java.lang.String) -> getStackTraceForCloseable
    void logCloseableLeak(java.lang.String,java.lang.Object) -> logCloseableLeak
    java.util.List alpnProtocolNames(java.util.List) -> alpnProtocolNames
    okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager) -> buildCertificateChainCleaner
    okhttp3.internal.platform.Platform findPlatform() -> findPlatform
    byte[] concatLengthPrefixed(java.util.List) -> concatLengthPrefixed
    java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String) -> readFieldOrNull
    void <clinit>() -> <clinit>
okhttp3.internal.publicsuffix.PublicSuffixDatabase -> okhttp3.internal.publicsuffix.PublicSuffixDatabase:
    java.lang.String PUBLIC_SUFFIX_RESOURCE -> PUBLIC_SUFFIX_RESOURCE
    byte[] WILDCARD_LABEL -> WILDCARD_LABEL
    java.lang.String[] EMPTY_RULE -> EMPTY_RULE
    java.lang.String[] PREVAILING_RULE -> PREVAILING_RULE
    byte EXCEPTION_MARKER -> EXCEPTION_MARKER
    okhttp3.internal.publicsuffix.PublicSuffixDatabase instance -> instance
    java.util.concurrent.atomic.AtomicBoolean listRead -> listRead
    java.util.concurrent.CountDownLatch readCompleteLatch -> readCompleteLatch
    byte[] publicSuffixListBytes -> publicSuffixListBytes
    byte[] publicSuffixExceptionListBytes -> publicSuffixExceptionListBytes
    void <init>() -> <init>
    okhttp3.internal.publicsuffix.PublicSuffixDatabase get() -> get
    java.lang.String getEffectiveTldPlusOne(java.lang.String) -> getEffectiveTldPlusOne
    java.lang.String[] findMatchingRule(java.lang.String[]) -> findMatchingRule
    java.lang.String binarySearchBytes(byte[],byte[][],int) -> binarySearchBytes
    void readTheList() -> readTheList
    void setListBytes(byte[],byte[]) -> setListBytes
    void <clinit>() -> <clinit>
okhttp3.internal.tls.BasicCertificateChainCleaner -> okhttp3.internal.tls.BasicCertificateChainCleaner:
    int MAX_SIGNERS -> MAX_SIGNERS
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> trustRootIndex
    void <init>(okhttp3.internal.tls.TrustRootIndex) -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate) -> verifySignature
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
okhttp3.internal.tls.CertificateChainCleaner -> okhttp3.internal.tls.CertificateChainCleaner:
    void <init>() -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager) -> get
    okhttp3.internal.tls.CertificateChainCleaner get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.DistinguishedNameParser -> okhttp3.internal.tls.DistinguishedNameParser:
    java.lang.String dn -> dn
    int length -> length
    int pos -> pos
    int beg -> beg
    int end -> end
    int cur -> cur
    char[] chars -> chars
    void <init>(javax.security.auth.x500.X500Principal) -> <init>
    java.lang.String nextAT() -> nextAT
    java.lang.String quotedAV() -> quotedAV
    java.lang.String hexAV() -> hexAV
    java.lang.String escapedAV() -> escapedAV
    char getEscaped() -> getEscaped
    char getUTF8() -> getUTF8
    int getByte(int) -> getByte
    java.lang.String findMostSpecific(java.lang.String) -> findMostSpecific
okhttp3.internal.tls.OkHostnameVerifier -> okhttp3.internal.tls.OkHostnameVerifier:
    okhttp3.internal.tls.OkHostnameVerifier INSTANCE -> INSTANCE
    int ALT_DNS_NAME -> ALT_DNS_NAME
    int ALT_IPA_NAME -> ALT_IPA_NAME
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    boolean verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate) -> verifyIpAddress
    boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate) -> verifyHostname
    java.util.List allSubjectAltNames(java.security.cert.X509Certificate) -> allSubjectAltNames
    java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int) -> getSubjectAltNames
    boolean verifyHostname(java.lang.String,java.lang.String) -> verifyHostname
    void <clinit>() -> <clinit>
okhttp3.internal.tls.TrustRootIndex -> okhttp3.internal.tls.TrustRootIndex:
    void <init>() -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager) -> get
    okhttp3.internal.tls.TrustRootIndex get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex:
    javax.net.ssl.X509TrustManager trustManager -> trustManager
    java.lang.reflect.Method findByIssuerAndSignatureMethod -> findByIssuerAndSignatureMethod
    void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method) -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex:
    java.util.Map subjectToCaCerts -> subjectToCaCerts
    void <init>(java.security.cert.X509Certificate[]) -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.internal.ws.RealWebSocket -> okhttp3.internal.ws.RealWebSocket:
    java.util.List ONLY_HTTP1 -> ONLY_HTTP1
    long MAX_QUEUE_SIZE -> MAX_QUEUE_SIZE
    long CANCEL_AFTER_CLOSE_MILLIS -> CANCEL_AFTER_CLOSE_MILLIS
    okhttp3.Request originalRequest -> originalRequest
    okhttp3.WebSocketListener listener -> listener
    java.util.Random random -> random
    java.lang.String key -> key
    okhttp3.Call call -> call
    java.lang.Runnable writerRunnable -> writerRunnable
    okhttp3.internal.ws.WebSocketReader reader -> reader
    okhttp3.internal.ws.WebSocketWriter writer -> writer
    java.util.concurrent.ScheduledExecutorService executor -> executor
    okhttp3.internal.ws.RealWebSocket$Streams streams -> streams
    java.util.ArrayDeque pongQueue -> pongQueue
    java.util.ArrayDeque messageAndCloseQueue -> messageAndCloseQueue
    long queueSize -> queueSize
    boolean enqueuedClose -> enqueuedClose
    java.util.concurrent.ScheduledFuture cancelFuture -> cancelFuture
    int receivedCloseCode -> receivedCloseCode
    java.lang.String receivedCloseReason -> receivedCloseReason
    boolean failed -> failed
    int pingCount -> pingCount
    int pongCount -> pongCount
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.Request,okhttp3.WebSocketListener,java.util.Random) -> <init>
    okhttp3.Request request() -> request
    long queueSize() -> queueSize
    void cancel() -> cancel
    void connect(okhttp3.OkHttpClient) -> connect
    void checkResponse(okhttp3.Response) -> checkResponse
    void initReaderAndWriter(java.lang.String,long,okhttp3.internal.ws.RealWebSocket$Streams) -> initReaderAndWriter
    void loopReader() -> loopReader
    boolean processNextFrame() -> processNextFrame
    void awaitTermination(int,java.util.concurrent.TimeUnit) -> awaitTermination
    void tearDown() -> tearDown
    int pingCount() -> pingCount
    int pongCount() -> pongCount
    void onReadMessage(java.lang.String) -> onReadMessage
    void onReadMessage(okio.ByteString) -> onReadMessage
    void onReadPing(okio.ByteString) -> onReadPing
    void onReadPong(okio.ByteString) -> onReadPong
    void onReadClose(int,java.lang.String) -> onReadClose
    boolean send(java.lang.String) -> send
    boolean send(okio.ByteString) -> send
    boolean send(okio.ByteString,int) -> send
    boolean pong(okio.ByteString) -> pong
    boolean close(int,java.lang.String) -> close
    boolean close(int,java.lang.String,long) -> close
    void runWriter() -> runWriter
    boolean writeOneFrame() -> writeOneFrame
    void writePingFrame() -> writePingFrame
    void failWebSocket(java.lang.Exception,okhttp3.Response) -> failWebSocket
    void <clinit>() -> <clinit>
okhttp3.internal.ws.RealWebSocket$1 -> okhttp3.internal.ws.RealWebSocket$1:
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    void <init>(okhttp3.internal.ws.RealWebSocket) -> <init>
    void run() -> run
okhttp3.internal.ws.RealWebSocket$2 -> okhttp3.internal.ws.RealWebSocket$2:
    okhttp3.Request val$request -> val$request
    int val$pingIntervalMillis -> val$pingIntervalMillis
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    void <init>(okhttp3.internal.ws.RealWebSocket,okhttp3.Request,int) -> <init>
    void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
    void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
okhttp3.internal.ws.RealWebSocket$CancelRunnable -> okhttp3.internal.ws.RealWebSocket$CancelRunnable:
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    void <init>(okhttp3.internal.ws.RealWebSocket) -> <init>
    void run() -> run
okhttp3.internal.ws.RealWebSocket$Close -> okhttp3.internal.ws.RealWebSocket$Close:
    int code -> code
    okio.ByteString reason -> reason
    long cancelAfterCloseMillis -> cancelAfterCloseMillis
    void <init>(int,okio.ByteString,long) -> <init>
okhttp3.internal.ws.RealWebSocket$Message -> okhttp3.internal.ws.RealWebSocket$Message:
    int formatOpcode -> formatOpcode
    okio.ByteString data -> data
    void <init>(int,okio.ByteString) -> <init>
okhttp3.internal.ws.RealWebSocket$PingRunnable -> okhttp3.internal.ws.RealWebSocket$PingRunnable:
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    void <init>(okhttp3.internal.ws.RealWebSocket) -> <init>
    void run() -> run
okhttp3.internal.ws.RealWebSocket$Streams -> okhttp3.internal.ws.RealWebSocket$Streams:
    boolean client -> client
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    void <init>(boolean,okio.BufferedSource,okio.BufferedSink) -> <init>
okhttp3.internal.ws.WebSocketProtocol -> okhttp3.internal.ws.WebSocketProtocol:
    java.lang.String ACCEPT_MAGIC -> ACCEPT_MAGIC
    int B0_FLAG_FIN -> B0_FLAG_FIN
    int B0_FLAG_RSV1 -> B0_FLAG_RSV1
    int B0_FLAG_RSV2 -> B0_FLAG_RSV2
    int B0_FLAG_RSV3 -> B0_FLAG_RSV3
    int B0_MASK_OPCODE -> B0_MASK_OPCODE
    int OPCODE_FLAG_CONTROL -> OPCODE_FLAG_CONTROL
    int B1_FLAG_MASK -> B1_FLAG_MASK
    int B1_MASK_LENGTH -> B1_MASK_LENGTH
    int OPCODE_CONTINUATION -> OPCODE_CONTINUATION
    int OPCODE_TEXT -> OPCODE_TEXT
    int OPCODE_BINARY -> OPCODE_BINARY
    int OPCODE_CONTROL_CLOSE -> OPCODE_CONTROL_CLOSE
    int OPCODE_CONTROL_PING -> OPCODE_CONTROL_PING
    int OPCODE_CONTROL_PONG -> OPCODE_CONTROL_PONG
    long PAYLOAD_BYTE_MAX -> PAYLOAD_BYTE_MAX
    long CLOSE_MESSAGE_MAX -> CLOSE_MESSAGE_MAX
    int PAYLOAD_SHORT -> PAYLOAD_SHORT
    long PAYLOAD_SHORT_MAX -> PAYLOAD_SHORT_MAX
    int PAYLOAD_LONG -> PAYLOAD_LONG
    int CLOSE_CLIENT_GOING_AWAY -> CLOSE_CLIENT_GOING_AWAY
    int CLOSE_PROTOCOL_EXCEPTION -> CLOSE_PROTOCOL_EXCEPTION
    int CLOSE_NO_STATUS_CODE -> CLOSE_NO_STATUS_CODE
    int CLOSE_ABNORMAL_TERMINATION -> CLOSE_ABNORMAL_TERMINATION
    void toggleMask(byte[],long,byte[],long) -> toggleMask
    java.lang.String closeCodeExceptionMessage(int) -> closeCodeExceptionMessage
    void validateCloseCode(int) -> validateCloseCode
    java.lang.String acceptHeader(java.lang.String) -> acceptHeader
    void <init>() -> <init>
okhttp3.internal.ws.WebSocketReader -> okhttp3.internal.ws.WebSocketReader:
    boolean isClient -> isClient
    okio.BufferedSource source -> source
    okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback -> frameCallback
    boolean closed -> closed
    int opcode -> opcode
    long frameLength -> frameLength
    long frameBytesRead -> frameBytesRead
    boolean isFinalFrame -> isFinalFrame
    boolean isControlFrame -> isControlFrame
    boolean isMasked -> isMasked
    byte[] maskKey -> maskKey
    byte[] maskBuffer -> maskBuffer
    void <init>(boolean,okio.BufferedSource,okhttp3.internal.ws.WebSocketReader$FrameCallback) -> <init>
    void processNextFrame() -> processNextFrame
    void readHeader() -> readHeader
    void readControlFrame() -> readControlFrame
    void readMessageFrame() -> readMessageFrame
    void readUntilNonControlFrame() -> readUntilNonControlFrame
    void readMessage(okio.Buffer) -> readMessage
okhttp3.internal.ws.WebSocketReader$FrameCallback -> okhttp3.internal.ws.WebSocketReader$FrameCallback:
    void onReadMessage(java.lang.String) -> onReadMessage
    void onReadMessage(okio.ByteString) -> onReadMessage
    void onReadPing(okio.ByteString) -> onReadPing
    void onReadPong(okio.ByteString) -> onReadPong
    void onReadClose(int,java.lang.String) -> onReadClose
okhttp3.internal.ws.WebSocketWriter -> okhttp3.internal.ws.WebSocketWriter:
    boolean isClient -> isClient
    java.util.Random random -> random
    okio.BufferedSink sink -> sink
    boolean writerClosed -> writerClosed
    okio.Buffer buffer -> buffer
    okhttp3.internal.ws.WebSocketWriter$FrameSink frameSink -> frameSink
    boolean activeWriter -> activeWriter
    byte[] maskKey -> maskKey
    byte[] maskBuffer -> maskBuffer
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(boolean,okio.BufferedSink,java.util.Random) -> <init>
    void writePing(okio.ByteString) -> writePing
    void writePong(okio.ByteString) -> writePong
    void writeClose(int,okio.ByteString) -> writeClose
    void writeControlFrameSynchronized(int,okio.ByteString) -> writeControlFrameSynchronized
    okio.Sink newMessageSink(int,long) -> newMessageSink
    void writeMessageFrameSynchronized(int,long,boolean,boolean) -> writeMessageFrameSynchronized
    void <clinit>() -> <clinit>
okhttp3.internal.ws.WebSocketWriter$FrameSink -> okhttp3.internal.ws.WebSocketWriter$FrameSink:
    int formatOpcode -> formatOpcode
    long contentLength -> contentLength
    boolean isFirstFrame -> isFirstFrame
    boolean closed -> closed
    okhttp3.internal.ws.WebSocketWriter this$0 -> this$0
    void <init>(okhttp3.internal.ws.WebSocketWriter) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okhttp3.package-info -> okhttp3.package-info:
okio.AsyncTimeout -> a.a:
    int TIMEOUT_WRITE_SIZE -> TIMEOUT_WRITE_SIZE
    long IDLE_TIMEOUT_MILLIS -> IDLE_TIMEOUT_MILLIS
    long IDLE_TIMEOUT_NANOS -> IDLE_TIMEOUT_NANOS
    okio.AsyncTimeout head -> head
    boolean inQueue -> inQueue
    okio.AsyncTimeout next -> next
    long timeoutAt -> timeoutAt
    void <init>() -> <init>
    void enter() -> enter
    void scheduleTimeout(okio.AsyncTimeout,long,boolean) -> scheduleTimeout
    boolean exit() -> exit
    boolean cancelScheduledTimeout(okio.AsyncTimeout) -> cancelScheduledTimeout
    long remainingNanos(long) -> remainingNanos
    void timedOut() -> timedOut
    okio.Sink sink(okio.Sink) -> sink
    okio.Source source(okio.Source) -> source
    void exit(boolean) -> exit
    java.io.IOException exit(java.io.IOException) -> exit
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    okio.AsyncTimeout awaitTimeout() -> awaitTimeout
    void <clinit>() -> <clinit>
okio.AsyncTimeout$1 -> a.b:
    okio.Sink val$sink -> a
    okio.AsyncTimeout this$0 -> b
    void <init>(okio.AsyncTimeout,okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.AsyncTimeout$2 -> a.c:
    okio.Source val$source -> a
    okio.AsyncTimeout this$0 -> b
    void <init>(okio.AsyncTimeout,okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.AsyncTimeout$Watchdog -> a.d:
    void <init>() -> <init>
    void run() -> run
okio.Base64 -> a.e:
    byte[] MAP -> a
    byte[] URL_MAP -> b
    byte[] decode(java.lang.String) -> a
    java.lang.String encode(byte[]) -> a
    java.lang.String encode(byte[],byte[]) -> a
    void <clinit>() -> <clinit>
okio.Buffer -> a.f:
    byte[] DIGITS -> c
    okio.Segment head -> a
    long size -> b
    void <init>() -> <init>
    long size() -> a
    okio.Buffer buffer() -> b
    java.io.OutputStream outputStream() -> c
    okio.Buffer emitCompleteSegments() -> d
    okio.BufferedSink emit() -> e
    boolean exhausted() -> f
    void require(long) -> a
    boolean request(long) -> b
    java.io.InputStream inputStream() -> g
    okio.Buffer copyTo(okio.Buffer,long,long) -> a
    long completeSegmentByteCount() -> h
    byte readByte() -> i
    byte getByte(long) -> c
    short readShort() -> j
    int readInt() -> k
    long readLong() -> l
    short readShortLe() -> m
    int readIntLe() -> n
    long readDecimalLong() -> o
    long readHexadecimalUnsignedLong() -> p
    okio.ByteString readByteString() -> q
    okio.ByteString readByteString(long) -> d
    void readFully(okio.Buffer,long) -> a
    long readAll(okio.Sink) -> a
    java.lang.String readUtf8() -> r
    java.lang.String readUtf8(long) -> e
    java.lang.String readString(java.nio.charset.Charset) -> a
    java.lang.String readString(long,java.nio.charset.Charset) -> a
    java.lang.String readUtf8LineStrict() -> s
    java.lang.String readUtf8LineStrict(long) -> f
    java.lang.String readUtf8Line(long) -> g
    byte[] readByteArray() -> t
    byte[] readByteArray(long) -> h
    void readFully(byte[]) -> a
    int read(byte[],int,int) -> a
    void clear() -> u
    void skip(long) -> i
    okio.Buffer write(okio.ByteString) -> a
    okio.Buffer writeUtf8(java.lang.String) -> a
    okio.Buffer writeUtf8(java.lang.String,int,int) -> a
    okio.Buffer writeUtf8CodePoint(int) -> a
    okio.Buffer writeString(java.lang.String,java.nio.charset.Charset) -> a
    okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset) -> a
    okio.Buffer write(byte[]) -> b
    okio.Buffer write(byte[],int,int) -> b
    long writeAll(okio.Source) -> a
    okio.Buffer writeByte(int) -> b
    okio.Buffer writeShort(int) -> c
    okio.Buffer writeInt(int) -> d
    okio.Buffer writeLong(long) -> j
    okio.Buffer writeDecimalLong(long) -> k
    okio.Buffer writeHexadecimalUnsignedLong(long) -> l
    okio.Segment writableSegment(int) -> e
    void write(okio.Buffer,long) -> write
    long read(okio.Buffer,long) -> read
    long indexOf(byte) -> a
    long indexOf(byte,long,long) -> a
    boolean rangeEquals(long,okio.ByteString) -> a
    boolean rangeEquals(long,okio.ByteString,int,int) -> a
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    okio.Buffer clone() -> v
    okio.ByteString snapshot() -> w
    okio.ByteString snapshot(int) -> f
    java.lang.Object clone() -> clone
    okio.BufferedSink emitCompleteSegments() -> x
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> m
    okio.BufferedSink writeDecimalLong(long) -> n
    okio.BufferedSink writeLong(long) -> o
    okio.BufferedSink writeInt(int) -> g
    okio.BufferedSink writeShort(int) -> h
    okio.BufferedSink writeByte(int) -> i
    okio.BufferedSink writeUtf8(java.lang.String) -> b
    okio.BufferedSink write(byte[],int,int) -> c
    okio.BufferedSink write(byte[]) -> c
    okio.BufferedSink write(okio.ByteString) -> b
    void <clinit>() -> <clinit>
okio.Buffer$1 -> a.g:
    okio.Buffer this$0 -> a
    void <init>(okio.Buffer) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
    java.lang.String toString() -> toString
okio.Buffer$2 -> a.h:
    okio.Buffer this$0 -> a
    void <init>(okio.Buffer) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
okio.BufferedSink -> a.i:
    okio.Buffer buffer() -> b
    okio.BufferedSink write(okio.ByteString) -> b
    okio.BufferedSink write(byte[]) -> c
    okio.BufferedSink write(byte[],int,int) -> c
    long writeAll(okio.Source) -> a
    okio.BufferedSink writeUtf8(java.lang.String) -> b
    okio.BufferedSink writeByte(int) -> i
    okio.BufferedSink writeShort(int) -> h
    okio.BufferedSink writeInt(int) -> g
    okio.BufferedSink writeLong(long) -> o
    okio.BufferedSink writeDecimalLong(long) -> n
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> m
    void flush() -> flush
    okio.BufferedSink emit() -> e
    okio.BufferedSink emitCompleteSegments() -> x
okio.BufferedSource -> a.j:
    okio.Buffer buffer() -> b
    boolean exhausted() -> f
    void require(long) -> a
    boolean request(long) -> b
    byte readByte() -> i
    short readShort() -> j
    short readShortLe() -> m
    int readInt() -> k
    int readIntLe() -> n
    long readLong() -> l
    long readDecimalLong() -> o
    long readHexadecimalUnsignedLong() -> p
    void skip(long) -> i
    okio.ByteString readByteString(long) -> d
    byte[] readByteArray() -> t
    byte[] readByteArray(long) -> h
    void readFully(byte[]) -> a
    int read(byte[],int,int) -> a
    void readFully(okio.Buffer,long) -> a
    long readAll(okio.Sink) -> a
    java.lang.String readUtf8LineStrict() -> s
    java.lang.String readString(java.nio.charset.Charset) -> a
    long indexOf(byte) -> a
    boolean rangeEquals(long,okio.ByteString) -> a
    java.io.InputStream inputStream() -> g
okio.ByteString -> a.k:
    char[] HEX_DIGITS -> a
    okio.ByteString EMPTY -> b
    byte[] data -> c
    int hashCode -> d
    java.lang.String utf8 -> e
    void <init>(byte[]) -> <init>
    okio.ByteString of(byte[]) -> a
    okio.ByteString encodeUtf8(java.lang.String) -> a
    java.lang.String utf8() -> a
    java.lang.String base64() -> b
    okio.ByteString md5() -> c
    okio.ByteString sha1() -> d
    okio.ByteString sha256() -> e
    okio.ByteString digest(java.lang.String) -> d
    okio.ByteString decodeBase64(java.lang.String) -> b
    java.lang.String hex() -> f
    okio.ByteString decodeHex(java.lang.String) -> c
    int decodeHexDigit(char) -> a
    okio.ByteString toAsciiLowercase() -> g
    okio.ByteString substring(int,int) -> a
    byte getByte(int) -> a
    int size() -> h
    byte[] toByteArray() -> i
    void write(okio.Buffer) -> a
    boolean rangeEquals(int,okio.ByteString,int,int) -> a
    boolean rangeEquals(int,byte[],int,int) -> a
    boolean startsWith(okio.ByteString) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(okio.ByteString) -> b
    java.lang.String toString() -> toString
    int codePointIndexToCharIndex(java.lang.String,int) -> a
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
okio.ForwardingSink -> a.l:
    okio.Sink delegate -> delegate
    void <init>(okio.Sink) -> <init>
    okio.Sink delegate() -> delegate
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    java.lang.String toString() -> toString
okio.ForwardingSource -> a.m:
    okio.Source delegate -> delegate
    void <init>(okio.Source) -> <init>
    okio.Source delegate() -> delegate
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
    java.lang.String toString() -> toString
okio.ForwardingTimeout -> a.n:
    okio.Timeout delegate -> a
    void <init>(okio.Timeout) -> <init>
    okio.Timeout delegate() -> a
    okio.ForwardingTimeout setDelegate(okio.Timeout) -> a
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    long timeoutNanos() -> timeoutNanos
    boolean hasDeadline() -> hasDeadline
    long deadlineNanoTime() -> deadlineNanoTime
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    okio.Timeout clearTimeout() -> clearTimeout
    okio.Timeout clearDeadline() -> clearDeadline
    void throwIfReached() -> throwIfReached
okio.GzipSource -> a.o:
    int section -> a
    okio.BufferedSource source -> b
    java.util.zip.Inflater inflater -> c
    okio.InflaterSource inflaterSource -> d
    java.util.zip.CRC32 crc -> e
    void <init>(okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
    void consumeHeader() -> a
    void consumeTrailer() -> b
    okio.Timeout timeout() -> timeout
    void close() -> close
    void updateCrc(okio.Buffer,long,long) -> a
    void checkEqual(java.lang.String,int,int) -> a
okio.InflaterSource -> a.p:
    okio.BufferedSource source -> a
    java.util.zip.Inflater inflater -> b
    int bufferBytesHeldByInflater -> c
    boolean closed -> d
    void <init>(okio.BufferedSource,java.util.zip.Inflater) -> <init>
    long read(okio.Buffer,long) -> read
    boolean refill() -> a
    void releaseInflatedBytes() -> b
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Okio -> a.q:
    java.util.logging.Logger logger -> a
    void <init>() -> <init>
    okio.BufferedSource buffer(okio.Source) -> a
    okio.BufferedSink buffer(okio.Sink) -> a
    okio.Sink sink(java.io.OutputStream) -> a
    okio.Sink sink(java.io.OutputStream,okio.Timeout) -> a
    okio.Sink sink(java.net.Socket) -> a
    okio.Source source(java.io.InputStream) -> a
    okio.Source source(java.io.InputStream,okio.Timeout) -> a
    okio.Source source(java.io.File) -> a
    okio.Sink sink(java.io.File) -> b
    okio.Sink appendingSink(java.io.File) -> c
    okio.Sink blackhole() -> a
    okio.Source source(java.net.Socket) -> b
    okio.AsyncTimeout timeout(java.net.Socket) -> c
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> a
    void <clinit>() -> <clinit>
okio.Okio$1 -> a.r:
    okio.Timeout val$timeout -> a
    java.io.OutputStream val$out -> b
    void <init>(okio.Timeout,java.io.OutputStream) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.Okio$2 -> a.s:
    okio.Timeout val$timeout -> a
    java.io.InputStream val$in -> b
    void <init>(okio.Timeout,java.io.InputStream) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.Okio$3 -> a.t:
    void <init>() -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Okio$4 -> a.u:
    java.net.Socket val$socket -> a
    void <init>(java.net.Socket) -> <init>
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    void timedOut() -> timedOut
okio.RealBufferedSink -> a.v:
    okio.Buffer buffer -> a
    okio.Sink sink -> b
    boolean closed -> c
    void <init>(okio.Sink) -> <init>
    okio.Buffer buffer() -> b
    void write(okio.Buffer,long) -> write
    okio.BufferedSink write(okio.ByteString) -> b
    okio.BufferedSink writeUtf8(java.lang.String) -> b
    okio.BufferedSink write(byte[]) -> c
    okio.BufferedSink write(byte[],int,int) -> c
    long writeAll(okio.Source) -> a
    okio.BufferedSink writeByte(int) -> i
    okio.BufferedSink writeShort(int) -> h
    okio.BufferedSink writeInt(int) -> g
    okio.BufferedSink writeLong(long) -> o
    okio.BufferedSink writeDecimalLong(long) -> n
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> m
    okio.BufferedSink emitCompleteSegments() -> x
    okio.BufferedSink emit() -> e
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.RealBufferedSource -> a.w:
    okio.Buffer buffer -> a
    okio.Source source -> b
    boolean closed -> c
    void <init>(okio.Source) -> <init>
    okio.Buffer buffer() -> b
    long read(okio.Buffer,long) -> read
    boolean exhausted() -> f
    void require(long) -> a
    boolean request(long) -> b
    byte readByte() -> i
    okio.ByteString readByteString(long) -> d
    byte[] readByteArray() -> t
    byte[] readByteArray(long) -> h
    void readFully(byte[]) -> a
    int read(byte[],int,int) -> a
    void readFully(okio.Buffer,long) -> a
    long readAll(okio.Sink) -> a
    java.lang.String readString(java.nio.charset.Charset) -> a
    java.lang.String readUtf8LineStrict() -> s
    java.lang.String readUtf8LineStrict(long) -> c
    short readShort() -> j
    short readShortLe() -> m
    int readInt() -> k
    int readIntLe() -> n
    long readLong() -> l
    long readDecimalLong() -> o
    long readHexadecimalUnsignedLong() -> p
    void skip(long) -> i
    long indexOf(byte) -> a
    long indexOf(byte,long,long) -> a
    boolean rangeEquals(long,okio.ByteString) -> a
    boolean rangeEquals(long,okio.ByteString,int,int) -> a
    java.io.InputStream inputStream() -> g
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.RealBufferedSource$1 -> a.x:
    okio.RealBufferedSource this$0 -> a
    void <init>(okio.RealBufferedSource) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
okio.Segment -> a.y:
    byte[] data -> a
    int pos -> b
    int limit -> c
    boolean shared -> d
    boolean owner -> e
    okio.Segment next -> f
    okio.Segment prev -> g
    void <init>() -> <init>
    void <init>(okio.Segment) -> <init>
    void <init>(byte[],int,int) -> <init>
    okio.Segment pop() -> a
    okio.Segment push(okio.Segment) -> a
    okio.Segment split(int) -> a
    void compact() -> b
    void writeTo(okio.Segment,int) -> a
okio.SegmentPool -> a.z:
    okio.Segment next -> a
    long byteCount -> b
    void <init>() -> <init>
    okio.Segment take() -> a
    void recycle(okio.Segment) -> a
okio.SegmentedByteString -> a.aa:
    byte[][] segments -> f
    int[] directory -> g
    void <init>(okio.Buffer,int) -> <init>
    java.lang.String utf8() -> a
    java.lang.String base64() -> b
    java.lang.String hex() -> f
    okio.ByteString toAsciiLowercase() -> g
    okio.ByteString md5() -> c
    okio.ByteString sha1() -> d
    okio.ByteString sha256() -> e
    okio.ByteString substring(int,int) -> a
    byte getByte(int) -> a
    int segment(int) -> b
    int size() -> h
    byte[] toByteArray() -> i
    void write(okio.Buffer) -> a
    boolean rangeEquals(int,okio.ByteString,int,int) -> a
    boolean rangeEquals(int,byte[],int,int) -> a
    okio.ByteString toByteString() -> j
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okio.Sink -> a.ab:
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Source -> a.ac:
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Timeout -> a.ad:
    okio.Timeout NONE -> NONE
    boolean hasDeadline -> hasDeadline
    long deadlineNanoTime -> deadlineNanoTime
    long timeoutNanos -> timeoutNanos
    void <init>() -> <init>
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    long timeoutNanos() -> timeoutNanos
    boolean hasDeadline() -> hasDeadline
    long deadlineNanoTime() -> deadlineNanoTime
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    okio.Timeout deadline(long,java.util.concurrent.TimeUnit) -> deadline
    okio.Timeout clearTimeout() -> clearTimeout
    okio.Timeout clearDeadline() -> clearDeadline
    void throwIfReached() -> throwIfReached
    void waitUntilNotified(java.lang.Object) -> waitUntilNotified
    void <clinit>() -> <clinit>
okio.Timeout$1 -> a.ae:
    void <init>() -> <init>
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    void throwIfReached() -> throwIfReached
okio.Util -> a.af:
    java.nio.charset.Charset UTF_8 -> a
    void checkOffsetAndCount(long,long,long) -> a
    short reverseBytesShort(short) -> a
    int reverseBytesInt(int) -> a
    void sneakyRethrow(java.lang.Throwable) -> a
    void sneakyThrow2(java.lang.Throwable) -> b
    boolean arrayRangeEquals(byte[],int,byte[],int,int) -> a
    void <clinit>() -> <clinit>
org.joda.time.Chronology -> org.joda.time.Chronology:
    void <init>() -> <init>
    org.joda.time.DateTimeZone getZone() -> getZone
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long getDateTimeMillis(int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(int,int,int,int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(long,int,int,int,int) -> getDateTimeMillis
    void validate(org.joda.time.ReadablePartial,int[]) -> validate
    int[] get(org.joda.time.ReadablePartial,long) -> get
    long set(org.joda.time.ReadablePartial,long) -> set
    int[] get(org.joda.time.ReadablePeriod,long,long) -> get
    int[] get(org.joda.time.ReadablePeriod,long) -> get
    long add(org.joda.time.ReadablePeriod,long,int) -> add
    long add(long,long,int) -> add
    org.joda.time.DurationField millis() -> millis
    org.joda.time.DateTimeField millisOfSecond() -> millisOfSecond
    org.joda.time.DateTimeField millisOfDay() -> millisOfDay
    org.joda.time.DurationField seconds() -> seconds
    org.joda.time.DateTimeField secondOfMinute() -> secondOfMinute
    org.joda.time.DateTimeField secondOfDay() -> secondOfDay
    org.joda.time.DurationField minutes() -> minutes
    org.joda.time.DateTimeField minuteOfHour() -> minuteOfHour
    org.joda.time.DateTimeField minuteOfDay() -> minuteOfDay
    org.joda.time.DurationField hours() -> hours
    org.joda.time.DateTimeField hourOfDay() -> hourOfDay
    org.joda.time.DateTimeField clockhourOfDay() -> clockhourOfDay
    org.joda.time.DurationField halfdays() -> halfdays
    org.joda.time.DateTimeField hourOfHalfday() -> hourOfHalfday
    org.joda.time.DateTimeField clockhourOfHalfday() -> clockhourOfHalfday
    org.joda.time.DateTimeField halfdayOfDay() -> halfdayOfDay
    org.joda.time.DurationField days() -> days
    org.joda.time.DateTimeField dayOfWeek() -> dayOfWeek
    org.joda.time.DateTimeField dayOfMonth() -> dayOfMonth
    org.joda.time.DateTimeField dayOfYear() -> dayOfYear
    org.joda.time.DurationField weeks() -> weeks
    org.joda.time.DateTimeField weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.DurationField weekyears() -> weekyears
    org.joda.time.DateTimeField weekyear() -> weekyear
    org.joda.time.DateTimeField weekyearOfCentury() -> weekyearOfCentury
    org.joda.time.DurationField months() -> months
    org.joda.time.DateTimeField monthOfYear() -> monthOfYear
    org.joda.time.DurationField years() -> years
    org.joda.time.DateTimeField year() -> year
    org.joda.time.DateTimeField yearOfEra() -> yearOfEra
    org.joda.time.DateTimeField yearOfCentury() -> yearOfCentury
    org.joda.time.DurationField centuries() -> centuries
    org.joda.time.DateTimeField centuryOfEra() -> centuryOfEra
    org.joda.time.DurationField eras() -> eras
    org.joda.time.DateTimeField era() -> era
    java.lang.String toString() -> toString
org.joda.time.DateMidnight -> org.joda.time.DateMidnight:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateMidnight now() -> now
    org.joda.time.DateMidnight now(org.joda.time.DateTimeZone) -> now
    org.joda.time.DateMidnight now(org.joda.time.Chronology) -> now
    org.joda.time.DateMidnight parse(java.lang.String) -> parse
    org.joda.time.DateMidnight parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.DateTimeZone) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,org.joda.time.DateTimeZone) -> <init>
    void <init>(int,int,int,org.joda.time.Chronology) -> <init>
    long checkInstant(long,org.joda.time.Chronology) -> checkInstant
    org.joda.time.DateMidnight withMillis(long) -> withMillis
    org.joda.time.DateMidnight withChronology(org.joda.time.Chronology) -> withChronology
    org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone) -> withZoneRetainFields
    org.joda.time.DateMidnight withFields(org.joda.time.ReadablePartial) -> withFields
    org.joda.time.DateMidnight withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.DateMidnight withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.DateMidnight withDurationAdded(long,int) -> withDurationAdded
    org.joda.time.DateMidnight withDurationAdded(org.joda.time.ReadableDuration,int) -> withDurationAdded
    org.joda.time.DateMidnight withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.DateMidnight plus(long) -> plus
    org.joda.time.DateMidnight plus(org.joda.time.ReadableDuration) -> plus
    org.joda.time.DateMidnight plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.DateMidnight plusYears(int) -> plusYears
    org.joda.time.DateMidnight plusMonths(int) -> plusMonths
    org.joda.time.DateMidnight plusWeeks(int) -> plusWeeks
    org.joda.time.DateMidnight plusDays(int) -> plusDays
    org.joda.time.DateMidnight minus(long) -> minus
    org.joda.time.DateMidnight minus(org.joda.time.ReadableDuration) -> minus
    org.joda.time.DateMidnight minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.DateMidnight minusYears(int) -> minusYears
    org.joda.time.DateMidnight minusMonths(int) -> minusMonths
    org.joda.time.DateMidnight minusWeeks(int) -> minusWeeks
    org.joda.time.DateMidnight minusDays(int) -> minusDays
    org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType) -> property
    org.joda.time.YearMonthDay toYearMonthDay() -> toYearMonthDay
    org.joda.time.LocalDate toLocalDate() -> toLocalDate
    org.joda.time.Interval toInterval() -> toInterval
    org.joda.time.DateMidnight withEra(int) -> withEra
    org.joda.time.DateMidnight withCenturyOfEra(int) -> withCenturyOfEra
    org.joda.time.DateMidnight withYearOfEra(int) -> withYearOfEra
    org.joda.time.DateMidnight withYearOfCentury(int) -> withYearOfCentury
    org.joda.time.DateMidnight withYear(int) -> withYear
    org.joda.time.DateMidnight withWeekyear(int) -> withWeekyear
    org.joda.time.DateMidnight withMonthOfYear(int) -> withMonthOfYear
    org.joda.time.DateMidnight withWeekOfWeekyear(int) -> withWeekOfWeekyear
    org.joda.time.DateMidnight withDayOfYear(int) -> withDayOfYear
    org.joda.time.DateMidnight withDayOfMonth(int) -> withDayOfMonth
    org.joda.time.DateMidnight withDayOfWeek(int) -> withDayOfWeek
    org.joda.time.DateMidnight$Property era() -> era
    org.joda.time.DateMidnight$Property centuryOfEra() -> centuryOfEra
    org.joda.time.DateMidnight$Property yearOfCentury() -> yearOfCentury
    org.joda.time.DateMidnight$Property yearOfEra() -> yearOfEra
    org.joda.time.DateMidnight$Property year() -> year
    org.joda.time.DateMidnight$Property weekyear() -> weekyear
    org.joda.time.DateMidnight$Property monthOfYear() -> monthOfYear
    org.joda.time.DateMidnight$Property weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.DateMidnight$Property dayOfYear() -> dayOfYear
    org.joda.time.DateMidnight$Property dayOfMonth() -> dayOfMonth
    org.joda.time.DateMidnight$Property dayOfWeek() -> dayOfWeek
org.joda.time.DateMidnight$Property -> org.joda.time.DateMidnight$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateMidnight iInstant -> iInstant
    org.joda.time.DateTimeField iField -> iField
    void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    org.joda.time.DateTimeField getField() -> getField
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.DateMidnight getDateMidnight() -> getDateMidnight
    org.joda.time.DateMidnight addToCopy(int) -> addToCopy
    org.joda.time.DateMidnight addToCopy(long) -> addToCopy
    org.joda.time.DateMidnight addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.DateMidnight setCopy(int) -> setCopy
    org.joda.time.DateMidnight setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.DateMidnight setCopy(java.lang.String) -> setCopy
    org.joda.time.DateMidnight withMaximumValue() -> withMaximumValue
    org.joda.time.DateMidnight withMinimumValue() -> withMinimumValue
    org.joda.time.DateMidnight roundFloorCopy() -> roundFloorCopy
    org.joda.time.DateMidnight roundCeilingCopy() -> roundCeilingCopy
    org.joda.time.DateMidnight roundHalfFloorCopy() -> roundHalfFloorCopy
    org.joda.time.DateMidnight roundHalfCeilingCopy() -> roundHalfCeilingCopy
    org.joda.time.DateMidnight roundHalfEvenCopy() -> roundHalfEvenCopy
org.joda.time.DateTime -> org.joda.time.DateTime:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTime now() -> now
    org.joda.time.DateTime now(org.joda.time.DateTimeZone) -> now
    org.joda.time.DateTime now(org.joda.time.Chronology) -> now
    org.joda.time.DateTime parse(java.lang.String) -> parse
    org.joda.time.DateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.DateTimeZone) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,org.joda.time.DateTimeZone) -> <init>
    void <init>(int,int,int,int,int,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,org.joda.time.DateTimeZone) -> <init>
    void <init>(int,int,int,int,int,int,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone) -> <init>
    void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology) -> <init>
    org.joda.time.DateTime toDateTime() -> toDateTime
    org.joda.time.DateTime toDateTimeISO() -> toDateTimeISO
    org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone) -> toDateTime
    org.joda.time.DateTime toDateTime(org.joda.time.Chronology) -> toDateTime
    org.joda.time.DateTime withMillis(long) -> withMillis
    org.joda.time.DateTime withChronology(org.joda.time.Chronology) -> withChronology
    org.joda.time.DateTime withZone(org.joda.time.DateTimeZone) -> withZone
    org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone) -> withZoneRetainFields
    org.joda.time.DateTime withEarlierOffsetAtOverlap() -> withEarlierOffsetAtOverlap
    org.joda.time.DateTime withLaterOffsetAtOverlap() -> withLaterOffsetAtOverlap
    org.joda.time.DateTime withDate(int,int,int) -> withDate
    org.joda.time.DateTime withTime(int,int,int,int) -> withTime
    org.joda.time.DateTime withTimeAtStartOfDay() -> withTimeAtStartOfDay
    org.joda.time.DateTime withFields(org.joda.time.ReadablePartial) -> withFields
    org.joda.time.DateTime withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.DateTime withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.DateTime withDurationAdded(long,int) -> withDurationAdded
    org.joda.time.DateTime withDurationAdded(org.joda.time.ReadableDuration,int) -> withDurationAdded
    org.joda.time.DateTime withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.DateTime plus(long) -> plus
    org.joda.time.DateTime plus(org.joda.time.ReadableDuration) -> plus
    org.joda.time.DateTime plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.DateTime plusYears(int) -> plusYears
    org.joda.time.DateTime plusMonths(int) -> plusMonths
    org.joda.time.DateTime plusWeeks(int) -> plusWeeks
    org.joda.time.DateTime plusDays(int) -> plusDays
    org.joda.time.DateTime plusHours(int) -> plusHours
    org.joda.time.DateTime plusMinutes(int) -> plusMinutes
    org.joda.time.DateTime plusSeconds(int) -> plusSeconds
    org.joda.time.DateTime plusMillis(int) -> plusMillis
    org.joda.time.DateTime minus(long) -> minus
    org.joda.time.DateTime minus(org.joda.time.ReadableDuration) -> minus
    org.joda.time.DateTime minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.DateTime minusYears(int) -> minusYears
    org.joda.time.DateTime minusMonths(int) -> minusMonths
    org.joda.time.DateTime minusWeeks(int) -> minusWeeks
    org.joda.time.DateTime minusDays(int) -> minusDays
    org.joda.time.DateTime minusHours(int) -> minusHours
    org.joda.time.DateTime minusMinutes(int) -> minusMinutes
    org.joda.time.DateTime minusSeconds(int) -> minusSeconds
    org.joda.time.DateTime minusMillis(int) -> minusMillis
    org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType) -> property
    org.joda.time.DateMidnight toDateMidnight() -> toDateMidnight
    org.joda.time.YearMonthDay toYearMonthDay() -> toYearMonthDay
    org.joda.time.TimeOfDay toTimeOfDay() -> toTimeOfDay
    org.joda.time.LocalDateTime toLocalDateTime() -> toLocalDateTime
    org.joda.time.LocalDate toLocalDate() -> toLocalDate
    org.joda.time.LocalTime toLocalTime() -> toLocalTime
    org.joda.time.DateTime withEra(int) -> withEra
    org.joda.time.DateTime withCenturyOfEra(int) -> withCenturyOfEra
    org.joda.time.DateTime withYearOfEra(int) -> withYearOfEra
    org.joda.time.DateTime withYearOfCentury(int) -> withYearOfCentury
    org.joda.time.DateTime withYear(int) -> withYear
    org.joda.time.DateTime withWeekyear(int) -> withWeekyear
    org.joda.time.DateTime withMonthOfYear(int) -> withMonthOfYear
    org.joda.time.DateTime withWeekOfWeekyear(int) -> withWeekOfWeekyear
    org.joda.time.DateTime withDayOfYear(int) -> withDayOfYear
    org.joda.time.DateTime withDayOfMonth(int) -> withDayOfMonth
    org.joda.time.DateTime withDayOfWeek(int) -> withDayOfWeek
    org.joda.time.DateTime withHourOfDay(int) -> withHourOfDay
    org.joda.time.DateTime withMinuteOfHour(int) -> withMinuteOfHour
    org.joda.time.DateTime withSecondOfMinute(int) -> withSecondOfMinute
    org.joda.time.DateTime withMillisOfSecond(int) -> withMillisOfSecond
    org.joda.time.DateTime withMillisOfDay(int) -> withMillisOfDay
    org.joda.time.DateTime$Property era() -> era
    org.joda.time.DateTime$Property centuryOfEra() -> centuryOfEra
    org.joda.time.DateTime$Property yearOfCentury() -> yearOfCentury
    org.joda.time.DateTime$Property yearOfEra() -> yearOfEra
    org.joda.time.DateTime$Property year() -> year
    org.joda.time.DateTime$Property weekyear() -> weekyear
    org.joda.time.DateTime$Property monthOfYear() -> monthOfYear
    org.joda.time.DateTime$Property weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.DateTime$Property dayOfYear() -> dayOfYear
    org.joda.time.DateTime$Property dayOfMonth() -> dayOfMonth
    org.joda.time.DateTime$Property dayOfWeek() -> dayOfWeek
    org.joda.time.DateTime$Property hourOfDay() -> hourOfDay
    org.joda.time.DateTime$Property minuteOfDay() -> minuteOfDay
    org.joda.time.DateTime$Property minuteOfHour() -> minuteOfHour
    org.joda.time.DateTime$Property secondOfDay() -> secondOfDay
    org.joda.time.DateTime$Property secondOfMinute() -> secondOfMinute
    org.joda.time.DateTime$Property millisOfDay() -> millisOfDay
    org.joda.time.DateTime$Property millisOfSecond() -> millisOfSecond
org.joda.time.DateTime$Property -> org.joda.time.DateTime$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTime iInstant -> iInstant
    org.joda.time.DateTimeField iField -> iField
    void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    org.joda.time.DateTimeField getField() -> getField
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.DateTime getDateTime() -> getDateTime
    org.joda.time.DateTime addToCopy(int) -> addToCopy
    org.joda.time.DateTime addToCopy(long) -> addToCopy
    org.joda.time.DateTime addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.DateTime setCopy(int) -> setCopy
    org.joda.time.DateTime setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.DateTime setCopy(java.lang.String) -> setCopy
    org.joda.time.DateTime withMaximumValue() -> withMaximumValue
    org.joda.time.DateTime withMinimumValue() -> withMinimumValue
    org.joda.time.DateTime roundFloorCopy() -> roundFloorCopy
    org.joda.time.DateTime roundCeilingCopy() -> roundCeilingCopy
    org.joda.time.DateTime roundHalfFloorCopy() -> roundHalfFloorCopy
    org.joda.time.DateTime roundHalfCeilingCopy() -> roundHalfCeilingCopy
    org.joda.time.DateTime roundHalfEvenCopy() -> roundHalfEvenCopy
org.joda.time.DateTimeComparator -> org.joda.time.DateTimeComparator:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeComparator ALL_INSTANCE -> ALL_INSTANCE
    org.joda.time.DateTimeComparator DATE_INSTANCE -> DATE_INSTANCE
    org.joda.time.DateTimeComparator TIME_INSTANCE -> TIME_INSTANCE
    org.joda.time.DateTimeFieldType iLowerLimit -> iLowerLimit
    org.joda.time.DateTimeFieldType iUpperLimit -> iUpperLimit
    org.joda.time.DateTimeComparator getInstance() -> getInstance
    org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType) -> getInstance
    org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType) -> getInstance
    org.joda.time.DateTimeComparator getDateOnlyInstance() -> getDateOnlyInstance
    org.joda.time.DateTimeComparator getTimeOnlyInstance() -> getTimeOnlyInstance
    void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType) -> <init>
    org.joda.time.DateTimeFieldType getLowerLimit() -> getLowerLimit
    org.joda.time.DateTimeFieldType getUpperLimit() -> getUpperLimit
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object readResolve() -> readResolve
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.DateTimeConstants -> org.joda.time.DateTimeConstants:
    int JANUARY -> JANUARY
    int FEBRUARY -> FEBRUARY
    int MARCH -> MARCH
    int APRIL -> APRIL
    int MAY -> MAY
    int JUNE -> JUNE
    int JULY -> JULY
    int AUGUST -> AUGUST
    int SEPTEMBER -> SEPTEMBER
    int OCTOBER -> OCTOBER
    int NOVEMBER -> NOVEMBER
    int DECEMBER -> DECEMBER
    int MONDAY -> MONDAY
    int TUESDAY -> TUESDAY
    int WEDNESDAY -> WEDNESDAY
    int THURSDAY -> THURSDAY
    int FRIDAY -> FRIDAY
    int SATURDAY -> SATURDAY
    int SUNDAY -> SUNDAY
    int AM -> AM
    int PM -> PM
    int BC -> BC
    int BCE -> BCE
    int AD -> AD
    int CE -> CE
    int MILLIS_PER_SECOND -> MILLIS_PER_SECOND
    int SECONDS_PER_MINUTE -> SECONDS_PER_MINUTE
    int MILLIS_PER_MINUTE -> MILLIS_PER_MINUTE
    int MINUTES_PER_HOUR -> MINUTES_PER_HOUR
    int SECONDS_PER_HOUR -> SECONDS_PER_HOUR
    int MILLIS_PER_HOUR -> MILLIS_PER_HOUR
    int HOURS_PER_DAY -> HOURS_PER_DAY
    int MINUTES_PER_DAY -> MINUTES_PER_DAY
    int SECONDS_PER_DAY -> SECONDS_PER_DAY
    int MILLIS_PER_DAY -> MILLIS_PER_DAY
    int DAYS_PER_WEEK -> DAYS_PER_WEEK
    int HOURS_PER_WEEK -> HOURS_PER_WEEK
    int MINUTES_PER_WEEK -> MINUTES_PER_WEEK
    int SECONDS_PER_WEEK -> SECONDS_PER_WEEK
    int MILLIS_PER_WEEK -> MILLIS_PER_WEEK
    void <init>() -> <init>
org.joda.time.DateTimeField -> org.joda.time.DateTimeField:
    void <init>() -> <init>
    org.joda.time.DateTimeFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    boolean isLenient() -> isLenient
    int get(long) -> get
    java.lang.String getAsText(long,java.util.Locale) -> getAsText
    java.lang.String getAsText(long) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsText
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(long,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(long) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    long add(long,int) -> add
    long add(long,long) -> add
    int[] add(org.joda.time.ReadablePartial,int,int[],int) -> add
    int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int) -> addWrapPartial
    long addWrapField(long,int) -> addWrapField
    int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    long set(long,java.lang.String) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale) -> set
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMinimumValue(long) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial,int[]) -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
    java.lang.String toString() -> toString
org.joda.time.DateTimeFieldType -> org.joda.time.DateTimeFieldType:
    long serialVersionUID -> serialVersionUID
    byte ERA -> ERA
    byte YEAR_OF_ERA -> YEAR_OF_ERA
    byte CENTURY_OF_ERA -> CENTURY_OF_ERA
    byte YEAR_OF_CENTURY -> YEAR_OF_CENTURY
    byte YEAR -> YEAR
    byte DAY_OF_YEAR -> DAY_OF_YEAR
    byte MONTH_OF_YEAR -> MONTH_OF_YEAR
    byte DAY_OF_MONTH -> DAY_OF_MONTH
    byte WEEKYEAR_OF_CENTURY -> WEEKYEAR_OF_CENTURY
    byte WEEKYEAR -> WEEKYEAR
    byte WEEK_OF_WEEKYEAR -> WEEK_OF_WEEKYEAR
    byte DAY_OF_WEEK -> DAY_OF_WEEK
    byte HALFDAY_OF_DAY -> HALFDAY_OF_DAY
    byte HOUR_OF_HALFDAY -> HOUR_OF_HALFDAY
    byte CLOCKHOUR_OF_HALFDAY -> CLOCKHOUR_OF_HALFDAY
    byte CLOCKHOUR_OF_DAY -> CLOCKHOUR_OF_DAY
    byte HOUR_OF_DAY -> HOUR_OF_DAY
    byte MINUTE_OF_DAY -> MINUTE_OF_DAY
    byte MINUTE_OF_HOUR -> MINUTE_OF_HOUR
    byte SECOND_OF_DAY -> SECOND_OF_DAY
    byte SECOND_OF_MINUTE -> SECOND_OF_MINUTE
    byte MILLIS_OF_DAY -> MILLIS_OF_DAY
    byte MILLIS_OF_SECOND -> MILLIS_OF_SECOND
    org.joda.time.DateTimeFieldType ERA_TYPE -> ERA_TYPE
    org.joda.time.DateTimeFieldType YEAR_OF_ERA_TYPE -> YEAR_OF_ERA_TYPE
    org.joda.time.DateTimeFieldType CENTURY_OF_ERA_TYPE -> CENTURY_OF_ERA_TYPE
    org.joda.time.DateTimeFieldType YEAR_OF_CENTURY_TYPE -> YEAR_OF_CENTURY_TYPE
    org.joda.time.DateTimeFieldType YEAR_TYPE -> YEAR_TYPE
    org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE -> DAY_OF_YEAR_TYPE
    org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE -> MONTH_OF_YEAR_TYPE
    org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE -> DAY_OF_MONTH_TYPE
    org.joda.time.DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE -> WEEKYEAR_OF_CENTURY_TYPE
    org.joda.time.DateTimeFieldType WEEKYEAR_TYPE -> WEEKYEAR_TYPE
    org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE -> WEEK_OF_WEEKYEAR_TYPE
    org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE -> DAY_OF_WEEK_TYPE
    org.joda.time.DateTimeFieldType HALFDAY_OF_DAY_TYPE -> HALFDAY_OF_DAY_TYPE
    org.joda.time.DateTimeFieldType HOUR_OF_HALFDAY_TYPE -> HOUR_OF_HALFDAY_TYPE
    org.joda.time.DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE -> CLOCKHOUR_OF_HALFDAY_TYPE
    org.joda.time.DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE -> CLOCKHOUR_OF_DAY_TYPE
    org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE -> HOUR_OF_DAY_TYPE
    org.joda.time.DateTimeFieldType MINUTE_OF_DAY_TYPE -> MINUTE_OF_DAY_TYPE
    org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE -> MINUTE_OF_HOUR_TYPE
    org.joda.time.DateTimeFieldType SECOND_OF_DAY_TYPE -> SECOND_OF_DAY_TYPE
    org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE -> SECOND_OF_MINUTE_TYPE
    org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE -> MILLIS_OF_DAY_TYPE
    org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE -> MILLIS_OF_SECOND_TYPE
    java.lang.String iName -> iName
    void <init>(java.lang.String) -> <init>
    org.joda.time.DateTimeFieldType millisOfSecond() -> millisOfSecond
    org.joda.time.DateTimeFieldType millisOfDay() -> millisOfDay
    org.joda.time.DateTimeFieldType secondOfMinute() -> secondOfMinute
    org.joda.time.DateTimeFieldType secondOfDay() -> secondOfDay
    org.joda.time.DateTimeFieldType minuteOfHour() -> minuteOfHour
    org.joda.time.DateTimeFieldType minuteOfDay() -> minuteOfDay
    org.joda.time.DateTimeFieldType hourOfDay() -> hourOfDay
    org.joda.time.DateTimeFieldType clockhourOfDay() -> clockhourOfDay
    org.joda.time.DateTimeFieldType hourOfHalfday() -> hourOfHalfday
    org.joda.time.DateTimeFieldType clockhourOfHalfday() -> clockhourOfHalfday
    org.joda.time.DateTimeFieldType halfdayOfDay() -> halfdayOfDay
    org.joda.time.DateTimeFieldType dayOfWeek() -> dayOfWeek
    org.joda.time.DateTimeFieldType dayOfMonth() -> dayOfMonth
    org.joda.time.DateTimeFieldType dayOfYear() -> dayOfYear
    org.joda.time.DateTimeFieldType weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.DateTimeFieldType weekyear() -> weekyear
    org.joda.time.DateTimeFieldType weekyearOfCentury() -> weekyearOfCentury
    org.joda.time.DateTimeFieldType monthOfYear() -> monthOfYear
    org.joda.time.DateTimeFieldType year() -> year
    org.joda.time.DateTimeFieldType yearOfEra() -> yearOfEra
    org.joda.time.DateTimeFieldType yearOfCentury() -> yearOfCentury
    org.joda.time.DateTimeFieldType centuryOfEra() -> centuryOfEra
    org.joda.time.DateTimeFieldType era() -> era
    java.lang.String getName() -> getName
    org.joda.time.DurationFieldType getDurationType() -> getDurationType
    org.joda.time.DurationFieldType getRangeDurationType() -> getRangeDurationType
    org.joda.time.DateTimeField getField(org.joda.time.Chronology) -> getField
    boolean isSupported(org.joda.time.Chronology) -> isSupported
    java.lang.String toString() -> toString
    org.joda.time.DateTimeFieldType access$000() -> access$000
    org.joda.time.DateTimeFieldType access$100() -> access$100
    org.joda.time.DateTimeFieldType access$200() -> access$200
    org.joda.time.DateTimeFieldType access$300() -> access$300
    org.joda.time.DateTimeFieldType access$400() -> access$400
    org.joda.time.DateTimeFieldType access$500() -> access$500
    org.joda.time.DateTimeFieldType access$600() -> access$600
    org.joda.time.DateTimeFieldType access$700() -> access$700
    org.joda.time.DateTimeFieldType access$800() -> access$800
    org.joda.time.DateTimeFieldType access$900() -> access$900
    org.joda.time.DateTimeFieldType access$1000() -> access$1000
    org.joda.time.DateTimeFieldType access$1100() -> access$1100
    org.joda.time.DateTimeFieldType access$1200() -> access$1200
    org.joda.time.DateTimeFieldType access$1300() -> access$1300
    org.joda.time.DateTimeFieldType access$1400() -> access$1400
    org.joda.time.DateTimeFieldType access$1500() -> access$1500
    org.joda.time.DateTimeFieldType access$1600() -> access$1600
    org.joda.time.DateTimeFieldType access$1700() -> access$1700
    org.joda.time.DateTimeFieldType access$1800() -> access$1800
    org.joda.time.DateTimeFieldType access$1900() -> access$1900
    org.joda.time.DateTimeFieldType access$2000() -> access$2000
    org.joda.time.DateTimeFieldType access$2100() -> access$2100
    org.joda.time.DateTimeFieldType access$2200() -> access$2200
    void <clinit>() -> <clinit>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType -> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:
    long serialVersionUID -> serialVersionUID
    byte iOrdinal -> iOrdinal
    org.joda.time.DurationFieldType iUnitType -> iUnitType
    org.joda.time.DurationFieldType iRangeType -> iRangeType
    void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType) -> <init>
    org.joda.time.DurationFieldType getDurationType() -> getDurationType
    org.joda.time.DurationFieldType getRangeDurationType() -> getRangeDurationType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.joda.time.DateTimeField getField(org.joda.time.Chronology) -> getField
    java.lang.Object readResolve() -> readResolve
org.joda.time.DateTimeUtils -> org.joda.time.DateTimeUtils:
    org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER -> SYSTEM_MILLIS_PROVIDER
    org.joda.time.DateTimeUtils$MillisProvider cMillisProvider -> cMillisProvider
    java.util.Map cZoneNames -> cZoneNames
    void put(java.util.Map,java.lang.String,java.lang.String) -> put
    void <init>() -> <init>
    long currentTimeMillis() -> currentTimeMillis
    void setCurrentMillisSystem() -> setCurrentMillisSystem
    void setCurrentMillisFixed(long) -> setCurrentMillisFixed
    void setCurrentMillisOffset(long) -> setCurrentMillisOffset
    void setCurrentMillisProvider(org.joda.time.DateTimeUtils$MillisProvider) -> setCurrentMillisProvider
    void checkPermission() -> checkPermission
    long getInstantMillis(org.joda.time.ReadableInstant) -> getInstantMillis
    org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant) -> getInstantChronology
    org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> getIntervalChronology
    org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval) -> getIntervalChronology
    org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval) -> getReadableInterval
    org.joda.time.Chronology getChronology(org.joda.time.Chronology) -> getChronology
    org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone) -> getZone
    org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType) -> getPeriodType
    long getDurationMillis(org.joda.time.ReadableDuration) -> getDurationMillis
    boolean isContiguous(org.joda.time.ReadablePartial) -> isContiguous
    java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale) -> getDateFormatSymbols
    java.util.Map getDefaultTimeZoneNames() -> getDefaultTimeZoneNames
    void setDefaultTimeZoneNames(java.util.Map) -> setDefaultTimeZoneNames
    double toJulianDay(long) -> toJulianDay
    long toJulianDayNumber(long) -> toJulianDayNumber
    long fromJulianDay(double) -> fromJulianDay
    void <clinit>() -> <clinit>
org.joda.time.DateTimeUtils$FixedMillisProvider -> org.joda.time.DateTimeUtils$FixedMillisProvider:
    long iMillis -> iMillis
    void <init>(long) -> <init>
    long getMillis() -> getMillis
org.joda.time.DateTimeUtils$MillisProvider -> org.joda.time.DateTimeUtils$MillisProvider:
    long getMillis() -> getMillis
org.joda.time.DateTimeUtils$OffsetMillisProvider -> org.joda.time.DateTimeUtils$OffsetMillisProvider:
    long iMillis -> iMillis
    void <init>(long) -> <init>
    long getMillis() -> getMillis
org.joda.time.DateTimeUtils$SystemMillisProvider -> org.joda.time.DateTimeUtils$SystemMillisProvider:
    void <init>() -> <init>
    long getMillis() -> getMillis
org.joda.time.DateTimeZone -> org.joda.time.DateTimeZone:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeZone UTC -> UTC
    int MAX_MILLIS -> MAX_MILLIS
    org.joda.time.tz.Provider cProvider -> cProvider
    org.joda.time.tz.NameProvider cNameProvider -> cNameProvider
    java.util.Set cAvailableIDs -> cAvailableIDs
    org.joda.time.DateTimeZone cDefault -> cDefault
    org.joda.time.format.DateTimeFormatter cOffsetFormatter -> cOffsetFormatter
    java.util.Map iFixedOffsetCache -> iFixedOffsetCache
    java.util.Map cZoneIdConversion -> cZoneIdConversion
    java.lang.String iID -> iID
    org.joda.time.DateTimeZone getDefault() -> getDefault
    void setDefault(org.joda.time.DateTimeZone) -> setDefault
    org.joda.time.DateTimeZone forID(java.lang.String) -> forID
    org.joda.time.DateTimeZone forOffsetHours(int) -> forOffsetHours
    org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int) -> forOffsetHoursMinutes
    org.joda.time.DateTimeZone forOffsetMillis(int) -> forOffsetMillis
    org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone) -> forTimeZone
    org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int) -> fixedOffsetZone
    java.util.Set getAvailableIDs() -> getAvailableIDs
    org.joda.time.tz.Provider getProvider() -> getProvider
    void setProvider(org.joda.time.tz.Provider) -> setProvider
    void setProvider0(org.joda.time.tz.Provider) -> setProvider0
    org.joda.time.tz.Provider getDefaultProvider() -> getDefaultProvider
    org.joda.time.tz.NameProvider getNameProvider() -> getNameProvider
    void setNameProvider(org.joda.time.tz.NameProvider) -> setNameProvider
    void setNameProvider0(org.joda.time.tz.NameProvider) -> setNameProvider0
    org.joda.time.tz.NameProvider getDefaultNameProvider() -> getDefaultNameProvider
    java.lang.String getConvertedId(java.lang.String) -> getConvertedId
    int parseOffset(java.lang.String) -> parseOffset
    java.lang.String printOffset(int) -> printOffset
    org.joda.time.format.DateTimeFormatter offsetFormatter() -> offsetFormatter
    void <init>(java.lang.String) -> <init>
    java.lang.String getID() -> getID
    java.lang.String getNameKey(long) -> getNameKey
    java.lang.String getShortName(long) -> getShortName
    java.lang.String getShortName(long,java.util.Locale) -> getShortName
    java.lang.String getName(long) -> getName
    java.lang.String getName(long,java.util.Locale) -> getName
    int getOffset(long) -> getOffset
    int getOffset(org.joda.time.ReadableInstant) -> getOffset
    int getStandardOffset(long) -> getStandardOffset
    boolean isStandardOffset(long) -> isStandardOffset
    int getOffsetFromLocal(long) -> getOffsetFromLocal
    long convertUTCToLocal(long) -> convertUTCToLocal
    long convertLocalToUTC(long,boolean,long) -> convertLocalToUTC
    long convertLocalToUTC(long,boolean) -> convertLocalToUTC
    long getMillisKeepLocal(org.joda.time.DateTimeZone,long) -> getMillisKeepLocal
    boolean isLocalDateTimeGap(org.joda.time.LocalDateTime) -> isLocalDateTimeGap
    long adjustOffset(long,boolean) -> adjustOffset
    boolean isFixed() -> isFixed
    long nextTransition(long) -> nextTransition
    long previousTransition(long) -> previousTransition
    java.util.TimeZone toTimeZone() -> toTimeZone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    void <clinit>() -> <clinit>
org.joda.time.DateTimeZone$1 -> org.joda.time.DateTimeZone$1:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    org.joda.time.DateTimeZone getZone() -> getZone
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    java.lang.String toString() -> toString
org.joda.time.DateTimeZone$Stub -> org.joda.time.DateTimeZone$Stub:
    long serialVersionUID -> serialVersionUID
    java.lang.String iID -> iID
    void <init>(java.lang.String) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
org.joda.time.Days -> org.joda.time.Days:
    org.joda.time.Days ZERO -> ZERO
    org.joda.time.Days ONE -> ONE
    org.joda.time.Days TWO -> TWO
    org.joda.time.Days THREE -> THREE
    org.joda.time.Days FOUR -> FOUR
    org.joda.time.Days FIVE -> FIVE
    org.joda.time.Days SIX -> SIX
    org.joda.time.Days SEVEN -> SEVEN
    org.joda.time.Days MAX_VALUE -> MAX_VALUE
    org.joda.time.Days MIN_VALUE -> MIN_VALUE
    org.joda.time.format.PeriodFormatter PARSER -> PARSER
    long serialVersionUID -> serialVersionUID
    org.joda.time.Days days(int) -> days
    org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> daysBetween
    org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> daysBetween
    org.joda.time.Days daysIn(org.joda.time.ReadableInterval) -> daysIn
    org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod) -> standardDaysIn
    org.joda.time.Days parseDays(java.lang.String) -> parseDays
    void <init>(int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    org.joda.time.Weeks toStandardWeeks() -> toStandardWeeks
    org.joda.time.Hours toStandardHours() -> toStandardHours
    org.joda.time.Minutes toStandardMinutes() -> toStandardMinutes
    org.joda.time.Seconds toStandardSeconds() -> toStandardSeconds
    org.joda.time.Duration toStandardDuration() -> toStandardDuration
    int getDays() -> getDays
    org.joda.time.Days plus(int) -> plus
    org.joda.time.Days plus(org.joda.time.Days) -> plus
    org.joda.time.Days minus(int) -> minus
    org.joda.time.Days minus(org.joda.time.Days) -> minus
    org.joda.time.Days multipliedBy(int) -> multipliedBy
    org.joda.time.Days dividedBy(int) -> dividedBy
    org.joda.time.Days negated() -> negated
    boolean isGreaterThan(org.joda.time.Days) -> isGreaterThan
    boolean isLessThan(org.joda.time.Days) -> isLessThan
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.Duration -> org.joda.time.Duration:
    org.joda.time.Duration ZERO -> ZERO
    long serialVersionUID -> serialVersionUID
    org.joda.time.Duration parse(java.lang.String) -> parse
    org.joda.time.Duration standardDays(long) -> standardDays
    org.joda.time.Duration standardHours(long) -> standardHours
    org.joda.time.Duration standardMinutes(long) -> standardMinutes
    org.joda.time.Duration standardSeconds(long) -> standardSeconds
    org.joda.time.Duration millis(long) -> millis
    void <init>(long) -> <init>
    void <init>(long,long) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> <init>
    void <init>(java.lang.Object) -> <init>
    long getStandardDays() -> getStandardDays
    long getStandardHours() -> getStandardHours
    long getStandardMinutes() -> getStandardMinutes
    long getStandardSeconds() -> getStandardSeconds
    org.joda.time.Duration toDuration() -> toDuration
    org.joda.time.Days toStandardDays() -> toStandardDays
    org.joda.time.Hours toStandardHours() -> toStandardHours
    org.joda.time.Minutes toStandardMinutes() -> toStandardMinutes
    org.joda.time.Seconds toStandardSeconds() -> toStandardSeconds
    org.joda.time.Duration withMillis(long) -> withMillis
    org.joda.time.Duration withDurationAdded(long,int) -> withDurationAdded
    org.joda.time.Duration withDurationAdded(org.joda.time.ReadableDuration,int) -> withDurationAdded
    org.joda.time.Duration plus(long) -> plus
    org.joda.time.Duration plus(org.joda.time.ReadableDuration) -> plus
    org.joda.time.Duration minus(long) -> minus
    org.joda.time.Duration minus(org.joda.time.ReadableDuration) -> minus
    void <clinit>() -> <clinit>
org.joda.time.DurationField -> org.joda.time.DurationField:
    void <init>() -> <init>
    org.joda.time.DurationFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    boolean isPrecise() -> isPrecise
    long getUnitMillis() -> getUnitMillis
    int getValue(long) -> getValue
    long getValueAsLong(long) -> getValueAsLong
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int) -> getMillis
    long getMillis(long) -> getMillis
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    long subtract(long,int) -> subtract
    long subtract(long,long) -> subtract
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    java.lang.String toString() -> toString
org.joda.time.DurationFieldType -> org.joda.time.DurationFieldType:
    long serialVersionUID -> serialVersionUID
    byte ERAS -> ERAS
    byte CENTURIES -> CENTURIES
    byte WEEKYEARS -> WEEKYEARS
    byte YEARS -> YEARS
    byte MONTHS -> MONTHS
    byte WEEKS -> WEEKS
    byte DAYS -> DAYS
    byte HALFDAYS -> HALFDAYS
    byte HOURS -> HOURS
    byte MINUTES -> MINUTES
    byte SECONDS -> SECONDS
    byte MILLIS -> MILLIS
    org.joda.time.DurationFieldType ERAS_TYPE -> ERAS_TYPE
    org.joda.time.DurationFieldType CENTURIES_TYPE -> CENTURIES_TYPE
    org.joda.time.DurationFieldType WEEKYEARS_TYPE -> WEEKYEARS_TYPE
    org.joda.time.DurationFieldType YEARS_TYPE -> YEARS_TYPE
    org.joda.time.DurationFieldType MONTHS_TYPE -> MONTHS_TYPE
    org.joda.time.DurationFieldType WEEKS_TYPE -> WEEKS_TYPE
    org.joda.time.DurationFieldType DAYS_TYPE -> DAYS_TYPE
    org.joda.time.DurationFieldType HALFDAYS_TYPE -> HALFDAYS_TYPE
    org.joda.time.DurationFieldType HOURS_TYPE -> HOURS_TYPE
    org.joda.time.DurationFieldType MINUTES_TYPE -> MINUTES_TYPE
    org.joda.time.DurationFieldType SECONDS_TYPE -> SECONDS_TYPE
    org.joda.time.DurationFieldType MILLIS_TYPE -> MILLIS_TYPE
    java.lang.String iName -> iName
    void <init>(java.lang.String) -> <init>
    org.joda.time.DurationFieldType millis() -> millis
    org.joda.time.DurationFieldType seconds() -> seconds
    org.joda.time.DurationFieldType minutes() -> minutes
    org.joda.time.DurationFieldType hours() -> hours
    org.joda.time.DurationFieldType halfdays() -> halfdays
    org.joda.time.DurationFieldType days() -> days
    org.joda.time.DurationFieldType weeks() -> weeks
    org.joda.time.DurationFieldType weekyears() -> weekyears
    org.joda.time.DurationFieldType months() -> months
    org.joda.time.DurationFieldType years() -> years
    org.joda.time.DurationFieldType centuries() -> centuries
    org.joda.time.DurationFieldType eras() -> eras
    java.lang.String getName() -> getName
    org.joda.time.DurationField getField(org.joda.time.Chronology) -> getField
    boolean isSupported(org.joda.time.Chronology) -> isSupported
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.DurationFieldType$StandardDurationFieldType -> org.joda.time.DurationFieldType$StandardDurationFieldType:
    long serialVersionUID -> serialVersionUID
    byte iOrdinal -> iOrdinal
    void <init>(java.lang.String,byte) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.joda.time.DurationField getField(org.joda.time.Chronology) -> getField
    java.lang.Object readResolve() -> readResolve
org.joda.time.Hours -> org.joda.time.Hours:
    org.joda.time.Hours ZERO -> ZERO
    org.joda.time.Hours ONE -> ONE
    org.joda.time.Hours TWO -> TWO
    org.joda.time.Hours THREE -> THREE
    org.joda.time.Hours FOUR -> FOUR
    org.joda.time.Hours FIVE -> FIVE
    org.joda.time.Hours SIX -> SIX
    org.joda.time.Hours SEVEN -> SEVEN
    org.joda.time.Hours EIGHT -> EIGHT
    org.joda.time.Hours MAX_VALUE -> MAX_VALUE
    org.joda.time.Hours MIN_VALUE -> MIN_VALUE
    org.joda.time.format.PeriodFormatter PARSER -> PARSER
    long serialVersionUID -> serialVersionUID
    org.joda.time.Hours hours(int) -> hours
    org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> hoursBetween
    org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> hoursBetween
    org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval) -> hoursIn
    org.joda.time.Hours standardHoursIn(org.joda.time.ReadablePeriod) -> standardHoursIn
    org.joda.time.Hours parseHours(java.lang.String) -> parseHours
    void <init>(int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    org.joda.time.Weeks toStandardWeeks() -> toStandardWeeks
    org.joda.time.Days toStandardDays() -> toStandardDays
    org.joda.time.Minutes toStandardMinutes() -> toStandardMinutes
    org.joda.time.Seconds toStandardSeconds() -> toStandardSeconds
    org.joda.time.Duration toStandardDuration() -> toStandardDuration
    int getHours() -> getHours
    org.joda.time.Hours plus(int) -> plus
    org.joda.time.Hours plus(org.joda.time.Hours) -> plus
    org.joda.time.Hours minus(int) -> minus
    org.joda.time.Hours minus(org.joda.time.Hours) -> minus
    org.joda.time.Hours multipliedBy(int) -> multipliedBy
    org.joda.time.Hours dividedBy(int) -> dividedBy
    org.joda.time.Hours negated() -> negated
    boolean isGreaterThan(org.joda.time.Hours) -> isGreaterThan
    boolean isLessThan(org.joda.time.Hours) -> isLessThan
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.IllegalFieldValueException -> org.joda.time.IllegalFieldValueException:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeFieldType iDateTimeFieldType -> iDateTimeFieldType
    org.joda.time.DurationFieldType iDurationFieldType -> iDurationFieldType
    java.lang.String iFieldName -> iFieldName
    java.lang.Number iNumberValue -> iNumberValue
    java.lang.String iStringValue -> iStringValue
    java.lang.Number iLowerBound -> iLowerBound
    java.lang.Number iUpperBound -> iUpperBound
    java.lang.String iMessage -> iMessage
    java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String) -> createMessage
    java.lang.String createMessage(java.lang.String,java.lang.String) -> createMessage
    void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number) -> <init>
    void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String) -> <init>
    void <init>(org.joda.time.DurationFieldType,java.lang.Number,java.lang.Number,java.lang.Number) -> <init>
    void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number) -> <init>
    void <init>(org.joda.time.DateTimeFieldType,java.lang.String) -> <init>
    void <init>(org.joda.time.DurationFieldType,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    org.joda.time.DateTimeFieldType getDateTimeFieldType() -> getDateTimeFieldType
    org.joda.time.DurationFieldType getDurationFieldType() -> getDurationFieldType
    java.lang.String getFieldName() -> getFieldName
    java.lang.Number getIllegalNumberValue() -> getIllegalNumberValue
    java.lang.String getIllegalStringValue() -> getIllegalStringValue
    java.lang.String getIllegalValueAsString() -> getIllegalValueAsString
    java.lang.Number getLowerBound() -> getLowerBound
    java.lang.Number getUpperBound() -> getUpperBound
    java.lang.String getMessage() -> getMessage
    void prependMessage(java.lang.String) -> prependMessage
org.joda.time.IllegalInstantException -> org.joda.time.IllegalInstantException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(long,java.lang.String) -> <init>
    java.lang.String createMessage(long,java.lang.String) -> createMessage
    boolean isIllegalInstant(java.lang.Throwable) -> isIllegalInstant
org.joda.time.Instant -> org.joda.time.Instant:
    long serialVersionUID -> serialVersionUID
    long iMillis -> iMillis
    org.joda.time.Instant now() -> now
    org.joda.time.Instant parse(java.lang.String) -> parse
    org.joda.time.Instant parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    void <init>() -> <init>
    void <init>(long) -> <init>
    void <init>(java.lang.Object) -> <init>
    org.joda.time.Instant toInstant() -> toInstant
    org.joda.time.Instant withMillis(long) -> withMillis
    org.joda.time.Instant withDurationAdded(long,int) -> withDurationAdded
    org.joda.time.Instant withDurationAdded(org.joda.time.ReadableDuration,int) -> withDurationAdded
    org.joda.time.Instant plus(long) -> plus
    org.joda.time.Instant plus(org.joda.time.ReadableDuration) -> plus
    org.joda.time.Instant minus(long) -> minus
    org.joda.time.Instant minus(org.joda.time.ReadableDuration) -> minus
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.DateTime toDateTime() -> toDateTime
    org.joda.time.DateTime toDateTimeISO() -> toDateTimeISO
    org.joda.time.MutableDateTime toMutableDateTime() -> toMutableDateTime
    org.joda.time.MutableDateTime toMutableDateTimeISO() -> toMutableDateTimeISO
org.joda.time.Interval -> org.joda.time.Interval:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Interval parse(java.lang.String) -> parse
    void <init>(long,long) -> <init>
    void <init>(long,long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,long,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod) -> <init>
    void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    org.joda.time.Interval toInterval() -> toInterval
    org.joda.time.Interval overlap(org.joda.time.ReadableInterval) -> overlap
    org.joda.time.Interval gap(org.joda.time.ReadableInterval) -> gap
    boolean abuts(org.joda.time.ReadableInterval) -> abuts
    org.joda.time.Interval withChronology(org.joda.time.Chronology) -> withChronology
    org.joda.time.Interval withStartMillis(long) -> withStartMillis
    org.joda.time.Interval withStart(org.joda.time.ReadableInstant) -> withStart
    org.joda.time.Interval withEndMillis(long) -> withEndMillis
    org.joda.time.Interval withEnd(org.joda.time.ReadableInstant) -> withEnd
    org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration) -> withDurationAfterStart
    org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration) -> withDurationBeforeEnd
    org.joda.time.Interval withPeriodAfterStart(org.joda.time.ReadablePeriod) -> withPeriodAfterStart
    org.joda.time.Interval withPeriodBeforeEnd(org.joda.time.ReadablePeriod) -> withPeriodBeforeEnd
org.joda.time.JodaTimePermission -> org.joda.time.JodaTimePermission:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.joda.time.LocalDate -> org.joda.time.LocalDate:
    long serialVersionUID -> serialVersionUID
    int YEAR -> YEAR
    int MONTH_OF_YEAR -> MONTH_OF_YEAR
    int DAY_OF_MONTH -> DAY_OF_MONTH
    java.util.Set DATE_DURATION_TYPES -> DATE_DURATION_TYPES
    long iLocalMillis -> iLocalMillis
    org.joda.time.Chronology iChronology -> iChronology
    int iHash -> iHash
    org.joda.time.LocalDate now() -> now
    org.joda.time.LocalDate now(org.joda.time.DateTimeZone) -> now
    org.joda.time.LocalDate now(org.joda.time.Chronology) -> now
    org.joda.time.LocalDate parse(java.lang.String) -> parse
    org.joda.time.LocalDate parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    org.joda.time.LocalDate fromCalendarFields(java.util.Calendar) -> fromCalendarFields
    org.joda.time.LocalDate fromDateFields(java.util.Date) -> fromDateFields
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.DateTimeZone) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,org.joda.time.Chronology) -> <init>
    java.lang.Object readResolve() -> readResolve
    int size() -> size
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    int getValue(int) -> getValue
    int get(org.joda.time.DateTimeFieldType) -> get
    boolean isSupported(org.joda.time.DateTimeFieldType) -> isSupported
    boolean isSupported(org.joda.time.DurationFieldType) -> isSupported
    long getLocalMillis() -> getLocalMillis
    org.joda.time.Chronology getChronology() -> getChronology
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.joda.time.ReadablePartial) -> compareTo
    org.joda.time.DateTime toDateTimeAtStartOfDay() -> toDateTimeAtStartOfDay
    org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone) -> toDateTimeAtStartOfDay
    org.joda.time.DateTime toDateTimeAtMidnight() -> toDateTimeAtMidnight
    org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone) -> toDateTimeAtMidnight
    org.joda.time.DateTime toDateTimeAtCurrentTime() -> toDateTimeAtCurrentTime
    org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone) -> toDateTimeAtCurrentTime
    org.joda.time.DateMidnight toDateMidnight() -> toDateMidnight
    org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone) -> toDateMidnight
    org.joda.time.LocalDateTime toLocalDateTime(org.joda.time.LocalTime) -> toLocalDateTime
    org.joda.time.DateTime toDateTime(org.joda.time.LocalTime) -> toDateTime
    org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone) -> toDateTime
    org.joda.time.Interval toInterval() -> toInterval
    org.joda.time.Interval toInterval(org.joda.time.DateTimeZone) -> toInterval
    java.util.Date toDate() -> toDate
    org.joda.time.LocalDate withLocalMillis(long) -> withLocalMillis
    org.joda.time.LocalDate withFields(org.joda.time.ReadablePartial) -> withFields
    org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.LocalDate withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.LocalDate plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.LocalDate plusYears(int) -> plusYears
    org.joda.time.LocalDate plusMonths(int) -> plusMonths
    org.joda.time.LocalDate plusWeeks(int) -> plusWeeks
    org.joda.time.LocalDate plusDays(int) -> plusDays
    org.joda.time.LocalDate minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.LocalDate minusYears(int) -> minusYears
    org.joda.time.LocalDate minusMonths(int) -> minusMonths
    org.joda.time.LocalDate minusWeeks(int) -> minusWeeks
    org.joda.time.LocalDate minusDays(int) -> minusDays
    org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType) -> property
    int getEra() -> getEra
    int getCenturyOfEra() -> getCenturyOfEra
    int getYearOfEra() -> getYearOfEra
    int getYearOfCentury() -> getYearOfCentury
    int getYear() -> getYear
    int getWeekyear() -> getWeekyear
    int getMonthOfYear() -> getMonthOfYear
    int getWeekOfWeekyear() -> getWeekOfWeekyear
    int getDayOfYear() -> getDayOfYear
    int getDayOfMonth() -> getDayOfMonth
    int getDayOfWeek() -> getDayOfWeek
    org.joda.time.LocalDate withEra(int) -> withEra
    org.joda.time.LocalDate withCenturyOfEra(int) -> withCenturyOfEra
    org.joda.time.LocalDate withYearOfEra(int) -> withYearOfEra
    org.joda.time.LocalDate withYearOfCentury(int) -> withYearOfCentury
    org.joda.time.LocalDate withYear(int) -> withYear
    org.joda.time.LocalDate withWeekyear(int) -> withWeekyear
    org.joda.time.LocalDate withMonthOfYear(int) -> withMonthOfYear
    org.joda.time.LocalDate withWeekOfWeekyear(int) -> withWeekOfWeekyear
    org.joda.time.LocalDate withDayOfYear(int) -> withDayOfYear
    org.joda.time.LocalDate withDayOfMonth(int) -> withDayOfMonth
    org.joda.time.LocalDate withDayOfWeek(int) -> withDayOfWeek
    org.joda.time.LocalDate$Property era() -> era
    org.joda.time.LocalDate$Property centuryOfEra() -> centuryOfEra
    org.joda.time.LocalDate$Property yearOfCentury() -> yearOfCentury
    org.joda.time.LocalDate$Property yearOfEra() -> yearOfEra
    org.joda.time.LocalDate$Property year() -> year
    org.joda.time.LocalDate$Property weekyear() -> weekyear
    org.joda.time.LocalDate$Property monthOfYear() -> monthOfYear
    org.joda.time.LocalDate$Property weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.LocalDate$Property dayOfYear() -> dayOfYear
    org.joda.time.LocalDate$Property dayOfMonth() -> dayOfMonth
    org.joda.time.LocalDate$Property dayOfWeek() -> dayOfWeek
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
org.joda.time.LocalDate$Property -> org.joda.time.LocalDate$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.LocalDate iInstant -> iInstant
    org.joda.time.DateTimeField iField -> iField
    void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    org.joda.time.DateTimeField getField() -> getField
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.LocalDate getLocalDate() -> getLocalDate
    org.joda.time.LocalDate addToCopy(int) -> addToCopy
    org.joda.time.LocalDate addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.LocalDate setCopy(int) -> setCopy
    org.joda.time.LocalDate setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.LocalDate setCopy(java.lang.String) -> setCopy
    org.joda.time.LocalDate withMaximumValue() -> withMaximumValue
    org.joda.time.LocalDate withMinimumValue() -> withMinimumValue
    org.joda.time.LocalDate roundFloorCopy() -> roundFloorCopy
    org.joda.time.LocalDate roundCeilingCopy() -> roundCeilingCopy
    org.joda.time.LocalDate roundHalfFloorCopy() -> roundHalfFloorCopy
    org.joda.time.LocalDate roundHalfCeilingCopy() -> roundHalfCeilingCopy
    org.joda.time.LocalDate roundHalfEvenCopy() -> roundHalfEvenCopy
org.joda.time.LocalDateTime -> org.joda.time.LocalDateTime:
    long serialVersionUID -> serialVersionUID
    int YEAR -> YEAR
    int MONTH_OF_YEAR -> MONTH_OF_YEAR
    int DAY_OF_MONTH -> DAY_OF_MONTH
    int MILLIS_OF_DAY -> MILLIS_OF_DAY
    long iLocalMillis -> iLocalMillis
    org.joda.time.Chronology iChronology -> iChronology
    org.joda.time.LocalDateTime now() -> now
    org.joda.time.LocalDateTime now(org.joda.time.DateTimeZone) -> now
    org.joda.time.LocalDateTime now(org.joda.time.Chronology) -> now
    org.joda.time.LocalDateTime parse(java.lang.String) -> parse
    org.joda.time.LocalDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar) -> fromCalendarFields
    org.joda.time.LocalDateTime fromDateFields(java.util.Date) -> fromDateFields
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.DateTimeZone) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology) -> <init>
    java.lang.Object readResolve() -> readResolve
    int size() -> size
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    int getValue(int) -> getValue
    int get(org.joda.time.DateTimeFieldType) -> get
    boolean isSupported(org.joda.time.DateTimeFieldType) -> isSupported
    boolean isSupported(org.joda.time.DurationFieldType) -> isSupported
    long getLocalMillis() -> getLocalMillis
    org.joda.time.Chronology getChronology() -> getChronology
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.joda.time.ReadablePartial) -> compareTo
    org.joda.time.DateTime toDateTime() -> toDateTime
    org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone) -> toDateTime
    org.joda.time.LocalDate toLocalDate() -> toLocalDate
    org.joda.time.LocalTime toLocalTime() -> toLocalTime
    java.util.Date toDate() -> toDate
    java.util.Date toDate(java.util.TimeZone) -> toDate
    java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone) -> correctDstTransition
    org.joda.time.LocalDateTime withLocalMillis(long) -> withLocalMillis
    org.joda.time.LocalDateTime withDate(int,int,int) -> withDate
    org.joda.time.LocalDateTime withTime(int,int,int,int) -> withTime
    org.joda.time.LocalDateTime withFields(org.joda.time.ReadablePartial) -> withFields
    org.joda.time.LocalDateTime withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.LocalDateTime withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.LocalDateTime withDurationAdded(org.joda.time.ReadableDuration,int) -> withDurationAdded
    org.joda.time.LocalDateTime withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.LocalDateTime plus(org.joda.time.ReadableDuration) -> plus
    org.joda.time.LocalDateTime plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.LocalDateTime plusYears(int) -> plusYears
    org.joda.time.LocalDateTime plusMonths(int) -> plusMonths
    org.joda.time.LocalDateTime plusWeeks(int) -> plusWeeks
    org.joda.time.LocalDateTime plusDays(int) -> plusDays
    org.joda.time.LocalDateTime plusHours(int) -> plusHours
    org.joda.time.LocalDateTime plusMinutes(int) -> plusMinutes
    org.joda.time.LocalDateTime plusSeconds(int) -> plusSeconds
    org.joda.time.LocalDateTime plusMillis(int) -> plusMillis
    org.joda.time.LocalDateTime minus(org.joda.time.ReadableDuration) -> minus
    org.joda.time.LocalDateTime minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.LocalDateTime minusYears(int) -> minusYears
    org.joda.time.LocalDateTime minusMonths(int) -> minusMonths
    org.joda.time.LocalDateTime minusWeeks(int) -> minusWeeks
    org.joda.time.LocalDateTime minusDays(int) -> minusDays
    org.joda.time.LocalDateTime minusHours(int) -> minusHours
    org.joda.time.LocalDateTime minusMinutes(int) -> minusMinutes
    org.joda.time.LocalDateTime minusSeconds(int) -> minusSeconds
    org.joda.time.LocalDateTime minusMillis(int) -> minusMillis
    org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType) -> property
    int getEra() -> getEra
    int getCenturyOfEra() -> getCenturyOfEra
    int getYearOfEra() -> getYearOfEra
    int getYearOfCentury() -> getYearOfCentury
    int getYear() -> getYear
    int getWeekyear() -> getWeekyear
    int getMonthOfYear() -> getMonthOfYear
    int getWeekOfWeekyear() -> getWeekOfWeekyear
    int getDayOfYear() -> getDayOfYear
    int getDayOfMonth() -> getDayOfMonth
    int getDayOfWeek() -> getDayOfWeek
    int getHourOfDay() -> getHourOfDay
    int getMinuteOfHour() -> getMinuteOfHour
    int getSecondOfMinute() -> getSecondOfMinute
    int getMillisOfSecond() -> getMillisOfSecond
    int getMillisOfDay() -> getMillisOfDay
    org.joda.time.LocalDateTime withEra(int) -> withEra
    org.joda.time.LocalDateTime withCenturyOfEra(int) -> withCenturyOfEra
    org.joda.time.LocalDateTime withYearOfEra(int) -> withYearOfEra
    org.joda.time.LocalDateTime withYearOfCentury(int) -> withYearOfCentury
    org.joda.time.LocalDateTime withYear(int) -> withYear
    org.joda.time.LocalDateTime withWeekyear(int) -> withWeekyear
    org.joda.time.LocalDateTime withMonthOfYear(int) -> withMonthOfYear
    org.joda.time.LocalDateTime withWeekOfWeekyear(int) -> withWeekOfWeekyear
    org.joda.time.LocalDateTime withDayOfYear(int) -> withDayOfYear
    org.joda.time.LocalDateTime withDayOfMonth(int) -> withDayOfMonth
    org.joda.time.LocalDateTime withDayOfWeek(int) -> withDayOfWeek
    org.joda.time.LocalDateTime withHourOfDay(int) -> withHourOfDay
    org.joda.time.LocalDateTime withMinuteOfHour(int) -> withMinuteOfHour
    org.joda.time.LocalDateTime withSecondOfMinute(int) -> withSecondOfMinute
    org.joda.time.LocalDateTime withMillisOfSecond(int) -> withMillisOfSecond
    org.joda.time.LocalDateTime withMillisOfDay(int) -> withMillisOfDay
    org.joda.time.LocalDateTime$Property era() -> era
    org.joda.time.LocalDateTime$Property centuryOfEra() -> centuryOfEra
    org.joda.time.LocalDateTime$Property yearOfCentury() -> yearOfCentury
    org.joda.time.LocalDateTime$Property yearOfEra() -> yearOfEra
    org.joda.time.LocalDateTime$Property year() -> year
    org.joda.time.LocalDateTime$Property weekyear() -> weekyear
    org.joda.time.LocalDateTime$Property monthOfYear() -> monthOfYear
    org.joda.time.LocalDateTime$Property weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.LocalDateTime$Property dayOfYear() -> dayOfYear
    org.joda.time.LocalDateTime$Property dayOfMonth() -> dayOfMonth
    org.joda.time.LocalDateTime$Property dayOfWeek() -> dayOfWeek
    org.joda.time.LocalDateTime$Property hourOfDay() -> hourOfDay
    org.joda.time.LocalDateTime$Property minuteOfHour() -> minuteOfHour
    org.joda.time.LocalDateTime$Property secondOfMinute() -> secondOfMinute
    org.joda.time.LocalDateTime$Property millisOfSecond() -> millisOfSecond
    org.joda.time.LocalDateTime$Property millisOfDay() -> millisOfDay
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.LocalDateTime$Property -> org.joda.time.LocalDateTime$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.LocalDateTime iInstant -> iInstant
    org.joda.time.DateTimeField iField -> iField
    void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    org.joda.time.DateTimeField getField() -> getField
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.LocalDateTime getLocalDateTime() -> getLocalDateTime
    org.joda.time.LocalDateTime addToCopy(int) -> addToCopy
    org.joda.time.LocalDateTime addToCopy(long) -> addToCopy
    org.joda.time.LocalDateTime addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.LocalDateTime setCopy(int) -> setCopy
    org.joda.time.LocalDateTime setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.LocalDateTime setCopy(java.lang.String) -> setCopy
    org.joda.time.LocalDateTime withMaximumValue() -> withMaximumValue
    org.joda.time.LocalDateTime withMinimumValue() -> withMinimumValue
    org.joda.time.LocalDateTime roundFloorCopy() -> roundFloorCopy
    org.joda.time.LocalDateTime roundCeilingCopy() -> roundCeilingCopy
    org.joda.time.LocalDateTime roundHalfFloorCopy() -> roundHalfFloorCopy
    org.joda.time.LocalDateTime roundHalfCeilingCopy() -> roundHalfCeilingCopy
    org.joda.time.LocalDateTime roundHalfEvenCopy() -> roundHalfEvenCopy
org.joda.time.LocalTime -> org.joda.time.LocalTime:
    long serialVersionUID -> serialVersionUID
    org.joda.time.LocalTime MIDNIGHT -> MIDNIGHT
    int HOUR_OF_DAY -> HOUR_OF_DAY
    int MINUTE_OF_HOUR -> MINUTE_OF_HOUR
    int SECOND_OF_MINUTE -> SECOND_OF_MINUTE
    int MILLIS_OF_SECOND -> MILLIS_OF_SECOND
    java.util.Set TIME_DURATION_TYPES -> TIME_DURATION_TYPES
    long iLocalMillis -> iLocalMillis
    org.joda.time.Chronology iChronology -> iChronology
    org.joda.time.LocalTime now() -> now
    org.joda.time.LocalTime now(org.joda.time.DateTimeZone) -> now
    org.joda.time.LocalTime now(org.joda.time.Chronology) -> now
    org.joda.time.LocalTime parse(java.lang.String) -> parse
    org.joda.time.LocalTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    org.joda.time.LocalTime fromMillisOfDay(long) -> fromMillisOfDay
    org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology) -> fromMillisOfDay
    org.joda.time.LocalTime fromCalendarFields(java.util.Calendar) -> fromCalendarFields
    org.joda.time.LocalTime fromDateFields(java.util.Date) -> fromDateFields
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.DateTimeZone) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,int) -> <init>
    void <init>(int,int,int,int,org.joda.time.Chronology) -> <init>
    java.lang.Object readResolve() -> readResolve
    int size() -> size
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    int getValue(int) -> getValue
    int get(org.joda.time.DateTimeFieldType) -> get
    boolean isSupported(org.joda.time.DateTimeFieldType) -> isSupported
    boolean isSupported(org.joda.time.DurationFieldType) -> isSupported
    long getLocalMillis() -> getLocalMillis
    org.joda.time.Chronology getChronology() -> getChronology
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.joda.time.ReadablePartial) -> compareTo
    org.joda.time.LocalTime withLocalMillis(long) -> withLocalMillis
    org.joda.time.LocalTime withFields(org.joda.time.ReadablePartial) -> withFields
    org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.LocalTime withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.LocalTime plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.LocalTime plusHours(int) -> plusHours
    org.joda.time.LocalTime plusMinutes(int) -> plusMinutes
    org.joda.time.LocalTime plusSeconds(int) -> plusSeconds
    org.joda.time.LocalTime plusMillis(int) -> plusMillis
    org.joda.time.LocalTime minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.LocalTime minusHours(int) -> minusHours
    org.joda.time.LocalTime minusMinutes(int) -> minusMinutes
    org.joda.time.LocalTime minusSeconds(int) -> minusSeconds
    org.joda.time.LocalTime minusMillis(int) -> minusMillis
    org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType) -> property
    int getHourOfDay() -> getHourOfDay
    int getMinuteOfHour() -> getMinuteOfHour
    int getSecondOfMinute() -> getSecondOfMinute
    int getMillisOfSecond() -> getMillisOfSecond
    int getMillisOfDay() -> getMillisOfDay
    org.joda.time.LocalTime withHourOfDay(int) -> withHourOfDay
    org.joda.time.LocalTime withMinuteOfHour(int) -> withMinuteOfHour
    org.joda.time.LocalTime withSecondOfMinute(int) -> withSecondOfMinute
    org.joda.time.LocalTime withMillisOfSecond(int) -> withMillisOfSecond
    org.joda.time.LocalTime withMillisOfDay(int) -> withMillisOfDay
    org.joda.time.LocalTime$Property hourOfDay() -> hourOfDay
    org.joda.time.LocalTime$Property minuteOfHour() -> minuteOfHour
    org.joda.time.LocalTime$Property secondOfMinute() -> secondOfMinute
    org.joda.time.LocalTime$Property millisOfSecond() -> millisOfSecond
    org.joda.time.LocalTime$Property millisOfDay() -> millisOfDay
    org.joda.time.DateTime toDateTimeToday() -> toDateTimeToday
    org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone) -> toDateTimeToday
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
org.joda.time.LocalTime$Property -> org.joda.time.LocalTime$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.LocalTime iInstant -> iInstant
    org.joda.time.DateTimeField iField -> iField
    void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    org.joda.time.DateTimeField getField() -> getField
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.LocalTime getLocalTime() -> getLocalTime
    org.joda.time.LocalTime addCopy(int) -> addCopy
    org.joda.time.LocalTime addCopy(long) -> addCopy
    org.joda.time.LocalTime addNoWrapToCopy(int) -> addNoWrapToCopy
    org.joda.time.LocalTime addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.LocalTime setCopy(int) -> setCopy
    org.joda.time.LocalTime setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.LocalTime setCopy(java.lang.String) -> setCopy
    org.joda.time.LocalTime withMaximumValue() -> withMaximumValue
    org.joda.time.LocalTime withMinimumValue() -> withMinimumValue
    org.joda.time.LocalTime roundFloorCopy() -> roundFloorCopy
    org.joda.time.LocalTime roundCeilingCopy() -> roundCeilingCopy
    org.joda.time.LocalTime roundHalfFloorCopy() -> roundHalfFloorCopy
    org.joda.time.LocalTime roundHalfCeilingCopy() -> roundHalfCeilingCopy
    org.joda.time.LocalTime roundHalfEvenCopy() -> roundHalfEvenCopy
org.joda.time.Minutes -> org.joda.time.Minutes:
    org.joda.time.Minutes ZERO -> ZERO
    org.joda.time.Minutes ONE -> ONE
    org.joda.time.Minutes TWO -> TWO
    org.joda.time.Minutes THREE -> THREE
    org.joda.time.Minutes MAX_VALUE -> MAX_VALUE
    org.joda.time.Minutes MIN_VALUE -> MIN_VALUE
    org.joda.time.format.PeriodFormatter PARSER -> PARSER
    long serialVersionUID -> serialVersionUID
    org.joda.time.Minutes minutes(int) -> minutes
    org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> minutesBetween
    org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> minutesBetween
    org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval) -> minutesIn
    org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod) -> standardMinutesIn
    org.joda.time.Minutes parseMinutes(java.lang.String) -> parseMinutes
    void <init>(int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    org.joda.time.Weeks toStandardWeeks() -> toStandardWeeks
    org.joda.time.Days toStandardDays() -> toStandardDays
    org.joda.time.Hours toStandardHours() -> toStandardHours
    org.joda.time.Seconds toStandardSeconds() -> toStandardSeconds
    org.joda.time.Duration toStandardDuration() -> toStandardDuration
    int getMinutes() -> getMinutes
    org.joda.time.Minutes plus(int) -> plus
    org.joda.time.Minutes plus(org.joda.time.Minutes) -> plus
    org.joda.time.Minutes minus(int) -> minus
    org.joda.time.Minutes minus(org.joda.time.Minutes) -> minus
    org.joda.time.Minutes multipliedBy(int) -> multipliedBy
    org.joda.time.Minutes dividedBy(int) -> dividedBy
    org.joda.time.Minutes negated() -> negated
    boolean isGreaterThan(org.joda.time.Minutes) -> isGreaterThan
    boolean isLessThan(org.joda.time.Minutes) -> isLessThan
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.MonthDay -> org.joda.time.MonthDay:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeFieldType[] FIELD_TYPES -> FIELD_TYPES
    org.joda.time.format.DateTimeFormatter PARSER -> PARSER
    int MONTH_OF_YEAR -> MONTH_OF_YEAR
    int DAY_OF_MONTH -> DAY_OF_MONTH
    org.joda.time.MonthDay now() -> now
    org.joda.time.MonthDay now(org.joda.time.DateTimeZone) -> now
    org.joda.time.MonthDay now(org.joda.time.Chronology) -> now
    org.joda.time.MonthDay parse(java.lang.String) -> parse
    org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    org.joda.time.MonthDay fromCalendarFields(java.util.Calendar) -> fromCalendarFields
    org.joda.time.MonthDay fromDateFields(java.util.Date) -> fromDateFields
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.MonthDay,int[]) -> <init>
    void <init>(org.joda.time.MonthDay,org.joda.time.Chronology) -> <init>
    java.lang.Object readResolve() -> readResolve
    int size() -> size
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    org.joda.time.DateTimeFieldType getFieldType(int) -> getFieldType
    org.joda.time.DateTimeFieldType[] getFieldTypes() -> getFieldTypes
    org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology) -> withChronologyRetainFields
    org.joda.time.MonthDay withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.MonthDay plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.MonthDay plusMonths(int) -> plusMonths
    org.joda.time.MonthDay plusDays(int) -> plusDays
    org.joda.time.MonthDay minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.MonthDay minusMonths(int) -> minusMonths
    org.joda.time.MonthDay minusDays(int) -> minusDays
    org.joda.time.LocalDate toLocalDate(int) -> toLocalDate
    int getMonthOfYear() -> getMonthOfYear
    int getDayOfMonth() -> getDayOfMonth
    org.joda.time.MonthDay withMonthOfYear(int) -> withMonthOfYear
    org.joda.time.MonthDay withDayOfMonth(int) -> withDayOfMonth
    org.joda.time.MonthDay$Property property(org.joda.time.DateTimeFieldType) -> property
    org.joda.time.MonthDay$Property monthOfYear() -> monthOfYear
    org.joda.time.MonthDay$Property dayOfMonth() -> dayOfMonth
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
    void <clinit>() -> <clinit>
org.joda.time.MonthDay$Property -> org.joda.time.MonthDay$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.MonthDay iBase -> iBase
    int iFieldIndex -> iFieldIndex
    void <init>(org.joda.time.MonthDay,int) -> <init>
    org.joda.time.DateTimeField getField() -> getField
    org.joda.time.ReadablePartial getReadablePartial() -> getReadablePartial
    org.joda.time.MonthDay getMonthDay() -> getMonthDay
    int get() -> get
    org.joda.time.MonthDay addToCopy(int) -> addToCopy
    org.joda.time.MonthDay addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.MonthDay setCopy(int) -> setCopy
    org.joda.time.MonthDay setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.MonthDay setCopy(java.lang.String) -> setCopy
org.joda.time.Months -> org.joda.time.Months:
    org.joda.time.Months ZERO -> ZERO
    org.joda.time.Months ONE -> ONE
    org.joda.time.Months TWO -> TWO
    org.joda.time.Months THREE -> THREE
    org.joda.time.Months FOUR -> FOUR
    org.joda.time.Months FIVE -> FIVE
    org.joda.time.Months SIX -> SIX
    org.joda.time.Months SEVEN -> SEVEN
    org.joda.time.Months EIGHT -> EIGHT
    org.joda.time.Months NINE -> NINE
    org.joda.time.Months TEN -> TEN
    org.joda.time.Months ELEVEN -> ELEVEN
    org.joda.time.Months TWELVE -> TWELVE
    org.joda.time.Months MAX_VALUE -> MAX_VALUE
    org.joda.time.Months MIN_VALUE -> MIN_VALUE
    org.joda.time.format.PeriodFormatter PARSER -> PARSER
    long serialVersionUID -> serialVersionUID
    org.joda.time.Months months(int) -> months
    org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> monthsBetween
    org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> monthsBetween
    org.joda.time.Months monthsIn(org.joda.time.ReadableInterval) -> monthsIn
    org.joda.time.Months parseMonths(java.lang.String) -> parseMonths
    void <init>(int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    int getMonths() -> getMonths
    org.joda.time.Months plus(int) -> plus
    org.joda.time.Months plus(org.joda.time.Months) -> plus
    org.joda.time.Months minus(int) -> minus
    org.joda.time.Months minus(org.joda.time.Months) -> minus
    org.joda.time.Months multipliedBy(int) -> multipliedBy
    org.joda.time.Months dividedBy(int) -> dividedBy
    org.joda.time.Months negated() -> negated
    boolean isGreaterThan(org.joda.time.Months) -> isGreaterThan
    boolean isLessThan(org.joda.time.Months) -> isLessThan
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.MutableDateTime -> org.joda.time.MutableDateTime:
    long serialVersionUID -> serialVersionUID
    int ROUND_NONE -> ROUND_NONE
    int ROUND_FLOOR -> ROUND_FLOOR
    int ROUND_CEILING -> ROUND_CEILING
    int ROUND_HALF_FLOOR -> ROUND_HALF_FLOOR
    int ROUND_HALF_CEILING -> ROUND_HALF_CEILING
    int ROUND_HALF_EVEN -> ROUND_HALF_EVEN
    org.joda.time.DateTimeField iRoundingField -> iRoundingField
    int iRoundingMode -> iRoundingMode
    org.joda.time.MutableDateTime now() -> now
    org.joda.time.MutableDateTime now(org.joda.time.DateTimeZone) -> now
    org.joda.time.MutableDateTime now(org.joda.time.Chronology) -> now
    org.joda.time.MutableDateTime parse(java.lang.String) -> parse
    org.joda.time.MutableDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.DateTimeZone) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone) -> <init>
    void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology) -> <init>
    org.joda.time.DateTimeField getRoundingField() -> getRoundingField
    int getRoundingMode() -> getRoundingMode
    void setRounding(org.joda.time.DateTimeField) -> setRounding
    void setRounding(org.joda.time.DateTimeField,int) -> setRounding
    void setMillis(long) -> setMillis
    void setMillis(org.joda.time.ReadableInstant) -> setMillis
    void add(long) -> add
    void add(org.joda.time.ReadableDuration) -> add
    void add(org.joda.time.ReadableDuration,int) -> add
    void add(org.joda.time.ReadablePeriod) -> add
    void add(org.joda.time.ReadablePeriod,int) -> add
    void setChronology(org.joda.time.Chronology) -> setChronology
    void setZone(org.joda.time.DateTimeZone) -> setZone
    void setZoneRetainFields(org.joda.time.DateTimeZone) -> setZoneRetainFields
    void set(org.joda.time.DateTimeFieldType,int) -> set
    void add(org.joda.time.DurationFieldType,int) -> add
    void setYear(int) -> setYear
    void addYears(int) -> addYears
    void setWeekyear(int) -> setWeekyear
    void addWeekyears(int) -> addWeekyears
    void setMonthOfYear(int) -> setMonthOfYear
    void addMonths(int) -> addMonths
    void setWeekOfWeekyear(int) -> setWeekOfWeekyear
    void addWeeks(int) -> addWeeks
    void setDayOfYear(int) -> setDayOfYear
    void setDayOfMonth(int) -> setDayOfMonth
    void setDayOfWeek(int) -> setDayOfWeek
    void addDays(int) -> addDays
    void setHourOfDay(int) -> setHourOfDay
    void addHours(int) -> addHours
    void setMinuteOfDay(int) -> setMinuteOfDay
    void setMinuteOfHour(int) -> setMinuteOfHour
    void addMinutes(int) -> addMinutes
    void setSecondOfDay(int) -> setSecondOfDay
    void setSecondOfMinute(int) -> setSecondOfMinute
    void addSeconds(int) -> addSeconds
    void setMillisOfDay(int) -> setMillisOfDay
    void setMillisOfSecond(int) -> setMillisOfSecond
    void addMillis(int) -> addMillis
    void setDate(long) -> setDate
    void setDate(org.joda.time.ReadableInstant) -> setDate
    void setDate(int,int,int) -> setDate
    void setTime(long) -> setTime
    void setTime(org.joda.time.ReadableInstant) -> setTime
    void setTime(int,int,int,int) -> setTime
    void setDateTime(int,int,int,int,int,int,int) -> setDateTime
    org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType) -> property
    org.joda.time.MutableDateTime$Property era() -> era
    org.joda.time.MutableDateTime$Property centuryOfEra() -> centuryOfEra
    org.joda.time.MutableDateTime$Property yearOfCentury() -> yearOfCentury
    org.joda.time.MutableDateTime$Property yearOfEra() -> yearOfEra
    org.joda.time.MutableDateTime$Property year() -> year
    org.joda.time.MutableDateTime$Property weekyear() -> weekyear
    org.joda.time.MutableDateTime$Property monthOfYear() -> monthOfYear
    org.joda.time.MutableDateTime$Property weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.MutableDateTime$Property dayOfYear() -> dayOfYear
    org.joda.time.MutableDateTime$Property dayOfMonth() -> dayOfMonth
    org.joda.time.MutableDateTime$Property dayOfWeek() -> dayOfWeek
    org.joda.time.MutableDateTime$Property hourOfDay() -> hourOfDay
    org.joda.time.MutableDateTime$Property minuteOfDay() -> minuteOfDay
    org.joda.time.MutableDateTime$Property minuteOfHour() -> minuteOfHour
    org.joda.time.MutableDateTime$Property secondOfDay() -> secondOfDay
    org.joda.time.MutableDateTime$Property secondOfMinute() -> secondOfMinute
    org.joda.time.MutableDateTime$Property millisOfDay() -> millisOfDay
    org.joda.time.MutableDateTime$Property millisOfSecond() -> millisOfSecond
    org.joda.time.MutableDateTime copy() -> copy
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.joda.time.MutableDateTime$Property -> org.joda.time.MutableDateTime$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.MutableDateTime iInstant -> iInstant
    org.joda.time.DateTimeField iField -> iField
    void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    org.joda.time.DateTimeField getField() -> getField
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.MutableDateTime getMutableDateTime() -> getMutableDateTime
    org.joda.time.MutableDateTime add(int) -> add
    org.joda.time.MutableDateTime add(long) -> add
    org.joda.time.MutableDateTime addWrapField(int) -> addWrapField
    org.joda.time.MutableDateTime set(int) -> set
    org.joda.time.MutableDateTime set(java.lang.String,java.util.Locale) -> set
    org.joda.time.MutableDateTime set(java.lang.String) -> set
    org.joda.time.MutableDateTime roundFloor() -> roundFloor
    org.joda.time.MutableDateTime roundCeiling() -> roundCeiling
    org.joda.time.MutableDateTime roundHalfFloor() -> roundHalfFloor
    org.joda.time.MutableDateTime roundHalfCeiling() -> roundHalfCeiling
    org.joda.time.MutableDateTime roundHalfEven() -> roundHalfEven
org.joda.time.MutableInterval -> org.joda.time.MutableInterval:
    long serialVersionUID -> serialVersionUID
    org.joda.time.MutableInterval parse(java.lang.String) -> parse
    void <init>() -> <init>
    void <init>(long,long) -> <init>
    void <init>(long,long,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod) -> <init>
    void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void setInterval(long,long) -> setInterval
    void setInterval(org.joda.time.ReadableInterval) -> setInterval
    void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> setInterval
    void setChronology(org.joda.time.Chronology) -> setChronology
    void setStartMillis(long) -> setStartMillis
    void setStart(org.joda.time.ReadableInstant) -> setStart
    void setEndMillis(long) -> setEndMillis
    void setEnd(org.joda.time.ReadableInstant) -> setEnd
    void setDurationAfterStart(long) -> setDurationAfterStart
    void setDurationBeforeEnd(long) -> setDurationBeforeEnd
    void setDurationAfterStart(org.joda.time.ReadableDuration) -> setDurationAfterStart
    void setDurationBeforeEnd(org.joda.time.ReadableDuration) -> setDurationBeforeEnd
    void setPeriodAfterStart(org.joda.time.ReadablePeriod) -> setPeriodAfterStart
    void setPeriodBeforeEnd(org.joda.time.ReadablePeriod) -> setPeriodBeforeEnd
    org.joda.time.MutableInterval copy() -> copy
    java.lang.Object clone() -> clone
org.joda.time.MutablePeriod -> org.joda.time.MutablePeriod:
    long serialVersionUID -> serialVersionUID
    org.joda.time.MutablePeriod parse(java.lang.String) -> parse
    org.joda.time.MutablePeriod parse(java.lang.String,org.joda.time.format.PeriodFormatter) -> parse
    void <init>() -> <init>
    void <init>(org.joda.time.PeriodType) -> <init>
    void <init>(int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,int,org.joda.time.PeriodType) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.PeriodType) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(long,long) -> <init>
    void <init>(long,long,org.joda.time.PeriodType) -> <init>
    void <init>(long,long,org.joda.time.Chronology) -> <init>
    void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.PeriodType) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void clear() -> clear
    void setValue(int,int) -> setValue
    void set(org.joda.time.DurationFieldType,int) -> set
    void setPeriod(org.joda.time.ReadablePeriod) -> setPeriod
    void setPeriod(int,int,int,int,int,int,int,int) -> setPeriod
    void setPeriod(org.joda.time.ReadableInterval) -> setPeriod
    void setPeriod(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> setPeriod
    void setPeriod(long,long) -> setPeriod
    void setPeriod(long,long,org.joda.time.Chronology) -> setPeriod
    void setPeriod(org.joda.time.ReadableDuration) -> setPeriod
    void setPeriod(org.joda.time.ReadableDuration,org.joda.time.Chronology) -> setPeriod
    void setPeriod(long) -> setPeriod
    void setPeriod(long,org.joda.time.Chronology) -> setPeriod
    void add(org.joda.time.DurationFieldType,int) -> add
    void add(org.joda.time.ReadablePeriod) -> add
    void add(int,int,int,int,int,int,int,int) -> add
    void add(org.joda.time.ReadableInterval) -> add
    void add(org.joda.time.ReadableDuration) -> add
    void add(long) -> add
    void add(long,org.joda.time.Chronology) -> add
    void mergePeriod(org.joda.time.ReadablePeriod) -> mergePeriod
    int getYears() -> getYears
    int getMonths() -> getMonths
    int getWeeks() -> getWeeks
    int getDays() -> getDays
    int getHours() -> getHours
    int getMinutes() -> getMinutes
    int getSeconds() -> getSeconds
    int getMillis() -> getMillis
    void setYears(int) -> setYears
    void addYears(int) -> addYears
    void setMonths(int) -> setMonths
    void addMonths(int) -> addMonths
    void setWeeks(int) -> setWeeks
    void addWeeks(int) -> addWeeks
    void setDays(int) -> setDays
    void addDays(int) -> addDays
    void setHours(int) -> setHours
    void addHours(int) -> addHours
    void setMinutes(int) -> setMinutes
    void addMinutes(int) -> addMinutes
    void setSeconds(int) -> setSeconds
    void addSeconds(int) -> addSeconds
    void setMillis(int) -> setMillis
    void addMillis(int) -> addMillis
    org.joda.time.MutablePeriod copy() -> copy
    java.lang.Object clone() -> clone
org.joda.time.Partial -> org.joda.time.Partial:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iChronology -> iChronology
    org.joda.time.DateTimeFieldType[] iTypes -> iTypes
    int[] iValues -> iValues
    org.joda.time.format.DateTimeFormatter[] iFormatter -> iFormatter
    void <init>() -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.DateTimeFieldType,int) -> <init>
    void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.DateTimeFieldType[],int[]) -> <init>
    void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.ReadablePartial) -> <init>
    void <init>(org.joda.time.Partial,int[]) -> <init>
    void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[]) -> <init>
    int size() -> size
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    org.joda.time.DateTimeFieldType getFieldType(int) -> getFieldType
    org.joda.time.DateTimeFieldType[] getFieldTypes() -> getFieldTypes
    int getValue(int) -> getValue
    int[] getValues() -> getValues
    org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology) -> withChronologyRetainFields
    org.joda.time.Partial with(org.joda.time.DateTimeFieldType,int) -> with
    org.joda.time.Partial without(org.joda.time.DateTimeFieldType) -> without
    org.joda.time.Partial withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.Partial withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.Partial withFieldAddWrapped(org.joda.time.DurationFieldType,int) -> withFieldAddWrapped
    org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.Partial plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.Partial minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.Partial$Property property(org.joda.time.DateTimeFieldType) -> property
    boolean isMatch(org.joda.time.ReadableInstant) -> isMatch
    boolean isMatch(org.joda.time.ReadablePartial) -> isMatch
    org.joda.time.format.DateTimeFormatter getFormatter() -> getFormatter
    java.lang.String toString() -> toString
    java.lang.String toStringList() -> toStringList
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
org.joda.time.Partial$Property -> org.joda.time.Partial$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Partial iPartial -> iPartial
    int iFieldIndex -> iFieldIndex
    void <init>(org.joda.time.Partial,int) -> <init>
    org.joda.time.DateTimeField getField() -> getField
    org.joda.time.ReadablePartial getReadablePartial() -> getReadablePartial
    org.joda.time.Partial getPartial() -> getPartial
    int get() -> get
    org.joda.time.Partial addToCopy(int) -> addToCopy
    org.joda.time.Partial addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.Partial setCopy(int) -> setCopy
    org.joda.time.Partial setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.Partial setCopy(java.lang.String) -> setCopy
    org.joda.time.Partial withMaximumValue() -> withMaximumValue
    org.joda.time.Partial withMinimumValue() -> withMinimumValue
org.joda.time.Period -> org.joda.time.Period:
    org.joda.time.Period ZERO -> ZERO
    long serialVersionUID -> serialVersionUID
    org.joda.time.Period parse(java.lang.String) -> parse
    org.joda.time.Period parse(java.lang.String,org.joda.time.format.PeriodFormatter) -> parse
    org.joda.time.Period years(int) -> years
    org.joda.time.Period months(int) -> months
    org.joda.time.Period weeks(int) -> weeks
    org.joda.time.Period days(int) -> days
    org.joda.time.Period hours(int) -> hours
    org.joda.time.Period minutes(int) -> minutes
    org.joda.time.Period seconds(int) -> seconds
    org.joda.time.Period millis(int) -> millis
    org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> fieldDifference
    void <init>() -> <init>
    void <init>(int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,int,org.joda.time.PeriodType) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.PeriodType) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(long,long) -> <init>
    void <init>(long,long,org.joda.time.PeriodType) -> <init>
    void <init>(long,long,org.joda.time.Chronology) -> <init>
    void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> <init>
    void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.PeriodType) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(int[],org.joda.time.PeriodType) -> <init>
    org.joda.time.Period toPeriod() -> toPeriod
    int getYears() -> getYears
    int getMonths() -> getMonths
    int getWeeks() -> getWeeks
    int getDays() -> getDays
    int getHours() -> getHours
    int getMinutes() -> getMinutes
    int getSeconds() -> getSeconds
    int getMillis() -> getMillis
    org.joda.time.Period withPeriodType(org.joda.time.PeriodType) -> withPeriodType
    org.joda.time.Period withFields(org.joda.time.ReadablePeriod) -> withFields
    org.joda.time.Period withField(org.joda.time.DurationFieldType,int) -> withField
    org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.Period withYears(int) -> withYears
    org.joda.time.Period withMonths(int) -> withMonths
    org.joda.time.Period withWeeks(int) -> withWeeks
    org.joda.time.Period withDays(int) -> withDays
    org.joda.time.Period withHours(int) -> withHours
    org.joda.time.Period withMinutes(int) -> withMinutes
    org.joda.time.Period withSeconds(int) -> withSeconds
    org.joda.time.Period withMillis(int) -> withMillis
    org.joda.time.Period plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.Period plusYears(int) -> plusYears
    org.joda.time.Period plusMonths(int) -> plusMonths
    org.joda.time.Period plusWeeks(int) -> plusWeeks
    org.joda.time.Period plusDays(int) -> plusDays
    org.joda.time.Period plusHours(int) -> plusHours
    org.joda.time.Period plusMinutes(int) -> plusMinutes
    org.joda.time.Period plusSeconds(int) -> plusSeconds
    org.joda.time.Period plusMillis(int) -> plusMillis
    org.joda.time.Period minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.Period minusYears(int) -> minusYears
    org.joda.time.Period minusMonths(int) -> minusMonths
    org.joda.time.Period minusWeeks(int) -> minusWeeks
    org.joda.time.Period minusDays(int) -> minusDays
    org.joda.time.Period minusHours(int) -> minusHours
    org.joda.time.Period minusMinutes(int) -> minusMinutes
    org.joda.time.Period minusSeconds(int) -> minusSeconds
    org.joda.time.Period minusMillis(int) -> minusMillis
    org.joda.time.Period multipliedBy(int) -> multipliedBy
    org.joda.time.Period negated() -> negated
    org.joda.time.Weeks toStandardWeeks() -> toStandardWeeks
    org.joda.time.Days toStandardDays() -> toStandardDays
    org.joda.time.Hours toStandardHours() -> toStandardHours
    org.joda.time.Minutes toStandardMinutes() -> toStandardMinutes
    org.joda.time.Seconds toStandardSeconds() -> toStandardSeconds
    org.joda.time.Duration toStandardDuration() -> toStandardDuration
    void checkYearsAndMonths(java.lang.String) -> checkYearsAndMonths
    org.joda.time.Period normalizedStandard() -> normalizedStandard
    org.joda.time.Period normalizedStandard(org.joda.time.PeriodType) -> normalizedStandard
    void <clinit>() -> <clinit>
org.joda.time.PeriodType -> org.joda.time.PeriodType:
    long serialVersionUID -> serialVersionUID
    java.util.Map cTypes -> cTypes
    int YEAR_INDEX -> YEAR_INDEX
    int MONTH_INDEX -> MONTH_INDEX
    int WEEK_INDEX -> WEEK_INDEX
    int DAY_INDEX -> DAY_INDEX
    int HOUR_INDEX -> HOUR_INDEX
    int MINUTE_INDEX -> MINUTE_INDEX
    int SECOND_INDEX -> SECOND_INDEX
    int MILLI_INDEX -> MILLI_INDEX
    org.joda.time.PeriodType cStandard -> cStandard
    org.joda.time.PeriodType cYMDTime -> cYMDTime
    org.joda.time.PeriodType cYMD -> cYMD
    org.joda.time.PeriodType cYWDTime -> cYWDTime
    org.joda.time.PeriodType cYWD -> cYWD
    org.joda.time.PeriodType cYDTime -> cYDTime
    org.joda.time.PeriodType cYD -> cYD
    org.joda.time.PeriodType cDTime -> cDTime
    org.joda.time.PeriodType cTime -> cTime
    org.joda.time.PeriodType cYears -> cYears
    org.joda.time.PeriodType cMonths -> cMonths
    org.joda.time.PeriodType cWeeks -> cWeeks
    org.joda.time.PeriodType cDays -> cDays
    org.joda.time.PeriodType cHours -> cHours
    org.joda.time.PeriodType cMinutes -> cMinutes
    org.joda.time.PeriodType cSeconds -> cSeconds
    org.joda.time.PeriodType cMillis -> cMillis
    java.lang.String iName -> iName
    org.joda.time.DurationFieldType[] iTypes -> iTypes
    int[] iIndices -> iIndices
    org.joda.time.PeriodType standard() -> standard
    org.joda.time.PeriodType yearMonthDayTime() -> yearMonthDayTime
    org.joda.time.PeriodType yearMonthDay() -> yearMonthDay
    org.joda.time.PeriodType yearWeekDayTime() -> yearWeekDayTime
    org.joda.time.PeriodType yearWeekDay() -> yearWeekDay
    org.joda.time.PeriodType yearDayTime() -> yearDayTime
    org.joda.time.PeriodType yearDay() -> yearDay
    org.joda.time.PeriodType dayTime() -> dayTime
    org.joda.time.PeriodType time() -> time
    org.joda.time.PeriodType years() -> years
    org.joda.time.PeriodType months() -> months
    org.joda.time.PeriodType weeks() -> weeks
    org.joda.time.PeriodType days() -> days
    org.joda.time.PeriodType hours() -> hours
    org.joda.time.PeriodType minutes() -> minutes
    org.joda.time.PeriodType seconds() -> seconds
    org.joda.time.PeriodType millis() -> millis
    org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[]) -> forFields
    void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[]) -> <init>
    java.lang.String getName() -> getName
    int size() -> size
    org.joda.time.DurationFieldType getFieldType(int) -> getFieldType
    boolean isSupported(org.joda.time.DurationFieldType) -> isSupported
    int indexOf(org.joda.time.DurationFieldType) -> indexOf
    java.lang.String toString() -> toString
    int getIndexedField(org.joda.time.ReadablePeriod,int) -> getIndexedField
    boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int) -> setIndexedField
    boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int) -> addIndexedField
    org.joda.time.PeriodType withYearsRemoved() -> withYearsRemoved
    org.joda.time.PeriodType withMonthsRemoved() -> withMonthsRemoved
    org.joda.time.PeriodType withWeeksRemoved() -> withWeeksRemoved
    org.joda.time.PeriodType withDaysRemoved() -> withDaysRemoved
    org.joda.time.PeriodType withHoursRemoved() -> withHoursRemoved
    org.joda.time.PeriodType withMinutesRemoved() -> withMinutesRemoved
    org.joda.time.PeriodType withSecondsRemoved() -> withSecondsRemoved
    org.joda.time.PeriodType withMillisRemoved() -> withMillisRemoved
    org.joda.time.PeriodType withFieldRemoved(int,java.lang.String) -> withFieldRemoved
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
org.joda.time.ReadWritableDateTime -> org.joda.time.ReadWritableDateTime:
    void setYear(int) -> setYear
    void addYears(int) -> addYears
    void setWeekyear(int) -> setWeekyear
    void addWeekyears(int) -> addWeekyears
    void setMonthOfYear(int) -> setMonthOfYear
    void addMonths(int) -> addMonths
    void setWeekOfWeekyear(int) -> setWeekOfWeekyear
    void addWeeks(int) -> addWeeks
    void setDayOfYear(int) -> setDayOfYear
    void setDayOfMonth(int) -> setDayOfMonth
    void setDayOfWeek(int) -> setDayOfWeek
    void addDays(int) -> addDays
    void setHourOfDay(int) -> setHourOfDay
    void addHours(int) -> addHours
    void setMinuteOfDay(int) -> setMinuteOfDay
    void setMinuteOfHour(int) -> setMinuteOfHour
    void addMinutes(int) -> addMinutes
    void setSecondOfDay(int) -> setSecondOfDay
    void setSecondOfMinute(int) -> setSecondOfMinute
    void addSeconds(int) -> addSeconds
    void setMillisOfDay(int) -> setMillisOfDay
    void setMillisOfSecond(int) -> setMillisOfSecond
    void addMillis(int) -> addMillis
    void setDate(int,int,int) -> setDate
    void setTime(int,int,int,int) -> setTime
    void setDateTime(int,int,int,int,int,int,int) -> setDateTime
org.joda.time.ReadWritableInstant -> org.joda.time.ReadWritableInstant:
    void setMillis(long) -> setMillis
    void setMillis(org.joda.time.ReadableInstant) -> setMillis
    void setChronology(org.joda.time.Chronology) -> setChronology
    void setZone(org.joda.time.DateTimeZone) -> setZone
    void setZoneRetainFields(org.joda.time.DateTimeZone) -> setZoneRetainFields
    void add(long) -> add
    void add(org.joda.time.ReadableDuration) -> add
    void add(org.joda.time.ReadableDuration,int) -> add
    void add(org.joda.time.ReadablePeriod) -> add
    void add(org.joda.time.ReadablePeriod,int) -> add
    void set(org.joda.time.DateTimeFieldType,int) -> set
    void add(org.joda.time.DurationFieldType,int) -> add
org.joda.time.ReadWritableInterval -> org.joda.time.ReadWritableInterval:
    void setInterval(long,long) -> setInterval
    void setInterval(org.joda.time.ReadableInterval) -> setInterval
    void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> setInterval
    void setChronology(org.joda.time.Chronology) -> setChronology
    void setStartMillis(long) -> setStartMillis
    void setStart(org.joda.time.ReadableInstant) -> setStart
    void setEndMillis(long) -> setEndMillis
    void setEnd(org.joda.time.ReadableInstant) -> setEnd
    void setDurationAfterStart(org.joda.time.ReadableDuration) -> setDurationAfterStart
    void setDurationBeforeEnd(org.joda.time.ReadableDuration) -> setDurationBeforeEnd
    void setPeriodAfterStart(org.joda.time.ReadablePeriod) -> setPeriodAfterStart
    void setPeriodBeforeEnd(org.joda.time.ReadablePeriod) -> setPeriodBeforeEnd
org.joda.time.ReadWritablePeriod -> org.joda.time.ReadWritablePeriod:
    void clear() -> clear
    void setValue(int,int) -> setValue
    void set(org.joda.time.DurationFieldType,int) -> set
    void setPeriod(org.joda.time.ReadablePeriod) -> setPeriod
    void setPeriod(int,int,int,int,int,int,int,int) -> setPeriod
    void setPeriod(org.joda.time.ReadableInterval) -> setPeriod
    void add(org.joda.time.DurationFieldType,int) -> add
    void add(org.joda.time.ReadablePeriod) -> add
    void add(int,int,int,int,int,int,int,int) -> add
    void add(org.joda.time.ReadableInterval) -> add
    void setYears(int) -> setYears
    void addYears(int) -> addYears
    void setMonths(int) -> setMonths
    void addMonths(int) -> addMonths
    void setWeeks(int) -> setWeeks
    void addWeeks(int) -> addWeeks
    void setDays(int) -> setDays
    void addDays(int) -> addDays
    void setHours(int) -> setHours
    void addHours(int) -> addHours
    void setMinutes(int) -> setMinutes
    void addMinutes(int) -> addMinutes
    void setSeconds(int) -> setSeconds
    void addSeconds(int) -> addSeconds
    void setMillis(int) -> setMillis
    void addMillis(int) -> addMillis
org.joda.time.ReadableDateTime -> org.joda.time.ReadableDateTime:
    int getDayOfWeek() -> getDayOfWeek
    int getDayOfMonth() -> getDayOfMonth
    int getDayOfYear() -> getDayOfYear
    int getWeekOfWeekyear() -> getWeekOfWeekyear
    int getWeekyear() -> getWeekyear
    int getMonthOfYear() -> getMonthOfYear
    int getYear() -> getYear
    int getYearOfEra() -> getYearOfEra
    int getYearOfCentury() -> getYearOfCentury
    int getCenturyOfEra() -> getCenturyOfEra
    int getEra() -> getEra
    int getMillisOfSecond() -> getMillisOfSecond
    int getMillisOfDay() -> getMillisOfDay
    int getSecondOfMinute() -> getSecondOfMinute
    int getSecondOfDay() -> getSecondOfDay
    int getMinuteOfHour() -> getMinuteOfHour
    int getMinuteOfDay() -> getMinuteOfDay
    int getHourOfDay() -> getHourOfDay
    org.joda.time.DateTime toDateTime() -> toDateTime
    org.joda.time.MutableDateTime toMutableDateTime() -> toMutableDateTime
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
org.joda.time.ReadableDuration -> org.joda.time.ReadableDuration:
    long getMillis() -> getMillis
    org.joda.time.Duration toDuration() -> toDuration
    org.joda.time.Period toPeriod() -> toPeriod
    boolean isEqual(org.joda.time.ReadableDuration) -> isEqual
    boolean isLongerThan(org.joda.time.ReadableDuration) -> isLongerThan
    boolean isShorterThan(org.joda.time.ReadableDuration) -> isShorterThan
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.ReadableInstant -> org.joda.time.ReadableInstant:
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.DateTimeZone getZone() -> getZone
    int get(org.joda.time.DateTimeFieldType) -> get
    boolean isSupported(org.joda.time.DateTimeFieldType) -> isSupported
    org.joda.time.Instant toInstant() -> toInstant
    boolean isEqual(org.joda.time.ReadableInstant) -> isEqual
    boolean isAfter(org.joda.time.ReadableInstant) -> isAfter
    boolean isBefore(org.joda.time.ReadableInstant) -> isBefore
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.ReadableInterval -> org.joda.time.ReadableInterval:
    org.joda.time.Chronology getChronology() -> getChronology
    long getStartMillis() -> getStartMillis
    org.joda.time.DateTime getStart() -> getStart
    long getEndMillis() -> getEndMillis
    org.joda.time.DateTime getEnd() -> getEnd
    boolean contains(org.joda.time.ReadableInstant) -> contains
    boolean contains(org.joda.time.ReadableInterval) -> contains
    boolean overlaps(org.joda.time.ReadableInterval) -> overlaps
    boolean isAfter(org.joda.time.ReadableInstant) -> isAfter
    boolean isAfter(org.joda.time.ReadableInterval) -> isAfter
    boolean isBefore(org.joda.time.ReadableInstant) -> isBefore
    boolean isBefore(org.joda.time.ReadableInterval) -> isBefore
    org.joda.time.Interval toInterval() -> toInterval
    org.joda.time.MutableInterval toMutableInterval() -> toMutableInterval
    org.joda.time.Duration toDuration() -> toDuration
    long toDurationMillis() -> toDurationMillis
    org.joda.time.Period toPeriod() -> toPeriod
    org.joda.time.Period toPeriod(org.joda.time.PeriodType) -> toPeriod
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.ReadablePartial -> org.joda.time.ReadablePartial:
    int size() -> size
    org.joda.time.DateTimeFieldType getFieldType(int) -> getFieldType
    org.joda.time.DateTimeField getField(int) -> getField
    int getValue(int) -> getValue
    org.joda.time.Chronology getChronology() -> getChronology
    int get(org.joda.time.DateTimeFieldType) -> get
    boolean isSupported(org.joda.time.DateTimeFieldType) -> isSupported
    org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant) -> toDateTime
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.ReadablePeriod -> org.joda.time.ReadablePeriod:
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    int size() -> size
    org.joda.time.DurationFieldType getFieldType(int) -> getFieldType
    int getValue(int) -> getValue
    int get(org.joda.time.DurationFieldType) -> get
    boolean isSupported(org.joda.time.DurationFieldType) -> isSupported
    org.joda.time.Period toPeriod() -> toPeriod
    org.joda.time.MutablePeriod toMutablePeriod() -> toMutablePeriod
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.Seconds -> org.joda.time.Seconds:
    org.joda.time.Seconds ZERO -> ZERO
    org.joda.time.Seconds ONE -> ONE
    org.joda.time.Seconds TWO -> TWO
    org.joda.time.Seconds THREE -> THREE
    org.joda.time.Seconds MAX_VALUE -> MAX_VALUE
    org.joda.time.Seconds MIN_VALUE -> MIN_VALUE
    org.joda.time.format.PeriodFormatter PARSER -> PARSER
    long serialVersionUID -> serialVersionUID
    org.joda.time.Seconds seconds(int) -> seconds
    org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> secondsBetween
    org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> secondsBetween
    org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval) -> secondsIn
    org.joda.time.Seconds standardSecondsIn(org.joda.time.ReadablePeriod) -> standardSecondsIn
    org.joda.time.Seconds parseSeconds(java.lang.String) -> parseSeconds
    void <init>(int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    org.joda.time.Weeks toStandardWeeks() -> toStandardWeeks
    org.joda.time.Days toStandardDays() -> toStandardDays
    org.joda.time.Hours toStandardHours() -> toStandardHours
    org.joda.time.Minutes toStandardMinutes() -> toStandardMinutes
    org.joda.time.Duration toStandardDuration() -> toStandardDuration
    int getSeconds() -> getSeconds
    org.joda.time.Seconds plus(int) -> plus
    org.joda.time.Seconds plus(org.joda.time.Seconds) -> plus
    org.joda.time.Seconds minus(int) -> minus
    org.joda.time.Seconds minus(org.joda.time.Seconds) -> minus
    org.joda.time.Seconds multipliedBy(int) -> multipliedBy
    org.joda.time.Seconds dividedBy(int) -> dividedBy
    org.joda.time.Seconds negated() -> negated
    boolean isGreaterThan(org.joda.time.Seconds) -> isGreaterThan
    boolean isLessThan(org.joda.time.Seconds) -> isLessThan
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.TimeOfDay -> org.joda.time.TimeOfDay:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeFieldType[] FIELD_TYPES -> FIELD_TYPES
    org.joda.time.TimeOfDay MIDNIGHT -> MIDNIGHT
    int HOUR_OF_DAY -> HOUR_OF_DAY
    int MINUTE_OF_HOUR -> MINUTE_OF_HOUR
    int SECOND_OF_MINUTE -> SECOND_OF_MINUTE
    int MILLIS_OF_SECOND -> MILLIS_OF_SECOND
    org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar) -> fromCalendarFields
    org.joda.time.TimeOfDay fromDateFields(java.util.Date) -> fromDateFields
    org.joda.time.TimeOfDay fromMillisOfDay(long) -> fromMillisOfDay
    org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology) -> fromMillisOfDay
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int,int) -> <init>
    void <init>(int,int,int,int,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.TimeOfDay,int[]) -> <init>
    void <init>(org.joda.time.TimeOfDay,org.joda.time.Chronology) -> <init>
    int size() -> size
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    org.joda.time.DateTimeFieldType getFieldType(int) -> getFieldType
    org.joda.time.DateTimeFieldType[] getFieldTypes() -> getFieldTypes
    org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology) -> withChronologyRetainFields
    org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.TimeOfDay plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.TimeOfDay plusHours(int) -> plusHours
    org.joda.time.TimeOfDay plusMinutes(int) -> plusMinutes
    org.joda.time.TimeOfDay plusSeconds(int) -> plusSeconds
    org.joda.time.TimeOfDay plusMillis(int) -> plusMillis
    org.joda.time.TimeOfDay minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.TimeOfDay minusHours(int) -> minusHours
    org.joda.time.TimeOfDay minusMinutes(int) -> minusMinutes
    org.joda.time.TimeOfDay minusSeconds(int) -> minusSeconds
    org.joda.time.TimeOfDay minusMillis(int) -> minusMillis
    org.joda.time.TimeOfDay$Property property(org.joda.time.DateTimeFieldType) -> property
    org.joda.time.LocalTime toLocalTime() -> toLocalTime
    org.joda.time.DateTime toDateTimeToday() -> toDateTimeToday
    org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone) -> toDateTimeToday
    int getHourOfDay() -> getHourOfDay
    int getMinuteOfHour() -> getMinuteOfHour
    int getSecondOfMinute() -> getSecondOfMinute
    int getMillisOfSecond() -> getMillisOfSecond
    org.joda.time.TimeOfDay withHourOfDay(int) -> withHourOfDay
    org.joda.time.TimeOfDay withMinuteOfHour(int) -> withMinuteOfHour
    org.joda.time.TimeOfDay withSecondOfMinute(int) -> withSecondOfMinute
    org.joda.time.TimeOfDay withMillisOfSecond(int) -> withMillisOfSecond
    org.joda.time.TimeOfDay$Property hourOfDay() -> hourOfDay
    org.joda.time.TimeOfDay$Property minuteOfHour() -> minuteOfHour
    org.joda.time.TimeOfDay$Property secondOfMinute() -> secondOfMinute
    org.joda.time.TimeOfDay$Property millisOfSecond() -> millisOfSecond
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.TimeOfDay$Property -> org.joda.time.TimeOfDay$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.TimeOfDay iTimeOfDay -> iTimeOfDay
    int iFieldIndex -> iFieldIndex
    void <init>(org.joda.time.TimeOfDay,int) -> <init>
    org.joda.time.DateTimeField getField() -> getField
    org.joda.time.ReadablePartial getReadablePartial() -> getReadablePartial
    org.joda.time.TimeOfDay getTimeOfDay() -> getTimeOfDay
    int get() -> get
    org.joda.time.TimeOfDay addToCopy(int) -> addToCopy
    org.joda.time.TimeOfDay addNoWrapToCopy(int) -> addNoWrapToCopy
    org.joda.time.TimeOfDay addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.TimeOfDay setCopy(int) -> setCopy
    org.joda.time.TimeOfDay setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.TimeOfDay setCopy(java.lang.String) -> setCopy
    org.joda.time.TimeOfDay withMaximumValue() -> withMaximumValue
    org.joda.time.TimeOfDay withMinimumValue() -> withMinimumValue
org.joda.time.Weeks -> org.joda.time.Weeks:
    org.joda.time.Weeks ZERO -> ZERO
    org.joda.time.Weeks ONE -> ONE
    org.joda.time.Weeks TWO -> TWO
    org.joda.time.Weeks THREE -> THREE
    org.joda.time.Weeks MAX_VALUE -> MAX_VALUE
    org.joda.time.Weeks MIN_VALUE -> MIN_VALUE
    org.joda.time.format.PeriodFormatter PARSER -> PARSER
    long serialVersionUID -> serialVersionUID
    org.joda.time.Weeks weeks(int) -> weeks
    org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> weeksBetween
    org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> weeksBetween
    org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval) -> weeksIn
    org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod) -> standardWeeksIn
    org.joda.time.Weeks parseWeeks(java.lang.String) -> parseWeeks
    void <init>(int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    org.joda.time.Days toStandardDays() -> toStandardDays
    org.joda.time.Hours toStandardHours() -> toStandardHours
    org.joda.time.Minutes toStandardMinutes() -> toStandardMinutes
    org.joda.time.Seconds toStandardSeconds() -> toStandardSeconds
    org.joda.time.Duration toStandardDuration() -> toStandardDuration
    int getWeeks() -> getWeeks
    org.joda.time.Weeks plus(int) -> plus
    org.joda.time.Weeks plus(org.joda.time.Weeks) -> plus
    org.joda.time.Weeks minus(int) -> minus
    org.joda.time.Weeks minus(org.joda.time.Weeks) -> minus
    org.joda.time.Weeks multipliedBy(int) -> multipliedBy
    org.joda.time.Weeks dividedBy(int) -> dividedBy
    org.joda.time.Weeks negated() -> negated
    boolean isGreaterThan(org.joda.time.Weeks) -> isGreaterThan
    boolean isLessThan(org.joda.time.Weeks) -> isLessThan
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.YearMonth -> org.joda.time.YearMonth:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeFieldType[] FIELD_TYPES -> FIELD_TYPES
    int YEAR -> YEAR
    int MONTH_OF_YEAR -> MONTH_OF_YEAR
    org.joda.time.YearMonth now() -> now
    org.joda.time.YearMonth now(org.joda.time.DateTimeZone) -> now
    org.joda.time.YearMonth now(org.joda.time.Chronology) -> now
    org.joda.time.YearMonth parse(java.lang.String) -> parse
    org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter) -> parse
    org.joda.time.YearMonth fromCalendarFields(java.util.Calendar) -> fromCalendarFields
    org.joda.time.YearMonth fromDateFields(java.util.Date) -> fromDateFields
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.YearMonth,int[]) -> <init>
    void <init>(org.joda.time.YearMonth,org.joda.time.Chronology) -> <init>
    java.lang.Object readResolve() -> readResolve
    int size() -> size
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    org.joda.time.DateTimeFieldType getFieldType(int) -> getFieldType
    org.joda.time.DateTimeFieldType[] getFieldTypes() -> getFieldTypes
    org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology) -> withChronologyRetainFields
    org.joda.time.YearMonth withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.YearMonth withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.YearMonth plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.YearMonth plusYears(int) -> plusYears
    org.joda.time.YearMonth plusMonths(int) -> plusMonths
    org.joda.time.YearMonth minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.YearMonth minusYears(int) -> minusYears
    org.joda.time.YearMonth minusMonths(int) -> minusMonths
    org.joda.time.LocalDate toLocalDate(int) -> toLocalDate
    org.joda.time.Interval toInterval() -> toInterval
    org.joda.time.Interval toInterval(org.joda.time.DateTimeZone) -> toInterval
    int getYear() -> getYear
    int getMonthOfYear() -> getMonthOfYear
    org.joda.time.YearMonth withYear(int) -> withYear
    org.joda.time.YearMonth withMonthOfYear(int) -> withMonthOfYear
    org.joda.time.YearMonth$Property property(org.joda.time.DateTimeFieldType) -> property
    org.joda.time.YearMonth$Property year() -> year
    org.joda.time.YearMonth$Property monthOfYear() -> monthOfYear
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
    void <clinit>() -> <clinit>
org.joda.time.YearMonth$Property -> org.joda.time.YearMonth$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.YearMonth iBase -> iBase
    int iFieldIndex -> iFieldIndex
    void <init>(org.joda.time.YearMonth,int) -> <init>
    org.joda.time.DateTimeField getField() -> getField
    org.joda.time.ReadablePartial getReadablePartial() -> getReadablePartial
    org.joda.time.YearMonth getYearMonth() -> getYearMonth
    int get() -> get
    org.joda.time.YearMonth addToCopy(int) -> addToCopy
    org.joda.time.YearMonth addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.YearMonth setCopy(int) -> setCopy
    org.joda.time.YearMonth setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.YearMonth setCopy(java.lang.String) -> setCopy
org.joda.time.YearMonthDay -> org.joda.time.YearMonthDay:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeFieldType[] FIELD_TYPES -> FIELD_TYPES
    int YEAR -> YEAR
    int MONTH_OF_YEAR -> MONTH_OF_YEAR
    int DAY_OF_MONTH -> DAY_OF_MONTH
    org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar) -> fromCalendarFields
    org.joda.time.YearMonthDay fromDateFields(java.util.Date) -> fromDateFields
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.YearMonthDay,int[]) -> <init>
    void <init>(org.joda.time.YearMonthDay,org.joda.time.Chronology) -> <init>
    int size() -> size
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    org.joda.time.DateTimeFieldType getFieldType(int) -> getFieldType
    org.joda.time.DateTimeFieldType[] getFieldTypes() -> getFieldTypes
    org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology) -> withChronologyRetainFields
    org.joda.time.YearMonthDay withField(org.joda.time.DateTimeFieldType,int) -> withField
    org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int) -> withFieldAdded
    org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int) -> withPeriodAdded
    org.joda.time.YearMonthDay plus(org.joda.time.ReadablePeriod) -> plus
    org.joda.time.YearMonthDay plusYears(int) -> plusYears
    org.joda.time.YearMonthDay plusMonths(int) -> plusMonths
    org.joda.time.YearMonthDay plusDays(int) -> plusDays
    org.joda.time.YearMonthDay minus(org.joda.time.ReadablePeriod) -> minus
    org.joda.time.YearMonthDay minusYears(int) -> minusYears
    org.joda.time.YearMonthDay minusMonths(int) -> minusMonths
    org.joda.time.YearMonthDay minusDays(int) -> minusDays
    org.joda.time.YearMonthDay$Property property(org.joda.time.DateTimeFieldType) -> property
    org.joda.time.LocalDate toLocalDate() -> toLocalDate
    org.joda.time.DateTime toDateTimeAtMidnight() -> toDateTimeAtMidnight
    org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone) -> toDateTimeAtMidnight
    org.joda.time.DateTime toDateTimeAtCurrentTime() -> toDateTimeAtCurrentTime
    org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone) -> toDateTimeAtCurrentTime
    org.joda.time.DateMidnight toDateMidnight() -> toDateMidnight
    org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone) -> toDateMidnight
    org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay) -> toDateTime
    org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone) -> toDateTime
    org.joda.time.Interval toInterval() -> toInterval
    org.joda.time.Interval toInterval(org.joda.time.DateTimeZone) -> toInterval
    int getYear() -> getYear
    int getMonthOfYear() -> getMonthOfYear
    int getDayOfMonth() -> getDayOfMonth
    org.joda.time.YearMonthDay withYear(int) -> withYear
    org.joda.time.YearMonthDay withMonthOfYear(int) -> withMonthOfYear
    org.joda.time.YearMonthDay withDayOfMonth(int) -> withDayOfMonth
    org.joda.time.YearMonthDay$Property year() -> year
    org.joda.time.YearMonthDay$Property monthOfYear() -> monthOfYear
    org.joda.time.YearMonthDay$Property dayOfMonth() -> dayOfMonth
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.YearMonthDay$Property -> org.joda.time.YearMonthDay$Property:
    long serialVersionUID -> serialVersionUID
    org.joda.time.YearMonthDay iYearMonthDay -> iYearMonthDay
    int iFieldIndex -> iFieldIndex
    void <init>(org.joda.time.YearMonthDay,int) -> <init>
    org.joda.time.DateTimeField getField() -> getField
    org.joda.time.ReadablePartial getReadablePartial() -> getReadablePartial
    org.joda.time.YearMonthDay getYearMonthDay() -> getYearMonthDay
    int get() -> get
    org.joda.time.YearMonthDay addToCopy(int) -> addToCopy
    org.joda.time.YearMonthDay addWrapFieldToCopy(int) -> addWrapFieldToCopy
    org.joda.time.YearMonthDay setCopy(int) -> setCopy
    org.joda.time.YearMonthDay setCopy(java.lang.String,java.util.Locale) -> setCopy
    org.joda.time.YearMonthDay setCopy(java.lang.String) -> setCopy
    org.joda.time.YearMonthDay withMaximumValue() -> withMaximumValue
    org.joda.time.YearMonthDay withMinimumValue() -> withMinimumValue
org.joda.time.Years -> org.joda.time.Years:
    org.joda.time.Years ZERO -> ZERO
    org.joda.time.Years ONE -> ONE
    org.joda.time.Years TWO -> TWO
    org.joda.time.Years THREE -> THREE
    org.joda.time.Years MAX_VALUE -> MAX_VALUE
    org.joda.time.Years MIN_VALUE -> MIN_VALUE
    org.joda.time.format.PeriodFormatter PARSER -> PARSER
    long serialVersionUID -> serialVersionUID
    org.joda.time.Years years(int) -> years
    org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> yearsBetween
    org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial) -> yearsBetween
    org.joda.time.Years yearsIn(org.joda.time.ReadableInterval) -> yearsIn
    org.joda.time.Years parseYears(java.lang.String) -> parseYears
    void <init>(int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    int getYears() -> getYears
    org.joda.time.Years plus(int) -> plus
    org.joda.time.Years plus(org.joda.time.Years) -> plus
    org.joda.time.Years minus(int) -> minus
    org.joda.time.Years minus(org.joda.time.Years) -> minus
    org.joda.time.Years multipliedBy(int) -> multipliedBy
    org.joda.time.Years dividedBy(int) -> dividedBy
    org.joda.time.Years negated() -> negated
    boolean isGreaterThan(org.joda.time.Years) -> isGreaterThan
    boolean isLessThan(org.joda.time.Years) -> isLessThan
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.joda.time.base.AbstractDateTime -> org.joda.time.base.AbstractDateTime:
    void <init>() -> <init>
    int get(org.joda.time.DateTimeFieldType) -> get
    int getEra() -> getEra
    int getCenturyOfEra() -> getCenturyOfEra
    int getYearOfEra() -> getYearOfEra
    int getYearOfCentury() -> getYearOfCentury
    int getYear() -> getYear
    int getWeekyear() -> getWeekyear
    int getMonthOfYear() -> getMonthOfYear
    int getWeekOfWeekyear() -> getWeekOfWeekyear
    int getDayOfYear() -> getDayOfYear
    int getDayOfMonth() -> getDayOfMonth
    int getDayOfWeek() -> getDayOfWeek
    int getHourOfDay() -> getHourOfDay
    int getMinuteOfDay() -> getMinuteOfDay
    int getMinuteOfHour() -> getMinuteOfHour
    int getSecondOfDay() -> getSecondOfDay
    int getSecondOfMinute() -> getSecondOfMinute
    int getMillisOfDay() -> getMillisOfDay
    int getMillisOfSecond() -> getMillisOfSecond
    java.util.Calendar toCalendar(java.util.Locale) -> toCalendar
    java.util.GregorianCalendar toGregorianCalendar() -> toGregorianCalendar
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
org.joda.time.base.AbstractDuration -> org.joda.time.base.AbstractDuration:
    void <init>() -> <init>
    org.joda.time.Duration toDuration() -> toDuration
    org.joda.time.Period toPeriod() -> toPeriod
    int compareTo(org.joda.time.ReadableDuration) -> compareTo
    boolean isEqual(org.joda.time.ReadableDuration) -> isEqual
    boolean isLongerThan(org.joda.time.ReadableDuration) -> isLongerThan
    boolean isShorterThan(org.joda.time.ReadableDuration) -> isShorterThan
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.base.AbstractInstant -> org.joda.time.base.AbstractInstant:
    void <init>() -> <init>
    org.joda.time.DateTimeZone getZone() -> getZone
    int get(org.joda.time.DateTimeFieldType) -> get
    boolean isSupported(org.joda.time.DateTimeFieldType) -> isSupported
    int get(org.joda.time.DateTimeField) -> get
    org.joda.time.Instant toInstant() -> toInstant
    org.joda.time.DateTime toDateTime() -> toDateTime
    org.joda.time.DateTime toDateTimeISO() -> toDateTimeISO
    org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone) -> toDateTime
    org.joda.time.DateTime toDateTime(org.joda.time.Chronology) -> toDateTime
    org.joda.time.MutableDateTime toMutableDateTime() -> toMutableDateTime
    org.joda.time.MutableDateTime toMutableDateTimeISO() -> toMutableDateTimeISO
    org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone) -> toMutableDateTime
    org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.Chronology) -> toMutableDateTime
    java.util.Date toDate() -> toDate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.joda.time.ReadableInstant) -> compareTo
    boolean isAfter(long) -> isAfter
    boolean isAfterNow() -> isAfterNow
    boolean isAfter(org.joda.time.ReadableInstant) -> isAfter
    boolean isBefore(long) -> isBefore
    boolean isBeforeNow() -> isBeforeNow
    boolean isBefore(org.joda.time.ReadableInstant) -> isBefore
    boolean isEqual(long) -> isEqual
    boolean isEqualNow() -> isEqualNow
    boolean isEqual(org.joda.time.ReadableInstant) -> isEqual
    java.lang.String toString() -> toString
    java.lang.String toString(org.joda.time.format.DateTimeFormatter) -> toString
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.base.AbstractInterval -> org.joda.time.base.AbstractInterval:
    void <init>() -> <init>
    void checkInterval(long,long) -> checkInterval
    org.joda.time.DateTime getStart() -> getStart
    org.joda.time.DateTime getEnd() -> getEnd
    boolean contains(long) -> contains
    boolean containsNow() -> containsNow
    boolean contains(org.joda.time.ReadableInstant) -> contains
    boolean contains(org.joda.time.ReadableInterval) -> contains
    boolean overlaps(org.joda.time.ReadableInterval) -> overlaps
    boolean isEqual(org.joda.time.ReadableInterval) -> isEqual
    boolean isBefore(long) -> isBefore
    boolean isBeforeNow() -> isBeforeNow
    boolean isBefore(org.joda.time.ReadableInstant) -> isBefore
    boolean isBefore(org.joda.time.ReadableInterval) -> isBefore
    boolean isAfter(long) -> isAfter
    boolean isAfterNow() -> isAfterNow
    boolean isAfter(org.joda.time.ReadableInstant) -> isAfter
    boolean isAfter(org.joda.time.ReadableInterval) -> isAfter
    org.joda.time.Interval toInterval() -> toInterval
    org.joda.time.MutableInterval toMutableInterval() -> toMutableInterval
    long toDurationMillis() -> toDurationMillis
    org.joda.time.Duration toDuration() -> toDuration
    org.joda.time.Period toPeriod() -> toPeriod
    org.joda.time.Period toPeriod(org.joda.time.PeriodType) -> toPeriod
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.base.AbstractPartial -> org.joda.time.base.AbstractPartial:
    void <init>() -> <init>
    org.joda.time.DateTimeField getField(int,org.joda.time.Chronology) -> getField
    org.joda.time.DateTimeFieldType getFieldType(int) -> getFieldType
    org.joda.time.DateTimeFieldType[] getFieldTypes() -> getFieldTypes
    org.joda.time.DateTimeField getField(int) -> getField
    org.joda.time.DateTimeField[] getFields() -> getFields
    int[] getValues() -> getValues
    int get(org.joda.time.DateTimeFieldType) -> get
    boolean isSupported(org.joda.time.DateTimeFieldType) -> isSupported
    int indexOf(org.joda.time.DateTimeFieldType) -> indexOf
    int indexOfSupported(org.joda.time.DateTimeFieldType) -> indexOfSupported
    int indexOf(org.joda.time.DurationFieldType) -> indexOf
    int indexOfSupported(org.joda.time.DurationFieldType) -> indexOfSupported
    org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant) -> toDateTime
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.joda.time.ReadablePartial) -> compareTo
    boolean isAfter(org.joda.time.ReadablePartial) -> isAfter
    boolean isBefore(org.joda.time.ReadablePartial) -> isBefore
    boolean isEqual(org.joda.time.ReadablePartial) -> isEqual
    java.lang.String toString(org.joda.time.format.DateTimeFormatter) -> toString
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.base.AbstractPeriod -> org.joda.time.base.AbstractPeriod:
    void <init>() -> <init>
    int size() -> size
    org.joda.time.DurationFieldType getFieldType(int) -> getFieldType
    org.joda.time.DurationFieldType[] getFieldTypes() -> getFieldTypes
    int[] getValues() -> getValues
    int get(org.joda.time.DurationFieldType) -> get
    boolean isSupported(org.joda.time.DurationFieldType) -> isSupported
    int indexOf(org.joda.time.DurationFieldType) -> indexOf
    org.joda.time.Period toPeriod() -> toPeriod
    org.joda.time.MutablePeriod toMutablePeriod() -> toMutablePeriod
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(org.joda.time.format.PeriodFormatter) -> toString
org.joda.time.base.BaseDateTime -> org.joda.time.base.BaseDateTime:
    long serialVersionUID -> serialVersionUID
    long iMillis -> iMillis
    org.joda.time.Chronology iChronology -> iChronology
    void <init>() -> <init>
    void <init>(org.joda.time.DateTimeZone) -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.DateTimeZone) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object,org.joda.time.DateTimeZone) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(int,int,int,int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone) -> <init>
    void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology) -> <init>
    org.joda.time.Chronology checkChronology(org.joda.time.Chronology) -> checkChronology
    long checkInstant(long,org.joda.time.Chronology) -> checkInstant
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    void setMillis(long) -> setMillis
    void setChronology(org.joda.time.Chronology) -> setChronology
org.joda.time.base.BaseDuration -> org.joda.time.base.BaseDuration:
    long serialVersionUID -> serialVersionUID
    long iMillis -> iMillis
    void <init>(long) -> <init>
    void <init>(long,long) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> <init>
    void <init>(java.lang.Object) -> <init>
    long getMillis() -> getMillis
    void setMillis(long) -> setMillis
    org.joda.time.Period toPeriod(org.joda.time.PeriodType) -> toPeriod
    org.joda.time.Period toPeriod(org.joda.time.Chronology) -> toPeriod
    org.joda.time.Period toPeriod(org.joda.time.PeriodType,org.joda.time.Chronology) -> toPeriod
    org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant) -> toPeriodFrom
    org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> toPeriodFrom
    org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant) -> toPeriodTo
    org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> toPeriodTo
    org.joda.time.Interval toIntervalFrom(org.joda.time.ReadableInstant) -> toIntervalFrom
    org.joda.time.Interval toIntervalTo(org.joda.time.ReadableInstant) -> toIntervalTo
org.joda.time.base.BaseInterval -> org.joda.time.base.BaseInterval:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iChronology -> iChronology
    long iStartMillis -> iStartMillis
    long iEndMillis -> iEndMillis
    void <init>(long,long,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod) -> <init>
    void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    org.joda.time.Chronology getChronology() -> getChronology
    long getStartMillis() -> getStartMillis
    long getEndMillis() -> getEndMillis
    void setInterval(long,long,org.joda.time.Chronology) -> setInterval
org.joda.time.base.BaseLocal -> org.joda.time.base.BaseLocal:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    long getLocalMillis() -> getLocalMillis
org.joda.time.base.BasePartial -> org.joda.time.base.BasePartial:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iChronology -> iChronology
    int[] iValues -> iValues
    void <init>() -> <init>
    void <init>(org.joda.time.Chronology) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter) -> <init>
    void <init>(int[],org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.base.BasePartial,int[]) -> <init>
    void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology) -> <init>
    int getValue(int) -> getValue
    int[] getValues() -> getValues
    org.joda.time.Chronology getChronology() -> getChronology
    void setValue(int,int) -> setValue
    void setValues(int[]) -> setValues
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.util.Locale) -> toString
org.joda.time.base.BasePeriod -> org.joda.time.base.BasePeriod:
    long serialVersionUID -> serialVersionUID
    org.joda.time.ReadablePeriod DUMMY_PERIOD -> DUMMY_PERIOD
    org.joda.time.PeriodType iType -> iType
    int[] iValues -> iValues
    void <init>(int,int,int,int,int,int,int,int,org.joda.time.PeriodType) -> <init>
    void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType) -> <init>
    void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType) -> <init>
    void <init>(long) -> <init>
    void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology) -> <init>
    void <init>(int[],org.joda.time.PeriodType) -> <init>
    org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType) -> checkPeriodType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    int getValue(int) -> getValue
    org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant) -> toDurationFrom
    org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant) -> toDurationTo
    void checkAndUpdate(org.joda.time.DurationFieldType,int[],int) -> checkAndUpdate
    void setPeriod(org.joda.time.ReadablePeriod) -> setPeriod
    void setPeriodInternal(org.joda.time.ReadablePeriod) -> setPeriodInternal
    void setPeriod(int,int,int,int,int,int,int,int) -> setPeriod
    int[] setPeriodInternal(int,int,int,int,int,int,int,int) -> setPeriodInternal
    void setField(org.joda.time.DurationFieldType,int) -> setField
    void setFieldInto(int[],org.joda.time.DurationFieldType,int) -> setFieldInto
    void addField(org.joda.time.DurationFieldType,int) -> addField
    void addFieldInto(int[],org.joda.time.DurationFieldType,int) -> addFieldInto
    void mergePeriod(org.joda.time.ReadablePeriod) -> mergePeriod
    int[] mergePeriodInto(int[],org.joda.time.ReadablePeriod) -> mergePeriodInto
    void addPeriod(org.joda.time.ReadablePeriod) -> addPeriod
    int[] addPeriodInto(int[],org.joda.time.ReadablePeriod) -> addPeriodInto
    void setValue(int,int) -> setValue
    void setValues(int[]) -> setValues
    void <clinit>() -> <clinit>
org.joda.time.base.BasePeriod$1 -> org.joda.time.base.BasePeriod$1:
    void <init>() -> <init>
    int getValue(int) -> getValue
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
org.joda.time.base.BaseSingleFieldPeriod -> org.joda.time.base.BaseSingleFieldPeriod:
    long serialVersionUID -> serialVersionUID
    long START_1972 -> START_1972
    int iPeriod -> iPeriod
    int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType) -> between
    int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod) -> between
    int standardPeriodIn(org.joda.time.ReadablePeriod,long) -> standardPeriodIn
    void <init>(int) -> <init>
    int getValue() -> getValue
    void setValue(int) -> setValue
    org.joda.time.DurationFieldType getFieldType() -> getFieldType
    org.joda.time.PeriodType getPeriodType() -> getPeriodType
    int size() -> size
    org.joda.time.DurationFieldType getFieldType(int) -> getFieldType
    int getValue(int) -> getValue
    int get(org.joda.time.DurationFieldType) -> get
    boolean isSupported(org.joda.time.DurationFieldType) -> isSupported
    org.joda.time.Period toPeriod() -> toPeriod
    org.joda.time.MutablePeriod toMutablePeriod() -> toMutablePeriod
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.joda.time.base.BaseSingleFieldPeriod) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.chrono.AssembledChronology -> org.joda.time.chrono.AssembledChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iBase -> iBase
    java.lang.Object iParam -> iParam
    org.joda.time.DurationField iMillis -> iMillis
    org.joda.time.DurationField iSeconds -> iSeconds
    org.joda.time.DurationField iMinutes -> iMinutes
    org.joda.time.DurationField iHours -> iHours
    org.joda.time.DurationField iHalfdays -> iHalfdays
    org.joda.time.DurationField iDays -> iDays
    org.joda.time.DurationField iWeeks -> iWeeks
    org.joda.time.DurationField iWeekyears -> iWeekyears
    org.joda.time.DurationField iMonths -> iMonths
    org.joda.time.DurationField iYears -> iYears
    org.joda.time.DurationField iCenturies -> iCenturies
    org.joda.time.DurationField iEras -> iEras
    org.joda.time.DateTimeField iMillisOfSecond -> iMillisOfSecond
    org.joda.time.DateTimeField iMillisOfDay -> iMillisOfDay
    org.joda.time.DateTimeField iSecondOfMinute -> iSecondOfMinute
    org.joda.time.DateTimeField iSecondOfDay -> iSecondOfDay
    org.joda.time.DateTimeField iMinuteOfHour -> iMinuteOfHour
    org.joda.time.DateTimeField iMinuteOfDay -> iMinuteOfDay
    org.joda.time.DateTimeField iHourOfDay -> iHourOfDay
    org.joda.time.DateTimeField iClockhourOfDay -> iClockhourOfDay
    org.joda.time.DateTimeField iHourOfHalfday -> iHourOfHalfday
    org.joda.time.DateTimeField iClockhourOfHalfday -> iClockhourOfHalfday
    org.joda.time.DateTimeField iHalfdayOfDay -> iHalfdayOfDay
    org.joda.time.DateTimeField iDayOfWeek -> iDayOfWeek
    org.joda.time.DateTimeField iDayOfMonth -> iDayOfMonth
    org.joda.time.DateTimeField iDayOfYear -> iDayOfYear
    org.joda.time.DateTimeField iWeekOfWeekyear -> iWeekOfWeekyear
    org.joda.time.DateTimeField iWeekyear -> iWeekyear
    org.joda.time.DateTimeField iWeekyearOfCentury -> iWeekyearOfCentury
    org.joda.time.DateTimeField iMonthOfYear -> iMonthOfYear
    org.joda.time.DateTimeField iYear -> iYear
    org.joda.time.DateTimeField iYearOfEra -> iYearOfEra
    org.joda.time.DateTimeField iYearOfCentury -> iYearOfCentury
    org.joda.time.DateTimeField iCenturyOfEra -> iCenturyOfEra
    org.joda.time.DateTimeField iEra -> iEra
    int iBaseFlags -> iBaseFlags
    void <init>(org.joda.time.Chronology,java.lang.Object) -> <init>
    org.joda.time.DateTimeZone getZone() -> getZone
    long getDateTimeMillis(int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(int,int,int,int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(long,int,int,int,int) -> getDateTimeMillis
    org.joda.time.DurationField millis() -> millis
    org.joda.time.DateTimeField millisOfSecond() -> millisOfSecond
    org.joda.time.DateTimeField millisOfDay() -> millisOfDay
    org.joda.time.DurationField seconds() -> seconds
    org.joda.time.DateTimeField secondOfMinute() -> secondOfMinute
    org.joda.time.DateTimeField secondOfDay() -> secondOfDay
    org.joda.time.DurationField minutes() -> minutes
    org.joda.time.DateTimeField minuteOfHour() -> minuteOfHour
    org.joda.time.DateTimeField minuteOfDay() -> minuteOfDay
    org.joda.time.DurationField hours() -> hours
    org.joda.time.DateTimeField hourOfDay() -> hourOfDay
    org.joda.time.DateTimeField clockhourOfDay() -> clockhourOfDay
    org.joda.time.DurationField halfdays() -> halfdays
    org.joda.time.DateTimeField hourOfHalfday() -> hourOfHalfday
    org.joda.time.DateTimeField clockhourOfHalfday() -> clockhourOfHalfday
    org.joda.time.DateTimeField halfdayOfDay() -> halfdayOfDay
    org.joda.time.DurationField days() -> days
    org.joda.time.DateTimeField dayOfWeek() -> dayOfWeek
    org.joda.time.DateTimeField dayOfMonth() -> dayOfMonth
    org.joda.time.DateTimeField dayOfYear() -> dayOfYear
    org.joda.time.DurationField weeks() -> weeks
    org.joda.time.DateTimeField weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.DurationField weekyears() -> weekyears
    org.joda.time.DateTimeField weekyear() -> weekyear
    org.joda.time.DateTimeField weekyearOfCentury() -> weekyearOfCentury
    org.joda.time.DurationField months() -> months
    org.joda.time.DateTimeField monthOfYear() -> monthOfYear
    org.joda.time.DurationField years() -> years
    org.joda.time.DateTimeField year() -> year
    org.joda.time.DateTimeField yearOfEra() -> yearOfEra
    org.joda.time.DateTimeField yearOfCentury() -> yearOfCentury
    org.joda.time.DurationField centuries() -> centuries
    org.joda.time.DateTimeField centuryOfEra() -> centuryOfEra
    org.joda.time.DurationField eras() -> eras
    org.joda.time.DateTimeField era() -> era
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    org.joda.time.Chronology getBase() -> getBase
    java.lang.Object getParam() -> getParam
    void setFields() -> setFields
    void readObject(java.io.ObjectInputStream) -> readObject
org.joda.time.chrono.AssembledChronology$Fields -> org.joda.time.chrono.AssembledChronology$Fields:
    org.joda.time.DurationField millis -> millis
    org.joda.time.DurationField seconds -> seconds
    org.joda.time.DurationField minutes -> minutes
    org.joda.time.DurationField hours -> hours
    org.joda.time.DurationField halfdays -> halfdays
    org.joda.time.DurationField days -> days
    org.joda.time.DurationField weeks -> weeks
    org.joda.time.DurationField weekyears -> weekyears
    org.joda.time.DurationField months -> months
    org.joda.time.DurationField years -> years
    org.joda.time.DurationField centuries -> centuries
    org.joda.time.DurationField eras -> eras
    org.joda.time.DateTimeField millisOfSecond -> millisOfSecond
    org.joda.time.DateTimeField millisOfDay -> millisOfDay
    org.joda.time.DateTimeField secondOfMinute -> secondOfMinute
    org.joda.time.DateTimeField secondOfDay -> secondOfDay
    org.joda.time.DateTimeField minuteOfHour -> minuteOfHour
    org.joda.time.DateTimeField minuteOfDay -> minuteOfDay
    org.joda.time.DateTimeField hourOfDay -> hourOfDay
    org.joda.time.DateTimeField clockhourOfDay -> clockhourOfDay
    org.joda.time.DateTimeField hourOfHalfday -> hourOfHalfday
    org.joda.time.DateTimeField clockhourOfHalfday -> clockhourOfHalfday
    org.joda.time.DateTimeField halfdayOfDay -> halfdayOfDay
    org.joda.time.DateTimeField dayOfWeek -> dayOfWeek
    org.joda.time.DateTimeField dayOfMonth -> dayOfMonth
    org.joda.time.DateTimeField dayOfYear -> dayOfYear
    org.joda.time.DateTimeField weekOfWeekyear -> weekOfWeekyear
    org.joda.time.DateTimeField weekyear -> weekyear
    org.joda.time.DateTimeField weekyearOfCentury -> weekyearOfCentury
    org.joda.time.DateTimeField monthOfYear -> monthOfYear
    org.joda.time.DateTimeField year -> year
    org.joda.time.DateTimeField yearOfEra -> yearOfEra
    org.joda.time.DateTimeField yearOfCentury -> yearOfCentury
    org.joda.time.DateTimeField centuryOfEra -> centuryOfEra
    org.joda.time.DateTimeField era -> era
    void <init>() -> <init>
    void copyFieldsFrom(org.joda.time.Chronology) -> copyFieldsFrom
    boolean isSupported(org.joda.time.DurationField) -> isSupported
    boolean isSupported(org.joda.time.DateTimeField) -> isSupported
org.joda.time.chrono.BaseChronology -> org.joda.time.chrono.BaseChronology:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    org.joda.time.DateTimeZone getZone() -> getZone
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long getDateTimeMillis(int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(int,int,int,int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(long,int,int,int,int) -> getDateTimeMillis
    void validate(org.joda.time.ReadablePartial,int[]) -> validate
    int[] get(org.joda.time.ReadablePartial,long) -> get
    long set(org.joda.time.ReadablePartial,long) -> set
    int[] get(org.joda.time.ReadablePeriod,long,long) -> get
    int[] get(org.joda.time.ReadablePeriod,long) -> get
    long add(org.joda.time.ReadablePeriod,long,int) -> add
    long add(long,long,int) -> add
    org.joda.time.DurationField millis() -> millis
    org.joda.time.DateTimeField millisOfSecond() -> millisOfSecond
    org.joda.time.DateTimeField millisOfDay() -> millisOfDay
    org.joda.time.DurationField seconds() -> seconds
    org.joda.time.DateTimeField secondOfMinute() -> secondOfMinute
    org.joda.time.DateTimeField secondOfDay() -> secondOfDay
    org.joda.time.DurationField minutes() -> minutes
    org.joda.time.DateTimeField minuteOfHour() -> minuteOfHour
    org.joda.time.DateTimeField minuteOfDay() -> minuteOfDay
    org.joda.time.DurationField hours() -> hours
    org.joda.time.DateTimeField hourOfDay() -> hourOfDay
    org.joda.time.DateTimeField clockhourOfDay() -> clockhourOfDay
    org.joda.time.DurationField halfdays() -> halfdays
    org.joda.time.DateTimeField hourOfHalfday() -> hourOfHalfday
    org.joda.time.DateTimeField clockhourOfHalfday() -> clockhourOfHalfday
    org.joda.time.DateTimeField halfdayOfDay() -> halfdayOfDay
    org.joda.time.DurationField days() -> days
    org.joda.time.DateTimeField dayOfWeek() -> dayOfWeek
    org.joda.time.DateTimeField dayOfMonth() -> dayOfMonth
    org.joda.time.DateTimeField dayOfYear() -> dayOfYear
    org.joda.time.DurationField weeks() -> weeks
    org.joda.time.DateTimeField weekOfWeekyear() -> weekOfWeekyear
    org.joda.time.DurationField weekyears() -> weekyears
    org.joda.time.DateTimeField weekyear() -> weekyear
    org.joda.time.DateTimeField weekyearOfCentury() -> weekyearOfCentury
    org.joda.time.DurationField months() -> months
    org.joda.time.DateTimeField monthOfYear() -> monthOfYear
    org.joda.time.DurationField years() -> years
    org.joda.time.DateTimeField year() -> year
    org.joda.time.DateTimeField yearOfEra() -> yearOfEra
    org.joda.time.DateTimeField yearOfCentury() -> yearOfCentury
    org.joda.time.DurationField centuries() -> centuries
    org.joda.time.DateTimeField centuryOfEra() -> centuryOfEra
    org.joda.time.DurationField eras() -> eras
    org.joda.time.DateTimeField era() -> era
    java.lang.String toString() -> toString
org.joda.time.chrono.BasicChronology -> org.joda.time.chrono.BasicChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DurationField cMillisField -> cMillisField
    org.joda.time.DurationField cSecondsField -> cSecondsField
    org.joda.time.DurationField cMinutesField -> cMinutesField
    org.joda.time.DurationField cHoursField -> cHoursField
    org.joda.time.DurationField cHalfdaysField -> cHalfdaysField
    org.joda.time.DurationField cDaysField -> cDaysField
    org.joda.time.DurationField cWeeksField -> cWeeksField
    org.joda.time.DateTimeField cMillisOfSecondField -> cMillisOfSecondField
    org.joda.time.DateTimeField cMillisOfDayField -> cMillisOfDayField
    org.joda.time.DateTimeField cSecondOfMinuteField -> cSecondOfMinuteField
    org.joda.time.DateTimeField cSecondOfDayField -> cSecondOfDayField
    org.joda.time.DateTimeField cMinuteOfHourField -> cMinuteOfHourField
    org.joda.time.DateTimeField cMinuteOfDayField -> cMinuteOfDayField
    org.joda.time.DateTimeField cHourOfDayField -> cHourOfDayField
    org.joda.time.DateTimeField cHourOfHalfdayField -> cHourOfHalfdayField
    org.joda.time.DateTimeField cClockhourOfDayField -> cClockhourOfDayField
    org.joda.time.DateTimeField cClockhourOfHalfdayField -> cClockhourOfHalfdayField
    org.joda.time.DateTimeField cHalfdayOfDayField -> cHalfdayOfDayField
    int CACHE_SIZE -> CACHE_SIZE
    int CACHE_MASK -> CACHE_MASK
    org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache -> iYearInfoCache
    int iMinDaysInFirstWeek -> iMinDaysInFirstWeek
    void <init>(org.joda.time.Chronology,java.lang.Object,int) -> <init>
    org.joda.time.DateTimeZone getZone() -> getZone
    long getDateTimeMillis(int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(int,int,int,int,int,int,int) -> getDateTimeMillis
    int getMinimumDaysInFirstWeek() -> getMinimumDaysInFirstWeek
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    int getDaysInYearMax() -> getDaysInYearMax
    int getDaysInYear(int) -> getDaysInYear
    int getWeeksInYear(int) -> getWeeksInYear
    long getFirstWeekOfYearMillis(int) -> getFirstWeekOfYearMillis
    long getYearMillis(int) -> getYearMillis
    long getYearMonthMillis(int,int) -> getYearMonthMillis
    long getYearMonthDayMillis(int,int,int) -> getYearMonthDayMillis
    int getYear(long) -> getYear
    int getMonthOfYear(long) -> getMonthOfYear
    int getMonthOfYear(long,int) -> getMonthOfYear
    int getDayOfMonth(long) -> getDayOfMonth
    int getDayOfMonth(long,int) -> getDayOfMonth
    int getDayOfMonth(long,int,int) -> getDayOfMonth
    int getDayOfYear(long) -> getDayOfYear
    int getDayOfYear(long,int) -> getDayOfYear
    int getWeekyear(long) -> getWeekyear
    int getWeekOfWeekyear(long) -> getWeekOfWeekyear
    int getWeekOfWeekyear(long,int) -> getWeekOfWeekyear
    int getDayOfWeek(long) -> getDayOfWeek
    int getMillisOfDay(long) -> getMillisOfDay
    int getDaysInMonthMax() -> getDaysInMonthMax
    int getDaysInMonthMax(long) -> getDaysInMonthMax
    int getDaysInMonthMaxForSet(long,int) -> getDaysInMonthMaxForSet
    long getDateMidnightMillis(int,int,int) -> getDateMidnightMillis
    long getYearDifference(long,long) -> getYearDifference
    boolean isLeapYear(int) -> isLeapYear
    int getDaysInYearMonth(int,int) -> getDaysInYearMonth
    int getDaysInMonthMax(int) -> getDaysInMonthMax
    long getTotalMillisByYearMonth(int,int) -> getTotalMillisByYearMonth
    long calculateFirstDayOfYearMillis(int) -> calculateFirstDayOfYearMillis
    int getMinYear() -> getMinYear
    int getMaxYear() -> getMaxYear
    int getMaxMonth(int) -> getMaxMonth
    int getMaxMonth() -> getMaxMonth
    long getAverageMillisPerYear() -> getAverageMillisPerYear
    long getAverageMillisPerYearDividedByTwo() -> getAverageMillisPerYearDividedByTwo
    long getAverageMillisPerMonth() -> getAverageMillisPerMonth
    long getApproxMillisAtEpochDividedByTwo() -> getApproxMillisAtEpochDividedByTwo
    long setYear(long,int) -> setYear
    org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int) -> getYearInfo
    org.joda.time.DurationField access$000() -> access$000
    org.joda.time.DurationField access$100() -> access$100
    void <clinit>() -> <clinit>
org.joda.time.chrono.BasicChronology$HalfdayField -> org.joda.time.chrono.BasicChronology$HalfdayField:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    long set(long,java.lang.String,java.util.Locale) -> set
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
org.joda.time.chrono.BasicChronology$YearInfo -> org.joda.time.chrono.BasicChronology$YearInfo:
    int iYear -> iYear
    long iFirstDayMillis -> iFirstDayMillis
    void <init>(int,long) -> <init>
org.joda.time.chrono.BasicDayOfMonthDateTimeField -> org.joda.time.chrono.BasicDayOfMonthDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField) -> <init>
    int get(long) -> get
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumValueForSet(long,int) -> getMaximumValueForSet
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.BasicDayOfYearDateTimeField -> org.joda.time.chrono.BasicDayOfYearDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField) -> <init>
    int get(long) -> get
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumValueForSet(long,int) -> getMaximumValueForSet
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.BasicFixedMonthChronology -> org.joda.time.chrono.BasicFixedMonthChronology:
    long serialVersionUID -> serialVersionUID
    int MONTH_LENGTH -> MONTH_LENGTH
    long MILLIS_PER_YEAR -> MILLIS_PER_YEAR
    long MILLIS_PER_MONTH -> MILLIS_PER_MONTH
    void <init>(org.joda.time.Chronology,java.lang.Object,int) -> <init>
    long setYear(long,int) -> setYear
    long getYearDifference(long,long) -> getYearDifference
    long getTotalMillisByYearMonth(int,int) -> getTotalMillisByYearMonth
    int getDayOfMonth(long) -> getDayOfMonth
    boolean isLeapYear(int) -> isLeapYear
    int getDaysInYearMonth(int,int) -> getDaysInYearMonth
    int getDaysInMonthMax() -> getDaysInMonthMax
    int getDaysInMonthMax(int) -> getDaysInMonthMax
    int getMonthOfYear(long) -> getMonthOfYear
    int getMonthOfYear(long,int) -> getMonthOfYear
    int getMaxMonth() -> getMaxMonth
    long getAverageMillisPerYear() -> getAverageMillisPerYear
    long getAverageMillisPerYearDividedByTwo() -> getAverageMillisPerYearDividedByTwo
    long getAverageMillisPerMonth() -> getAverageMillisPerMonth
org.joda.time.chrono.BasicGJChronology -> org.joda.time.chrono.BasicGJChronology:
    long serialVersionUID -> serialVersionUID
    int[] MIN_DAYS_PER_MONTH_ARRAY -> MIN_DAYS_PER_MONTH_ARRAY
    int[] MAX_DAYS_PER_MONTH_ARRAY -> MAX_DAYS_PER_MONTH_ARRAY
    long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY -> MIN_TOTAL_MILLIS_BY_MONTH_ARRAY
    long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY -> MAX_TOTAL_MILLIS_BY_MONTH_ARRAY
    long FEB_29 -> FEB_29
    void <init>(org.joda.time.Chronology,java.lang.Object,int) -> <init>
    int getMonthOfYear(long,int) -> getMonthOfYear
    int getDaysInYearMonth(int,int) -> getDaysInYearMonth
    int getDaysInMonthMax(int) -> getDaysInMonthMax
    int getDaysInMonthMaxForSet(long,int) -> getDaysInMonthMaxForSet
    long getTotalMillisByYearMonth(int,int) -> getTotalMillisByYearMonth
    long getYearDifference(long,long) -> getYearDifference
    long setYear(long,int) -> setYear
    void <clinit>() -> <clinit>
org.joda.time.chrono.BasicMonthOfYearDateTimeField -> org.joda.time.chrono.BasicMonthOfYearDateTimeField:
    long serialVersionUID -> serialVersionUID
    int MIN -> MIN
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    int iMax -> iMax
    int iLeapMonth -> iLeapMonth
    void <init>(org.joda.time.chrono.BasicChronology,int) -> <init>
    boolean isLenient() -> isLenient
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    int[] add(org.joda.time.ReadablePartial,int,int[],int) -> add
    long addWrapField(long,int) -> addWrapField
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long remainder(long) -> remainder
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.BasicSingleEraDateTimeField -> org.joda.time.chrono.BasicSingleEraDateTimeField:
    int ERA_VALUE -> ERA_VALUE
    java.lang.String iEraText -> iEraText
    void <init>(java.lang.String) -> <init>
    boolean isLenient() -> isLenient
    int get(long) -> get
    long set(long,int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField -> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField) -> <init>
    int get(long) -> get
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long remainder(long) -> remainder
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumValueForSet(long,int) -> getMaximumValueForSet
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.BasicWeekyearDateTimeField -> org.joda.time.chrono.BasicWeekyearDateTimeField:
    long serialVersionUID -> serialVersionUID
    long WEEK_53 -> WEEK_53
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.chrono.BasicChronology) -> <init>
    boolean isLenient() -> isLenient
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long remainder(long) -> remainder
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.BasicYearDateTimeField -> org.joda.time.chrono.BasicYearDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.chrono.BasicChronology) -> <init>
    boolean isLenient() -> isLenient
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    long set(long,int) -> set
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long remainder(long) -> remainder
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.BuddhistChronology -> org.joda.time.chrono.BuddhistChronology:
    long serialVersionUID -> serialVersionUID
    int BE -> BE
    org.joda.time.DateTimeField ERA_FIELD -> ERA_FIELD
    int BUDDHIST_OFFSET -> BUDDHIST_OFFSET
    java.util.Map cCache -> cCache
    org.joda.time.chrono.BuddhistChronology INSTANCE_UTC -> INSTANCE_UTC
    org.joda.time.chrono.BuddhistChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.BuddhistChronology getInstance() -> getInstance
    org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    void <init>(org.joda.time.Chronology,java.lang.Object) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    void <clinit>() -> <clinit>
org.joda.time.chrono.CopticChronology -> org.joda.time.chrono.CopticChronology:
    long serialVersionUID -> serialVersionUID
    int AM -> AM
    org.joda.time.DateTimeField ERA_FIELD -> ERA_FIELD
    int MIN_YEAR -> MIN_YEAR
    int MAX_YEAR -> MAX_YEAR
    java.util.Map cCache -> cCache
    org.joda.time.chrono.CopticChronology INSTANCE_UTC -> INSTANCE_UTC
    org.joda.time.chrono.CopticChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.CopticChronology getInstance() -> getInstance
    org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int) -> getInstance
    void <init>(org.joda.time.Chronology,java.lang.Object,int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long calculateFirstDayOfYearMillis(int) -> calculateFirstDayOfYearMillis
    int getMinYear() -> getMinYear
    int getMaxYear() -> getMaxYear
    long getApproxMillisAtEpochDividedByTwo() -> getApproxMillisAtEpochDividedByTwo
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    void <clinit>() -> <clinit>
org.joda.time.chrono.EthiopicChronology -> org.joda.time.chrono.EthiopicChronology:
    long serialVersionUID -> serialVersionUID
    int EE -> EE
    org.joda.time.DateTimeField ERA_FIELD -> ERA_FIELD
    int MIN_YEAR -> MIN_YEAR
    int MAX_YEAR -> MAX_YEAR
    java.util.Map cCache -> cCache
    org.joda.time.chrono.EthiopicChronology INSTANCE_UTC -> INSTANCE_UTC
    org.joda.time.chrono.EthiopicChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.EthiopicChronology getInstance() -> getInstance
    org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int) -> getInstance
    void <init>(org.joda.time.Chronology,java.lang.Object,int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long calculateFirstDayOfYearMillis(int) -> calculateFirstDayOfYearMillis
    int getMinYear() -> getMinYear
    int getMaxYear() -> getMaxYear
    long getApproxMillisAtEpochDividedByTwo() -> getApproxMillisAtEpochDividedByTwo
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    void <clinit>() -> <clinit>
org.joda.time.chrono.GJChronology -> org.joda.time.chrono.GJChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Instant DEFAULT_CUTOVER -> DEFAULT_CUTOVER
    java.util.Map cCache -> cCache
    org.joda.time.chrono.JulianChronology iJulianChronology -> iJulianChronology
    org.joda.time.chrono.GregorianChronology iGregorianChronology -> iGregorianChronology
    org.joda.time.Instant iCutoverInstant -> iCutoverInstant
    long iCutoverMillis -> iCutoverMillis
    long iGapDuration -> iGapDuration
    long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology) -> convertByYear
    long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology) -> convertByWeekyear
    org.joda.time.chrono.GJChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.GJChronology getInstance() -> getInstance
    org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant) -> getInstance
    org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int) -> getInstance
    org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int) -> getInstance
    void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant) -> <init>
    void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.DateTimeZone getZone() -> getZone
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long getDateTimeMillis(int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(int,int,int,int,int,int,int) -> getDateTimeMillis
    org.joda.time.Instant getGregorianCutover() -> getGregorianCutover
    int getMinimumDaysInFirstWeek() -> getMinimumDaysInFirstWeek
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    long julianToGregorianByYear(long) -> julianToGregorianByYear
    long gregorianToJulianByYear(long) -> gregorianToJulianByYear
    long julianToGregorianByWeekyear(long) -> julianToGregorianByWeekyear
    long gregorianToJulianByWeekyear(long) -> gregorianToJulianByWeekyear
    long access$000(org.joda.time.chrono.GJChronology) -> access$000
    org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology) -> access$100
    void <clinit>() -> <clinit>
org.joda.time.chrono.GJChronology$CutoverField -> org.joda.time.chrono.GJChronology$CutoverField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeField iJulianField -> iJulianField
    org.joda.time.DateTimeField iGregorianField -> iGregorianField
    long iCutover -> iCutover
    boolean iConvertByWeekyear -> iConvertByWeekyear
    org.joda.time.DurationField iDurationField -> iDurationField
    org.joda.time.DurationField iRangeDurationField -> iRangeDurationField
    org.joda.time.chrono.GJChronology this$0 -> this$0
    void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long) -> <init>
    void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean) -> <init>
    boolean isLenient() -> isLenient
    int get(long) -> get
    java.lang.String getAsText(long,java.util.Locale) -> getAsText
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(long,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    long add(long,int) -> add
    long add(long,long) -> add
    int[] add(org.joda.time.ReadablePartial,int,int[],int) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial,int[]) -> getMinimumValue
    int getMinimumValue(long) -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    long julianToGregorian(long) -> julianToGregorian
    long gregorianToJulian(long) -> gregorianToJulian
org.joda.time.chrono.GJChronology$ImpreciseCutoverField -> org.joda.time.chrono.GJChronology$ImpreciseCutoverField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.GJChronology this$0 -> this$0
    void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long) -> <init>
    void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long) -> <init>
    void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean) -> <init>
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    int getMinimumValue(long) -> getMinimumValue
    int getMaximumValue(long) -> getMaximumValue
org.joda.time.chrono.GJChronology$LinkedDurationField -> org.joda.time.chrono.GJChronology$LinkedDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.GJChronology$ImpreciseCutoverField iField -> iField
    void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField) -> <init>
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
org.joda.time.chrono.GJDayOfWeekDateTimeField -> org.joda.time.chrono.GJDayOfWeekDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField) -> <init>
    int get(long) -> get
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    int convertText(java.lang.String,java.util.Locale) -> convertText
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.GJEraDateTimeField -> org.joda.time.chrono.GJEraDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.chrono.BasicChronology) -> <init>
    boolean isLenient() -> isLenient
    int get(long) -> get
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    long set(long,int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.GJLocaleSymbols -> org.joda.time.chrono.GJLocaleSymbols:
    int FAST_CACHE_SIZE -> FAST_CACHE_SIZE
    org.joda.time.chrono.GJLocaleSymbols[] cFastCache -> cFastCache
    java.util.WeakHashMap cCache -> cCache
    java.lang.ref.WeakReference iLocale -> iLocale
    java.lang.String[] iEras -> iEras
    java.lang.String[] iDaysOfWeek -> iDaysOfWeek
    java.lang.String[] iShortDaysOfWeek -> iShortDaysOfWeek
    java.lang.String[] iMonths -> iMonths
    java.lang.String[] iShortMonths -> iShortMonths
    java.lang.String[] iHalfday -> iHalfday
    java.util.TreeMap iParseEras -> iParseEras
    java.util.TreeMap iParseDaysOfWeek -> iParseDaysOfWeek
    java.util.TreeMap iParseMonths -> iParseMonths
    int iMaxEraLength -> iMaxEraLength
    int iMaxDayOfWeekLength -> iMaxDayOfWeekLength
    int iMaxShortDayOfWeekLength -> iMaxShortDayOfWeekLength
    int iMaxMonthLength -> iMaxMonthLength
    int iMaxShortMonthLength -> iMaxShortMonthLength
    int iMaxHalfdayLength -> iMaxHalfdayLength
    org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale) -> forLocale
    java.lang.String[] realignMonths(java.lang.String[]) -> realignMonths
    java.lang.String[] realignDaysOfWeek(java.lang.String[]) -> realignDaysOfWeek
    void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[]) -> addSymbols
    void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[]) -> addNumerals
    int maxLength(java.lang.String[]) -> maxLength
    void <init>(java.util.Locale) -> <init>
    java.lang.String eraValueToText(int) -> eraValueToText
    int eraTextToValue(java.lang.String) -> eraTextToValue
    int getEraMaxTextLength() -> getEraMaxTextLength
    java.lang.String monthOfYearValueToText(int) -> monthOfYearValueToText
    java.lang.String monthOfYearValueToShortText(int) -> monthOfYearValueToShortText
    int monthOfYearTextToValue(java.lang.String) -> monthOfYearTextToValue
    int getMonthMaxTextLength() -> getMonthMaxTextLength
    int getMonthMaxShortTextLength() -> getMonthMaxShortTextLength
    java.lang.String dayOfWeekValueToText(int) -> dayOfWeekValueToText
    java.lang.String dayOfWeekValueToShortText(int) -> dayOfWeekValueToShortText
    int dayOfWeekTextToValue(java.lang.String) -> dayOfWeekTextToValue
    int getDayOfWeekMaxTextLength() -> getDayOfWeekMaxTextLength
    int getDayOfWeekMaxShortTextLength() -> getDayOfWeekMaxShortTextLength
    java.lang.String halfdayValueToText(int) -> halfdayValueToText
    int halfdayTextToValue(java.lang.String) -> halfdayTextToValue
    int getHalfdayMaxTextLength() -> getHalfdayMaxTextLength
    void <clinit>() -> <clinit>
org.joda.time.chrono.GJMonthOfYearDateTimeField -> org.joda.time.chrono.GJMonthOfYearDateTimeField:
    long serialVersionUID -> serialVersionUID
    void <init>(org.joda.time.chrono.BasicChronology) -> <init>
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    int convertText(java.lang.String,java.util.Locale) -> convertText
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
org.joda.time.chrono.GJYearOfEraDateTimeField -> org.joda.time.chrono.GJYearOfEraDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.BasicChronology iChronology -> iChronology
    void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology) -> <init>
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long remainder(long) -> remainder
    java.lang.Object readResolve() -> readResolve
org.joda.time.chrono.GregorianChronology -> org.joda.time.chrono.GregorianChronology:
    long serialVersionUID -> serialVersionUID
    long MILLIS_PER_YEAR -> MILLIS_PER_YEAR
    long MILLIS_PER_MONTH -> MILLIS_PER_MONTH
    int DAYS_0000_TO_1970 -> DAYS_0000_TO_1970
    int MIN_YEAR -> MIN_YEAR
    int MAX_YEAR -> MAX_YEAR
    org.joda.time.chrono.GregorianChronology INSTANCE_UTC -> INSTANCE_UTC
    java.util.Map cCache -> cCache
    org.joda.time.chrono.GregorianChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.GregorianChronology getInstance() -> getInstance
    org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int) -> getInstance
    void <init>(org.joda.time.Chronology,java.lang.Object,int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    boolean isLeapYear(int) -> isLeapYear
    long calculateFirstDayOfYearMillis(int) -> calculateFirstDayOfYearMillis
    int getMinYear() -> getMinYear
    int getMaxYear() -> getMaxYear
    long getAverageMillisPerYear() -> getAverageMillisPerYear
    long getAverageMillisPerYearDividedByTwo() -> getAverageMillisPerYearDividedByTwo
    long getAverageMillisPerMonth() -> getAverageMillisPerMonth
    long getApproxMillisAtEpochDividedByTwo() -> getApproxMillisAtEpochDividedByTwo
    void <clinit>() -> <clinit>
org.joda.time.chrono.ISOChronology -> org.joda.time.chrono.ISOChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.ISOChronology INSTANCE_UTC -> INSTANCE_UTC
    int FAST_CACHE_SIZE -> FAST_CACHE_SIZE
    org.joda.time.chrono.ISOChronology[] cFastCache -> cFastCache
    java.util.Map cCache -> cCache
    org.joda.time.chrono.ISOChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.ISOChronology getInstance() -> getInstance
    org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    void <init>(org.joda.time.Chronology) -> <init>
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    java.lang.String toString() -> toString
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    void <clinit>() -> <clinit>
org.joda.time.chrono.ISOChronology$Stub -> org.joda.time.chrono.ISOChronology$Stub:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeZone iZone -> iZone
    void <init>(org.joda.time.DateTimeZone) -> <init>
    java.lang.Object readResolve() -> readResolve
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
org.joda.time.chrono.ISOYearOfEraDateTimeField -> org.joda.time.chrono.ISOYearOfEraDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeField INSTANCE -> INSTANCE
    void <init>() -> <init>
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long remainder(long) -> remainder
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
org.joda.time.chrono.IslamicChronology -> org.joda.time.chrono.IslamicChronology:
    long serialVersionUID -> serialVersionUID
    int AH -> AH
    org.joda.time.DateTimeField ERA_FIELD -> ERA_FIELD
    org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_15_BASED -> LEAP_YEAR_15_BASED
    org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED -> LEAP_YEAR_16_BASED
    org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_INDIAN -> LEAP_YEAR_INDIAN
    org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB -> LEAP_YEAR_HABASH_AL_HASIB
    int MIN_YEAR -> MIN_YEAR
    int MAX_YEAR -> MAX_YEAR
    int MONTH_PAIR_LENGTH -> MONTH_PAIR_LENGTH
    int LONG_MONTH_LENGTH -> LONG_MONTH_LENGTH
    int SHORT_MONTH_LENGTH -> SHORT_MONTH_LENGTH
    long MILLIS_PER_MONTH_PAIR -> MILLIS_PER_MONTH_PAIR
    long MILLIS_PER_MONTH -> MILLIS_PER_MONTH
    long MILLIS_PER_LONG_MONTH -> MILLIS_PER_LONG_MONTH
    long MILLIS_PER_YEAR -> MILLIS_PER_YEAR
    long MILLIS_PER_SHORT_YEAR -> MILLIS_PER_SHORT_YEAR
    long MILLIS_PER_LONG_YEAR -> MILLIS_PER_LONG_YEAR
    long MILLIS_YEAR_1 -> MILLIS_YEAR_1
    int CYCLE -> CYCLE
    long MILLIS_PER_CYCLE -> MILLIS_PER_CYCLE
    java.util.Map cCache -> cCache
    org.joda.time.chrono.IslamicChronology INSTANCE_UTC -> INSTANCE_UTC
    org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears -> iLeapYears
    org.joda.time.chrono.IslamicChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.IslamicChronology getInstance() -> getInstance
    org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType) -> getInstance
    void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType() -> getLeapYearPatternType
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getYear(long) -> getYear
    long setYear(long,int) -> setYear
    long getYearDifference(long,long) -> getYearDifference
    long getTotalMillisByYearMonth(int,int) -> getTotalMillisByYearMonth
    int getDayOfMonth(long) -> getDayOfMonth
    boolean isLeapYear(int) -> isLeapYear
    int getDaysInYearMax() -> getDaysInYearMax
    int getDaysInYear(int) -> getDaysInYear
    int getDaysInYearMonth(int,int) -> getDaysInYearMonth
    int getDaysInMonthMax() -> getDaysInMonthMax
    int getDaysInMonthMax(int) -> getDaysInMonthMax
    int getMonthOfYear(long,int) -> getMonthOfYear
    long getAverageMillisPerYear() -> getAverageMillisPerYear
    long getAverageMillisPerYearDividedByTwo() -> getAverageMillisPerYearDividedByTwo
    long getAverageMillisPerMonth() -> getAverageMillisPerMonth
    long calculateFirstDayOfYearMillis(int) -> calculateFirstDayOfYearMillis
    int getMinYear() -> getMinYear
    int getMaxYear() -> getMaxYear
    long getApproxMillisAtEpochDividedByTwo() -> getApproxMillisAtEpochDividedByTwo
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    void <clinit>() -> <clinit>
org.joda.time.chrono.IslamicChronology$LeapYearPatternType -> org.joda.time.chrono.IslamicChronology$LeapYearPatternType:
    long serialVersionUID -> serialVersionUID
    byte index -> index
    int pattern -> pattern
    void <init>(int,int) -> <init>
    boolean isLeapYear(int) -> isLeapYear
    java.lang.Object readResolve() -> readResolve
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.joda.time.chrono.JulianChronology -> org.joda.time.chrono.JulianChronology:
    long serialVersionUID -> serialVersionUID
    long MILLIS_PER_YEAR -> MILLIS_PER_YEAR
    long MILLIS_PER_MONTH -> MILLIS_PER_MONTH
    int MIN_YEAR -> MIN_YEAR
    int MAX_YEAR -> MAX_YEAR
    org.joda.time.chrono.JulianChronology INSTANCE_UTC -> INSTANCE_UTC
    java.util.Map cCache -> cCache
    int adjustYearForSet(int) -> adjustYearForSet
    org.joda.time.chrono.JulianChronology getInstanceUTC() -> getInstanceUTC
    org.joda.time.chrono.JulianChronology getInstance() -> getInstance
    org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone) -> getInstance
    org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int) -> getInstance
    void <init>(org.joda.time.Chronology,java.lang.Object,int) -> <init>
    java.lang.Object readResolve() -> readResolve
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long getDateMidnightMillis(int,int,int) -> getDateMidnightMillis
    boolean isLeapYear(int) -> isLeapYear
    long calculateFirstDayOfYearMillis(int) -> calculateFirstDayOfYearMillis
    int getMinYear() -> getMinYear
    int getMaxYear() -> getMaxYear
    long getAverageMillisPerYear() -> getAverageMillisPerYear
    long getAverageMillisPerYearDividedByTwo() -> getAverageMillisPerYearDividedByTwo
    long getAverageMillisPerMonth() -> getAverageMillisPerMonth
    long getApproxMillisAtEpochDividedByTwo() -> getApproxMillisAtEpochDividedByTwo
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    void <clinit>() -> <clinit>
org.joda.time.chrono.LenientChronology -> org.joda.time.chrono.LenientChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iWithUTC -> iWithUTC
    org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology) -> getInstance
    void <init>(org.joda.time.Chronology) -> <init>
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField) -> convertField
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.chrono.LimitChronology -> org.joda.time.chrono.LimitChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTime iLowerLimit -> iLowerLimit
    org.joda.time.DateTime iUpperLimit -> iUpperLimit
    org.joda.time.chrono.LimitChronology iWithUTC -> iWithUTC
    org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime) -> getInstance
    void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime) -> <init>
    org.joda.time.DateTime getLowerLimit() -> getLowerLimit
    org.joda.time.DateTime getUpperLimit() -> getUpperLimit
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long getDateTimeMillis(int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(int,int,int,int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(long,int,int,int,int) -> getDateTimeMillis
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap) -> convertField
    org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap) -> convertField
    void checkLimits(long,java.lang.String) -> checkLimits
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.chrono.LimitChronology$LimitDateTimeField -> org.joda.time.chrono.LimitChronology$LimitDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DurationField iDurationField -> iDurationField
    org.joda.time.DurationField iRangeDurationField -> iRangeDurationField
    org.joda.time.DurationField iLeapDurationField -> iLeapDurationField
    org.joda.time.chrono.LimitChronology this$0 -> this$0
    void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField) -> <init>
    int get(long) -> get
    java.lang.String getAsText(long,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(long,java.util.Locale) -> getAsShortText
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
    int getMinimumValue(long) -> getMinimumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
org.joda.time.chrono.LimitChronology$LimitDurationField -> org.joda.time.chrono.LimitChronology$LimitDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.LimitChronology this$0 -> this$0
    void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField) -> <init>
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
org.joda.time.chrono.LimitChronology$LimitException -> org.joda.time.chrono.LimitChronology$LimitException:
    long serialVersionUID -> serialVersionUID
    boolean iIsLow -> iIsLow
    org.joda.time.chrono.LimitChronology this$0 -> this$0
    void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
org.joda.time.chrono.StrictChronology -> org.joda.time.chrono.StrictChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iWithUTC -> iWithUTC
    org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology) -> getInstance
    void <init>(org.joda.time.Chronology) -> <init>
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField) -> convertField
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.chrono.ZonedChronology -> org.joda.time.chrono.ZonedChronology:
    long serialVersionUID -> serialVersionUID
    org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone) -> getInstance
    boolean useTimeArithmetic(org.joda.time.DurationField) -> useTimeArithmetic
    void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone) -> <init>
    org.joda.time.DateTimeZone getZone() -> getZone
    org.joda.time.Chronology withUTC() -> withUTC
    org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) -> withZone
    long getDateTimeMillis(int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(int,int,int,int,int,int,int) -> getDateTimeMillis
    long getDateTimeMillis(long,int,int,int,int) -> getDateTimeMillis
    long localToUTC(long) -> localToUTC
    void assemble(org.joda.time.chrono.AssembledChronology$Fields) -> assemble
    org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap) -> convertField
    org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap) -> convertField
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField -> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeField iField -> iField
    org.joda.time.DateTimeZone iZone -> iZone
    org.joda.time.DurationField iDurationField -> iDurationField
    boolean iTimeField -> iTimeField
    org.joda.time.DurationField iRangeDurationField -> iRangeDurationField
    org.joda.time.DurationField iLeapDurationField -> iLeapDurationField
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField) -> <init>
    boolean isLenient() -> isLenient
    int get(long) -> get
    java.lang.String getAsText(long,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(long,java.util.Locale) -> getAsShortText
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    long set(long,int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long remainder(long) -> remainder
    int getMinimumValue() -> getMinimumValue
    int getMinimumValue(long) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial,int[]) -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    int getOffsetToAdd(long) -> getOffsetToAdd
org.joda.time.chrono.ZonedChronology$ZonedDurationField -> org.joda.time.chrono.ZonedChronology$ZonedDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DurationField iField -> iField
    boolean iTimeField -> iTimeField
    org.joda.time.DateTimeZone iZone -> iZone
    void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone) -> <init>
    boolean isPrecise() -> isPrecise
    long getUnitMillis() -> getUnitMillis
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    int getOffsetToAdd(long) -> getOffsetToAdd
    int getOffsetFromLocalToSubtract(long) -> getOffsetFromLocalToSubtract
    long addOffset(long) -> addOffset
org.joda.time.convert.AbstractConverter -> org.joda.time.convert.AbstractConverter:
    void <init>() -> <init>
    long getInstantMillis(java.lang.Object,org.joda.time.Chronology) -> getInstantMillis
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone) -> getChronology
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology) -> getChronology
    int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology) -> getPartialValues
    int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter) -> getPartialValues
    org.joda.time.PeriodType getPeriodType(java.lang.Object) -> getPeriodType
    boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology) -> isReadableInterval
    java.lang.String toString() -> toString
org.joda.time.convert.CalendarConverter -> org.joda.time.convert.CalendarConverter:
    org.joda.time.convert.CalendarConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology) -> getChronology
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone) -> getChronology
    long getInstantMillis(java.lang.Object,org.joda.time.Chronology) -> getInstantMillis
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.Converter -> org.joda.time.convert.Converter:
    java.lang.Class getSupportedType() -> getSupportedType
org.joda.time.convert.ConverterManager -> org.joda.time.convert.ConverterManager:
    org.joda.time.convert.ConverterManager INSTANCE -> INSTANCE
    org.joda.time.convert.ConverterSet iInstantConverters -> iInstantConverters
    org.joda.time.convert.ConverterSet iPartialConverters -> iPartialConverters
    org.joda.time.convert.ConverterSet iDurationConverters -> iDurationConverters
    org.joda.time.convert.ConverterSet iPeriodConverters -> iPeriodConverters
    org.joda.time.convert.ConverterSet iIntervalConverters -> iIntervalConverters
    org.joda.time.convert.ConverterManager getInstance() -> getInstance
    void <init>() -> <init>
    org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object) -> getInstantConverter
    org.joda.time.convert.InstantConverter[] getInstantConverters() -> getInstantConverters
    org.joda.time.convert.InstantConverter addInstantConverter(org.joda.time.convert.InstantConverter) -> addInstantConverter
    org.joda.time.convert.InstantConverter removeInstantConverter(org.joda.time.convert.InstantConverter) -> removeInstantConverter
    void checkAlterInstantConverters() -> checkAlterInstantConverters
    org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object) -> getPartialConverter
    org.joda.time.convert.PartialConverter[] getPartialConverters() -> getPartialConverters
    org.joda.time.convert.PartialConverter addPartialConverter(org.joda.time.convert.PartialConverter) -> addPartialConverter
    org.joda.time.convert.PartialConverter removePartialConverter(org.joda.time.convert.PartialConverter) -> removePartialConverter
    void checkAlterPartialConverters() -> checkAlterPartialConverters
    org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object) -> getDurationConverter
    org.joda.time.convert.DurationConverter[] getDurationConverters() -> getDurationConverters
    org.joda.time.convert.DurationConverter addDurationConverter(org.joda.time.convert.DurationConverter) -> addDurationConverter
    org.joda.time.convert.DurationConverter removeDurationConverter(org.joda.time.convert.DurationConverter) -> removeDurationConverter
    void checkAlterDurationConverters() -> checkAlterDurationConverters
    org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object) -> getPeriodConverter
    org.joda.time.convert.PeriodConverter[] getPeriodConverters() -> getPeriodConverters
    org.joda.time.convert.PeriodConverter addPeriodConverter(org.joda.time.convert.PeriodConverter) -> addPeriodConverter
    org.joda.time.convert.PeriodConverter removePeriodConverter(org.joda.time.convert.PeriodConverter) -> removePeriodConverter
    void checkAlterPeriodConverters() -> checkAlterPeriodConverters
    org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object) -> getIntervalConverter
    org.joda.time.convert.IntervalConverter[] getIntervalConverters() -> getIntervalConverters
    org.joda.time.convert.IntervalConverter addIntervalConverter(org.joda.time.convert.IntervalConverter) -> addIntervalConverter
    org.joda.time.convert.IntervalConverter removeIntervalConverter(org.joda.time.convert.IntervalConverter) -> removeIntervalConverter
    void checkAlterIntervalConverters() -> checkAlterIntervalConverters
    java.lang.String toString() -> toString
org.joda.time.convert.ConverterSet -> org.joda.time.convert.ConverterSet:
    org.joda.time.convert.Converter[] iConverters -> iConverters
    org.joda.time.convert.ConverterSet$Entry[] iSelectEntries -> iSelectEntries
    void <init>(org.joda.time.convert.Converter[]) -> <init>
    org.joda.time.convert.Converter select(java.lang.Class) -> select
    int size() -> size
    void copyInto(org.joda.time.convert.Converter[]) -> copyInto
    org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[]) -> add
    org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[]) -> remove
    org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[]) -> remove
    org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class) -> selectSlow
org.joda.time.convert.ConverterSet$Entry -> org.joda.time.convert.ConverterSet$Entry:
    java.lang.Class iType -> iType
    org.joda.time.convert.Converter iConverter -> iConverter
    void <init>(java.lang.Class,org.joda.time.convert.Converter) -> <init>
org.joda.time.convert.DateConverter -> org.joda.time.convert.DateConverter:
    org.joda.time.convert.DateConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    long getInstantMillis(java.lang.Object,org.joda.time.Chronology) -> getInstantMillis
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.DurationConverter -> org.joda.time.convert.DurationConverter:
    long getDurationMillis(java.lang.Object) -> getDurationMillis
org.joda.time.convert.InstantConverter -> org.joda.time.convert.InstantConverter:
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone) -> getChronology
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology) -> getChronology
    long getInstantMillis(java.lang.Object,org.joda.time.Chronology) -> getInstantMillis
org.joda.time.convert.IntervalConverter -> org.joda.time.convert.IntervalConverter:
    boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology) -> isReadableInterval
    void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology) -> setInto
org.joda.time.convert.LongConverter -> org.joda.time.convert.LongConverter:
    org.joda.time.convert.LongConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    long getInstantMillis(java.lang.Object,org.joda.time.Chronology) -> getInstantMillis
    long getDurationMillis(java.lang.Object) -> getDurationMillis
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.NullConverter -> org.joda.time.convert.NullConverter:
    org.joda.time.convert.NullConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    long getDurationMillis(java.lang.Object) -> getDurationMillis
    void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology) -> setInto
    void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology) -> setInto
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.PartialConverter -> org.joda.time.convert.PartialConverter:
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone) -> getChronology
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology) -> getChronology
    int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology) -> getPartialValues
    int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter) -> getPartialValues
org.joda.time.convert.PeriodConverter -> org.joda.time.convert.PeriodConverter:
    void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology) -> setInto
    org.joda.time.PeriodType getPeriodType(java.lang.Object) -> getPeriodType
org.joda.time.convert.ReadableDurationConverter -> org.joda.time.convert.ReadableDurationConverter:
    org.joda.time.convert.ReadableDurationConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    long getDurationMillis(java.lang.Object) -> getDurationMillis
    void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology) -> setInto
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.ReadableInstantConverter -> org.joda.time.convert.ReadableInstantConverter:
    org.joda.time.convert.ReadableInstantConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone) -> getChronology
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology) -> getChronology
    long getInstantMillis(java.lang.Object,org.joda.time.Chronology) -> getInstantMillis
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.ReadableIntervalConverter -> org.joda.time.convert.ReadableIntervalConverter:
    org.joda.time.convert.ReadableIntervalConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    long getDurationMillis(java.lang.Object) -> getDurationMillis
    void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology) -> setInto
    boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology) -> isReadableInterval
    void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology) -> setInto
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.ReadablePartialConverter -> org.joda.time.convert.ReadablePartialConverter:
    org.joda.time.convert.ReadablePartialConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone) -> getChronology
    org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology) -> getChronology
    int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology) -> getPartialValues
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.ReadablePeriodConverter -> org.joda.time.convert.ReadablePeriodConverter:
    org.joda.time.convert.ReadablePeriodConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology) -> setInto
    org.joda.time.PeriodType getPeriodType(java.lang.Object) -> getPeriodType
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.convert.StringConverter -> org.joda.time.convert.StringConverter:
    org.joda.time.convert.StringConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    long getInstantMillis(java.lang.Object,org.joda.time.Chronology) -> getInstantMillis
    int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter) -> getPartialValues
    long getDurationMillis(java.lang.Object) -> getDurationMillis
    void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology) -> setInto
    void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology) -> setInto
    java.lang.Class getSupportedType() -> getSupportedType
    void <clinit>() -> <clinit>
org.joda.time.field.AbstractPartialFieldProperty -> org.joda.time.field.AbstractPartialFieldProperty:
    void <init>() -> <init>
    org.joda.time.DateTimeField getField() -> getField
    org.joda.time.DateTimeFieldType getFieldType() -> getFieldType
    java.lang.String getName() -> getName
    org.joda.time.ReadablePartial getReadablePartial() -> getReadablePartial
    int get() -> get
    java.lang.String getAsString() -> getAsString
    java.lang.String getAsText() -> getAsText
    java.lang.String getAsText(java.util.Locale) -> getAsText
    java.lang.String getAsShortText() -> getAsShortText
    java.lang.String getAsShortText(java.util.Locale) -> getAsShortText
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValueOverall() -> getMinimumValueOverall
    int getMinimumValue() -> getMinimumValue
    int getMaximumValueOverall() -> getMaximumValueOverall
    int getMaximumValue() -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    int compareTo(org.joda.time.ReadableInstant) -> compareTo
    int compareTo(org.joda.time.ReadablePartial) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.field.AbstractReadableInstantFieldProperty -> org.joda.time.field.AbstractReadableInstantFieldProperty:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    org.joda.time.DateTimeField getField() -> getField
    org.joda.time.DateTimeFieldType getFieldType() -> getFieldType
    java.lang.String getName() -> getName
    long getMillis() -> getMillis
    org.joda.time.Chronology getChronology() -> getChronology
    int get() -> get
    java.lang.String getAsString() -> getAsString
    java.lang.String getAsText() -> getAsText
    java.lang.String getAsText(java.util.Locale) -> getAsText
    java.lang.String getAsShortText() -> getAsShortText
    java.lang.String getAsShortText(java.util.Locale) -> getAsShortText
    int getDifference(org.joda.time.ReadableInstant) -> getDifference
    long getDifferenceAsLong(org.joda.time.ReadableInstant) -> getDifferenceAsLong
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap() -> isLeap
    int getLeapAmount() -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValueOverall() -> getMinimumValueOverall
    int getMinimumValue() -> getMinimumValue
    int getMaximumValueOverall() -> getMaximumValueOverall
    int getMaximumValue() -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    long remainder() -> remainder
    org.joda.time.Interval toInterval() -> toInterval
    int compareTo(org.joda.time.ReadableInstant) -> compareTo
    int compareTo(org.joda.time.ReadablePartial) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.joda.time.field.BaseDateTimeField -> org.joda.time.field.BaseDateTimeField:
    org.joda.time.DateTimeFieldType iType -> iType
    void <init>(org.joda.time.DateTimeFieldType) -> <init>
    org.joda.time.DateTimeFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    int get(long) -> get
    java.lang.String getAsText(long,java.util.Locale) -> getAsText
    java.lang.String getAsText(long) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsText
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(long,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(long) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    long add(long,int) -> add
    long add(long,long) -> add
    int[] add(org.joda.time.ReadablePartial,int,int[],int) -> add
    int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int) -> addWrapPartial
    long addWrapField(long,int) -> addWrapField
    int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    long set(long,java.lang.String) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale) -> set
    int convertText(java.lang.String,java.util.Locale) -> convertText
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMinimumValue(long) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial,int[]) -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
    java.lang.String toString() -> toString
org.joda.time.field.BaseDurationField -> org.joda.time.field.BaseDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DurationFieldType iType -> iType
    void <init>(org.joda.time.DurationFieldType) -> <init>
    org.joda.time.DurationFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    int getValue(long) -> getValue
    long getValueAsLong(long) -> getValueAsLong
    int getValue(long,long) -> getValue
    long getMillis(int) -> getMillis
    long getMillis(long) -> getMillis
    int getDifference(long,long) -> getDifference
    int compareTo(org.joda.time.DurationField) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.field.DecoratedDateTimeField -> org.joda.time.field.DecoratedDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeField iField -> iField
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType) -> <init>
    org.joda.time.DateTimeField getWrappedField() -> getWrappedField
    boolean isLenient() -> isLenient
    int get(long) -> get
    long set(long,int) -> set
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
org.joda.time.field.DecoratedDurationField -> org.joda.time.field.DecoratedDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DurationField iField -> iField
    void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType) -> <init>
    org.joda.time.DurationField getWrappedField() -> getWrappedField
    boolean isPrecise() -> isPrecise
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long getUnitMillis() -> getUnitMillis
org.joda.time.field.DelegatedDateTimeField -> org.joda.time.field.DelegatedDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeField iField -> iField
    org.joda.time.DateTimeFieldType iType -> iType
    void <init>(org.joda.time.DateTimeField) -> <init>
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType) -> <init>
    org.joda.time.DateTimeField getWrappedField() -> getWrappedField
    org.joda.time.DateTimeFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    boolean isLenient() -> isLenient
    int get(long) -> get
    java.lang.String getAsText(long,java.util.Locale) -> getAsText
    java.lang.String getAsText(long) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsText
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(long,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(long) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    long add(long,int) -> add
    long add(long,long) -> add
    int[] add(org.joda.time.ReadablePartial,int,int[],int) -> add
    int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int) -> addWrapPartial
    long addWrapField(long,int) -> addWrapField
    int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    long set(long,java.lang.String) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],int) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale) -> set
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMinimumValue(long) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial,int[]) -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
    java.lang.String toString() -> toString
org.joda.time.field.DelegatedDurationField -> org.joda.time.field.DelegatedDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DurationField iField -> iField
    org.joda.time.DurationFieldType iType -> iType
    void <init>(org.joda.time.DurationField) -> <init>
    void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType) -> <init>
    org.joda.time.DurationField getWrappedField() -> getWrappedField
    org.joda.time.DurationFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    boolean isPrecise() -> isPrecise
    int getValue(long) -> getValue
    long getValueAsLong(long) -> getValueAsLong
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int) -> getMillis
    long getMillis(long) -> getMillis
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long getUnitMillis() -> getUnitMillis
    int compareTo(org.joda.time.DurationField) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.field.DividedDateTimeField -> org.joda.time.field.DividedDateTimeField:
    long serialVersionUID -> serialVersionUID
    int iDivisor -> iDivisor
    org.joda.time.DurationField iDurationField -> iDurationField
    int iMin -> iMin
    int iMax -> iMax
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int) -> <init>
    void <init>(org.joda.time.field.RemainderDateTimeField,org.joda.time.DateTimeFieldType) -> <init>
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    org.joda.time.DurationField getDurationField() -> getDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long remainder(long) -> remainder
    int getDivisor() -> getDivisor
    int getRemainder(int) -> getRemainder
org.joda.time.field.FieldUtils -> org.joda.time.field.FieldUtils:
    void <init>() -> <init>
    int safeNegate(int) -> safeNegate
    int safeAdd(int,int) -> safeAdd
    long safeAdd(long,long) -> safeAdd
    long safeSubtract(long,long) -> safeSubtract
    int safeMultiply(int,int) -> safeMultiply
    long safeMultiply(long,int) -> safeMultiply
    long safeMultiply(long,long) -> safeMultiply
    int safeToInt(long) -> safeToInt
    int safeMultiplyToInt(long,long) -> safeMultiplyToInt
    void verifyValueBounds(org.joda.time.DateTimeField,int,int,int) -> verifyValueBounds
    void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int) -> verifyValueBounds
    void verifyValueBounds(java.lang.String,int,int,int) -> verifyValueBounds
    int getWrappedValue(int,int,int,int) -> getWrappedValue
    int getWrappedValue(int,int,int) -> getWrappedValue
    boolean equals(java.lang.Object,java.lang.Object) -> equals
org.joda.time.field.ImpreciseDateTimeField -> org.joda.time.field.ImpreciseDateTimeField:
    long serialVersionUID -> serialVersionUID
    long iUnitMillis -> iUnitMillis
    org.joda.time.DurationField iDurationField -> iDurationField
    void <init>(org.joda.time.DateTimeFieldType,long) -> <init>
    int get(long) -> get
    long set(long,int) -> set
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    long roundFloor(long) -> roundFloor
    long getDurationUnitMillis() -> getDurationUnitMillis
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField -> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.field.ImpreciseDateTimeField this$0 -> this$0
    void <init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType) -> <init>
    boolean isPrecise() -> isPrecise
    long getUnitMillis() -> getUnitMillis
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
org.joda.time.field.LenientDateTimeField -> org.joda.time.field.LenientDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iBase -> iBase
    org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology) -> getInstance
    void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology) -> <init>
    boolean isLenient() -> isLenient
    long set(long,int) -> set
org.joda.time.field.MillisDurationField -> org.joda.time.field.MillisDurationField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DurationField INSTANCE -> INSTANCE
    void <init>() -> <init>
    org.joda.time.DurationFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    boolean isPrecise() -> isPrecise
    long getUnitMillis() -> getUnitMillis
    int getValue(long) -> getValue
    long getValueAsLong(long) -> getValueAsLong
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int) -> getMillis
    long getMillis(long) -> getMillis
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    int compareTo(org.joda.time.DurationField) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
org.joda.time.field.OffsetDateTimeField -> org.joda.time.field.OffsetDateTimeField:
    long serialVersionUID -> serialVersionUID
    int iOffset -> iOffset
    int iMin -> iMin
    int iMax -> iMax
    void <init>(org.joda.time.DateTimeField,int) -> <init>
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int) -> <init>
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int) -> <init>
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    long set(long,int) -> set
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
    int getOffset() -> getOffset
org.joda.time.field.PreciseDateTimeField -> org.joda.time.field.PreciseDateTimeField:
    long serialVersionUID -> serialVersionUID
    int iRange -> iRange
    org.joda.time.DurationField iRangeField -> iRangeField
    void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField) -> <init>
    int get(long) -> get
    long addWrapField(long,int) -> addWrapField
    long set(long,int) -> set
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMaximumValue() -> getMaximumValue
    int getRange() -> getRange
org.joda.time.field.PreciseDurationDateTimeField -> org.joda.time.field.PreciseDurationDateTimeField:
    long serialVersionUID -> serialVersionUID
    long iUnitMillis -> iUnitMillis
    org.joda.time.DurationField iUnitField -> iUnitField
    void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField) -> <init>
    boolean isLenient() -> isLenient
    long set(long,int) -> set
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long remainder(long) -> remainder
    org.joda.time.DurationField getDurationField() -> getDurationField
    int getMinimumValue() -> getMinimumValue
    long getUnitMillis() -> getUnitMillis
    int getMaximumValueForSet(long,int) -> getMaximumValueForSet
org.joda.time.field.PreciseDurationField -> org.joda.time.field.PreciseDurationField:
    long serialVersionUID -> serialVersionUID
    long iUnitMillis -> iUnitMillis
    void <init>(org.joda.time.DurationFieldType,long) -> <init>
    boolean isPrecise() -> isPrecise
    long getUnitMillis() -> getUnitMillis
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.joda.time.field.RemainderDateTimeField -> org.joda.time.field.RemainderDateTimeField:
    long serialVersionUID -> serialVersionUID
    int iDivisor -> iDivisor
    org.joda.time.DurationField iRangeField -> iRangeField
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int) -> <init>
    void <init>(org.joda.time.field.DividedDateTimeField) -> <init>
    void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType) -> <init>
    int get(long) -> get
    long addWrapField(long,int) -> addWrapField
    long set(long,int) -> set
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    int getMinimumValue() -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
    int getDivisor() -> getDivisor
    int getDivided(int) -> getDivided
org.joda.time.field.ScaledDurationField -> org.joda.time.field.ScaledDurationField:
    long serialVersionUID -> serialVersionUID
    int iScalar -> iScalar
    void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int) -> <init>
    int getValue(long) -> getValue
    long getValueAsLong(long) -> getValueAsLong
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int) -> getMillis
    long getMillis(long) -> getMillis
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long getUnitMillis() -> getUnitMillis
    int getScalar() -> getScalar
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.joda.time.field.SkipDateTimeField -> org.joda.time.field.SkipDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iChronology -> iChronology
    int iSkip -> iSkip
    int iMinValue -> iMinValue
    void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField) -> <init>
    void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int) -> <init>
    int get(long) -> get
    long set(long,int) -> set
    int getMinimumValue() -> getMinimumValue
    java.lang.Object readResolve() -> readResolve
org.joda.time.field.SkipUndoDateTimeField -> org.joda.time.field.SkipUndoDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.Chronology iChronology -> iChronology
    int iSkip -> iSkip
    int iMinValue -> iMinValue
    void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField) -> <init>
    void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int) -> <init>
    int get(long) -> get
    long set(long,int) -> set
    int getMinimumValue() -> getMinimumValue
    java.lang.Object readResolve() -> readResolve
org.joda.time.field.StrictDateTimeField -> org.joda.time.field.StrictDateTimeField:
    long serialVersionUID -> serialVersionUID
    org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField) -> getInstance
    void <init>(org.joda.time.DateTimeField) -> <init>
    boolean isLenient() -> isLenient
    long set(long,int) -> set
org.joda.time.field.UnsupportedDateTimeField -> org.joda.time.field.UnsupportedDateTimeField:
    long serialVersionUID -> serialVersionUID
    java.util.HashMap cCache -> cCache
    org.joda.time.DateTimeFieldType iType -> iType
    org.joda.time.DurationField iDurationField -> iDurationField
    org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField) -> getInstance
    void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField) -> <init>
    org.joda.time.DateTimeFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    boolean isLenient() -> isLenient
    int get(long) -> get
    java.lang.String getAsText(long,java.util.Locale) -> getAsText
    java.lang.String getAsText(long) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsText
    java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsText
    java.lang.String getAsText(int,java.util.Locale) -> getAsText
    java.lang.String getAsShortText(long,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(long) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale) -> getAsShortText
    java.lang.String getAsShortText(int,java.util.Locale) -> getAsShortText
    long add(long,int) -> add
    long add(long,long) -> add
    int[] add(org.joda.time.ReadablePartial,int,int[],int) -> add
    int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int) -> addWrapPartial
    long addWrapField(long,int) -> addWrapField
    int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],int) -> set
    long set(long,java.lang.String,java.util.Locale) -> set
    long set(long,java.lang.String) -> set
    int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale) -> set
    org.joda.time.DurationField getDurationField() -> getDurationField
    org.joda.time.DurationField getRangeDurationField() -> getRangeDurationField
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMinimumValue(long) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial,int[]) -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    int getMaximumTextLength(java.util.Locale) -> getMaximumTextLength
    int getMaximumShortTextLength(java.util.Locale) -> getMaximumShortTextLength
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.UnsupportedOperationException unsupported() -> unsupported
org.joda.time.field.UnsupportedDurationField -> org.joda.time.field.UnsupportedDurationField:
    long serialVersionUID -> serialVersionUID
    java.util.HashMap cCache -> cCache
    org.joda.time.DurationFieldType iType -> iType
    org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType) -> getInstance
    void <init>(org.joda.time.DurationFieldType) -> <init>
    org.joda.time.DurationFieldType getType() -> getType
    java.lang.String getName() -> getName
    boolean isSupported() -> isSupported
    boolean isPrecise() -> isPrecise
    int getValue(long) -> getValue
    long getValueAsLong(long) -> getValueAsLong
    int getValue(long,long) -> getValue
    long getValueAsLong(long,long) -> getValueAsLong
    long getMillis(int) -> getMillis
    long getMillis(long) -> getMillis
    long getMillis(int,long) -> getMillis
    long getMillis(long,long) -> getMillis
    long add(long,int) -> add
    long add(long,long) -> add
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long getUnitMillis() -> getUnitMillis
    int compareTo(org.joda.time.DurationField) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.UnsupportedOperationException unsupported() -> unsupported
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.field.ZeroIsMaxDateTimeField -> org.joda.time.field.ZeroIsMaxDateTimeField:
    long serialVersionUID -> serialVersionUID
    void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType) -> <init>
    int get(long) -> get
    long add(long,int) -> add
    long add(long,long) -> add
    long addWrapField(long,int) -> addWrapField
    int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int) -> addWrapField
    int getDifference(long,long) -> getDifference
    long getDifferenceAsLong(long,long) -> getDifferenceAsLong
    long set(long,int) -> set
    boolean isLeap(long) -> isLeap
    int getLeapAmount(long) -> getLeapAmount
    org.joda.time.DurationField getLeapDurationField() -> getLeapDurationField
    int getMinimumValue() -> getMinimumValue
    int getMinimumValue(long) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial) -> getMinimumValue
    int getMinimumValue(org.joda.time.ReadablePartial,int[]) -> getMinimumValue
    int getMaximumValue() -> getMaximumValue
    int getMaximumValue(long) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial) -> getMaximumValue
    int getMaximumValue(org.joda.time.ReadablePartial,int[]) -> getMaximumValue
    long roundFloor(long) -> roundFloor
    long roundCeiling(long) -> roundCeiling
    long roundHalfFloor(long) -> roundHalfFloor
    long roundHalfCeiling(long) -> roundHalfCeiling
    long roundHalfEven(long) -> roundHalfEven
    long remainder(long) -> remainder
org.joda.time.format.DateTimeFormat -> org.joda.time.format.DateTimeFormat:
    int FULL -> FULL
    int LONG -> LONG
    int MEDIUM -> MEDIUM
    int SHORT -> SHORT
    int NONE -> NONE
    int DATE -> DATE
    int TIME -> TIME
    int DATETIME -> DATETIME
    int PATTERN_CACHE_SIZE -> PATTERN_CACHE_SIZE
    java.util.Map PATTERN_CACHE -> PATTERN_CACHE
    org.joda.time.format.DateTimeFormatter[] STYLE_CACHE -> STYLE_CACHE
    org.joda.time.format.DateTimeFormatter forPattern(java.lang.String) -> forPattern
    org.joda.time.format.DateTimeFormatter forStyle(java.lang.String) -> forStyle
    java.lang.String patternForStyle(java.lang.String,java.util.Locale) -> patternForStyle
    org.joda.time.format.DateTimeFormatter shortDate() -> shortDate
    org.joda.time.format.DateTimeFormatter shortTime() -> shortTime
    org.joda.time.format.DateTimeFormatter shortDateTime() -> shortDateTime
    org.joda.time.format.DateTimeFormatter mediumDate() -> mediumDate
    org.joda.time.format.DateTimeFormatter mediumTime() -> mediumTime
    org.joda.time.format.DateTimeFormatter mediumDateTime() -> mediumDateTime
    org.joda.time.format.DateTimeFormatter longDate() -> longDate
    org.joda.time.format.DateTimeFormatter longTime() -> longTime
    org.joda.time.format.DateTimeFormatter longDateTime() -> longDateTime
    org.joda.time.format.DateTimeFormatter fullDate() -> fullDate
    org.joda.time.format.DateTimeFormatter fullTime() -> fullTime
    org.joda.time.format.DateTimeFormatter fullDateTime() -> fullDateTime
    void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String) -> appendPatternTo
    void <init>() -> <init>
    void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String) -> parsePatternTo
    java.lang.String parseToken(java.lang.String,int[]) -> parseToken
    boolean isNumericToken(java.lang.String) -> isNumericToken
    org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String) -> createFormatterForPattern
    org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String) -> createFormatterForStyle
    org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int) -> createFormatterForStyleIndex
    org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int) -> createDateTimeFormatter
    int selectStyle(char) -> selectStyle
    void <clinit>() -> <clinit>
org.joda.time.format.DateTimeFormat$1 -> org.joda.time.format.DateTimeFormat$1:
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.joda.time.format.DateTimeFormat$StyleFormatter -> org.joda.time.format.DateTimeFormat$StyleFormatter:
    java.util.Map cCache -> cCache
    int iDateStyle -> iDateStyle
    int iTimeStyle -> iTimeStyle
    int iType -> iType
    void <init>(int,int,int) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
    org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale) -> getFormatter
    java.lang.String getPattern(java.util.Locale) -> getPattern
    void <clinit>() -> <clinit>
org.joda.time.format.DateTimeFormatter -> org.joda.time.format.DateTimeFormatter:
    org.joda.time.format.DateTimePrinter iPrinter -> iPrinter
    org.joda.time.format.DateTimeParser iParser -> iParser
    java.util.Locale iLocale -> iLocale
    boolean iOffsetParsed -> iOffsetParsed
    org.joda.time.Chronology iChrono -> iChrono
    org.joda.time.DateTimeZone iZone -> iZone
    java.lang.Integer iPivotYear -> iPivotYear
    int iDefaultYear -> iDefaultYear
    void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser) -> <init>
    void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int) -> <init>
    boolean isPrinter() -> isPrinter
    org.joda.time.format.DateTimePrinter getPrinter() -> getPrinter
    boolean isParser() -> isParser
    org.joda.time.format.DateTimeParser getParser() -> getParser
    org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale) -> withLocale
    java.util.Locale getLocale() -> getLocale
    org.joda.time.format.DateTimeFormatter withOffsetParsed() -> withOffsetParsed
    boolean isOffsetParsed() -> isOffsetParsed
    org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology) -> withChronology
    org.joda.time.Chronology getChronology() -> getChronology
    org.joda.time.Chronology getChronolgy() -> getChronolgy
    org.joda.time.format.DateTimeFormatter withZoneUTC() -> withZoneUTC
    org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone) -> withZone
    org.joda.time.DateTimeZone getZone() -> getZone
    org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer) -> withPivotYear
    org.joda.time.format.DateTimeFormatter withPivotYear(int) -> withPivotYear
    java.lang.Integer getPivotYear() -> getPivotYear
    org.joda.time.format.DateTimeFormatter withDefaultYear(int) -> withDefaultYear
    int getDefaultYear() -> getDefaultYear
    void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadableInstant) -> printTo
    void printTo(java.lang.Appendable,org.joda.time.ReadableInstant) -> printTo
    void printTo(java.lang.StringBuffer,long) -> printTo
    void printTo(java.io.Writer,long) -> printTo
    void printTo(java.lang.Appendable,long) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial) -> printTo
    void printTo(java.lang.Appendable,org.joda.time.ReadablePartial) -> printTo
    java.lang.String print(org.joda.time.ReadableInstant) -> print
    java.lang.String print(long) -> print
    java.lang.String print(org.joda.time.ReadablePartial) -> print
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology) -> printTo
    org.joda.time.format.DateTimePrinter requirePrinter() -> requirePrinter
    int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int) -> parseInto
    long parseMillis(java.lang.String) -> parseMillis
    org.joda.time.LocalDate parseLocalDate(java.lang.String) -> parseLocalDate
    org.joda.time.LocalTime parseLocalTime(java.lang.String) -> parseLocalTime
    org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String) -> parseLocalDateTime
    org.joda.time.DateTime parseDateTime(java.lang.String) -> parseDateTime
    org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String) -> parseMutableDateTime
    org.joda.time.format.DateTimeParser requireParser() -> requireParser
    org.joda.time.Chronology selectChronology(org.joda.time.Chronology) -> selectChronology
org.joda.time.format.DateTimeFormatterBuilder -> org.joda.time.format.DateTimeFormatterBuilder:
    java.util.ArrayList iElementPairs -> iElementPairs
    java.lang.Object iFormatter -> iFormatter
    void <init>() -> <init>
    org.joda.time.format.DateTimeFormatter toFormatter() -> toFormatter
    org.joda.time.format.DateTimePrinter toPrinter() -> toPrinter
    org.joda.time.format.DateTimeParser toParser() -> toParser
    boolean canBuildFormatter() -> canBuildFormatter
    boolean canBuildPrinter() -> canBuildPrinter
    boolean canBuildParser() -> canBuildParser
    void clear() -> clear
    org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter) -> append
    org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter) -> append
    org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser) -> append
    org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser) -> append
    org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[]) -> append
    org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser) -> appendOptional
    void checkParser(org.joda.time.format.DateTimeParser) -> checkParser
    void checkPrinter(org.joda.time.format.DateTimePrinter) -> checkPrinter
    org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object) -> append0
    org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser) -> append0
    org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char) -> appendLiteral
    org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String) -> appendLiteral
    org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int) -> appendDecimal
    org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int) -> appendFixedDecimal
    org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int) -> appendSignedDecimal
    org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int) -> appendFixedSignedDecimal
    org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType) -> appendText
    org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType) -> appendShortText
    org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int) -> appendFraction
    org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int) -> appendFractionOfSecond
    org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int) -> appendFractionOfMinute
    org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int) -> appendFractionOfHour
    org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int,int) -> appendFractionOfDay
    org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int) -> appendMillisOfSecond
    org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int) -> appendMillisOfDay
    org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int) -> appendSecondOfMinute
    org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int) -> appendSecondOfDay
    org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int) -> appendMinuteOfHour
    org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int) -> appendMinuteOfDay
    org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int) -> appendHourOfDay
    org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int) -> appendClockhourOfDay
    org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int) -> appendHourOfHalfday
    org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int) -> appendClockhourOfHalfday
    org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int) -> appendDayOfWeek
    org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int) -> appendDayOfMonth
    org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int) -> appendDayOfYear
    org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int) -> appendWeekOfWeekyear
    org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int) -> appendWeekyear
    org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int) -> appendMonthOfYear
    org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int) -> appendYear
    org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int) -> appendTwoDigitYear
    org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean) -> appendTwoDigitYear
    org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int) -> appendTwoDigitWeekyear
    org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean) -> appendTwoDigitWeekyear
    org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int) -> appendYearOfEra
    org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int,int) -> appendYearOfCentury
    org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int) -> appendCenturyOfEra
    org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText() -> appendHalfdayOfDayText
    org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText() -> appendDayOfWeekText
    org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText() -> appendDayOfWeekShortText
    org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText() -> appendMonthOfYearText
    org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText() -> appendMonthOfYearShortText
    org.joda.time.format.DateTimeFormatterBuilder appendEraText() -> appendEraText
    org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName() -> appendTimeZoneName
    org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName(java.util.Map) -> appendTimeZoneName
    org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName() -> appendTimeZoneShortName
    org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map) -> appendTimeZoneShortName
    org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId() -> appendTimeZoneId
    org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int) -> appendTimeZoneOffset
    org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int) -> appendTimeZoneOffset
    org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String) -> appendPattern
    java.lang.Object getFormatter() -> getFormatter
    boolean isPrinter(java.lang.Object) -> isPrinter
    boolean isParser(java.lang.Object) -> isParser
    boolean isFormatter(java.lang.Object) -> isFormatter
    void appendUnknownString(java.lang.StringBuffer,int) -> appendUnknownString
    void printUnknownString(java.io.Writer,int) -> printUnknownString
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral -> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:
    char iValue -> iValue
    void <init>(char) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeFormatterBuilder$Composite -> org.joda.time.format.DateTimeFormatterBuilder$Composite:
    org.joda.time.format.DateTimePrinter[] iPrinters -> iPrinters
    org.joda.time.format.DateTimeParser[] iParsers -> iParsers
    int iPrintedLengthEstimate -> iPrintedLengthEstimate
    int iParsedLengthEstimate -> iParsedLengthEstimate
    void <init>(java.util.List) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
    boolean isPrinter() -> isPrinter
    boolean isParser() -> isParser
    void decompose(java.util.List,java.util.List,java.util.List) -> decompose
    void addArrayToList(java.util.List,java.lang.Object[]) -> addArrayToList
org.joda.time.format.DateTimeFormatterBuilder$FixedNumber -> org.joda.time.format.DateTimeFormatterBuilder$FixedNumber:
    void <init>(org.joda.time.DateTimeFieldType,int,boolean) -> <init>
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeFormatterBuilder$Fraction -> org.joda.time.format.DateTimeFormatterBuilder$Fraction:
    org.joda.time.DateTimeFieldType iFieldType -> iFieldType
    int iMinDigits -> iMinDigits
    int iMaxDigits -> iMaxDigits
    void <init>(org.joda.time.DateTimeFieldType,int,int) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology) -> printTo
    long[] getFractionData(long,org.joda.time.DateTimeField) -> getFractionData
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser -> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:
    org.joda.time.format.DateTimeParser[] iParsers -> iParsers
    int iParsedLengthEstimate -> iParsedLengthEstimate
    void <init>(org.joda.time.format.DateTimeParser[]) -> <init>
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter -> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:
    org.joda.time.DateTimeFieldType iFieldType -> iFieldType
    int iMaxParsedDigits -> iMaxParsedDigits
    boolean iSigned -> iSigned
    void <init>(org.joda.time.DateTimeFieldType,int,boolean) -> <init>
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber -> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:
    int iMinPrintedDigits -> iMinPrintedDigits
    void <init>(org.joda.time.DateTimeFieldType,int,boolean,int) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral -> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:
    java.lang.String iValue -> iValue
    void <init>(java.lang.String) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeFormatterBuilder$TextField -> org.joda.time.format.DateTimeFormatterBuilder$TextField:
    java.util.Map cParseCache -> cParseCache
    org.joda.time.DateTimeFieldType iFieldType -> iFieldType
    boolean iShort -> iShort
    void <init>(org.joda.time.DateTimeFieldType,boolean) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    java.lang.String print(long,org.joda.time.Chronology,java.util.Locale) -> print
    java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale) -> print
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
    void <clinit>() -> <clinit>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId -> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:
    org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE -> INSTANCE
    java.util.Set ALL_IDS -> ALL_IDS
    int MAX_LENGTH -> MAX_LENGTH
    org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $VALUES -> $VALUES
    org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values() -> values
    org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
    void <clinit>() -> <clinit>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName -> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName:
    int LONG_NAME -> LONG_NAME
    int SHORT_NAME -> SHORT_NAME
    java.util.Map iParseLookup -> iParseLookup
    int iType -> iType
    void <init>(int,java.util.Map) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale) -> print
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset -> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:
    java.lang.String iZeroOffsetPrintText -> iZeroOffsetPrintText
    java.lang.String iZeroOffsetParseText -> iZeroOffsetParseText
    boolean iShowSeparators -> iShowSeparators
    int iMinFields -> iMinFields
    int iMaxFields -> iMaxFields
    void <init>(java.lang.String,java.lang.String,boolean,int,int) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
    int digitCount(java.lang.String,int,int) -> digitCount
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear -> org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear:
    org.joda.time.DateTimeFieldType iType -> iType
    int iPivot -> iPivot
    boolean iLenientParse -> iLenientParse
    void <init>(org.joda.time.DateTimeFieldType,int,boolean) -> <init>
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    int getTwoDigitYear(long,org.joda.time.Chronology) -> getTwoDigitYear
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    int getTwoDigitYear(org.joda.time.ReadablePartial) -> getTwoDigitYear
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber -> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber:
    void <init>(org.joda.time.DateTimeFieldType,int,boolean) -> <init>
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
org.joda.time.format.DateTimeParser -> org.joda.time.format.DateTimeParser:
    int estimateParsedLength() -> estimateParsedLength
    int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) -> parseInto
org.joda.time.format.DateTimeParserBucket -> org.joda.time.format.DateTimeParserBucket:
    org.joda.time.Chronology iChrono -> iChrono
    long iMillis -> iMillis
    org.joda.time.DateTimeZone iZone -> iZone
    java.lang.Integer iOffset -> iOffset
    java.util.Locale iLocale -> iLocale
    java.lang.Integer iPivotYear -> iPivotYear
    int iDefaultYear -> iDefaultYear
    org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields -> iSavedFields
    int iSavedFieldsCount -> iSavedFieldsCount
    boolean iSavedFieldsShared -> iSavedFieldsShared
    java.lang.Object iSavedState -> iSavedState
    void <init>(long,org.joda.time.Chronology,java.util.Locale) -> <init>
    void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer) -> <init>
    void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int) -> <init>
    org.joda.time.Chronology getChronology() -> getChronology
    java.util.Locale getLocale() -> getLocale
    org.joda.time.DateTimeZone getZone() -> getZone
    void setZone(org.joda.time.DateTimeZone) -> setZone
    int getOffset() -> getOffset
    java.lang.Integer getOffsetInteger() -> getOffsetInteger
    void setOffset(int) -> setOffset
    void setOffset(java.lang.Integer) -> setOffset
    java.lang.Integer getPivotYear() -> getPivotYear
    void setPivotYear(java.lang.Integer) -> setPivotYear
    void saveField(org.joda.time.DateTimeField,int) -> saveField
    void saveField(org.joda.time.DateTimeFieldType,int) -> saveField
    void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale) -> saveField
    void saveField(org.joda.time.format.DateTimeParserBucket$SavedField) -> saveField
    java.lang.Object saveState() -> saveState
    boolean restoreState(java.lang.Object) -> restoreState
    long computeMillis() -> computeMillis
    long computeMillis(boolean) -> computeMillis
    long computeMillis(boolean,java.lang.String) -> computeMillis
    void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int) -> sort
    int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField) -> compareReverse
    org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket) -> access$000
    java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket) -> access$100
    org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket) -> access$200
    int access$300(org.joda.time.format.DateTimeParserBucket) -> access$300
    org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone) -> access$002
    java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer) -> access$102
    org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[]) -> access$202
    boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean) -> access$402
    int access$302(org.joda.time.format.DateTimeParserBucket,int) -> access$302
org.joda.time.format.DateTimeParserBucket$SavedField -> org.joda.time.format.DateTimeParserBucket$SavedField:
    org.joda.time.DateTimeField iField -> iField
    int iValue -> iValue
    java.lang.String iText -> iText
    java.util.Locale iLocale -> iLocale
    void <init>(org.joda.time.DateTimeField,int) -> <init>
    void <init>(org.joda.time.DateTimeField,java.lang.String,java.util.Locale) -> <init>
    long set(long,boolean) -> set
    int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.joda.time.format.DateTimeParserBucket$SavedState -> org.joda.time.format.DateTimeParserBucket$SavedState:
    org.joda.time.DateTimeZone iZone -> iZone
    java.lang.Integer iOffset -> iOffset
    org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields -> iSavedFields
    int iSavedFieldsCount -> iSavedFieldsCount
    org.joda.time.format.DateTimeParserBucket this$0 -> this$0
    void <init>(org.joda.time.format.DateTimeParserBucket) -> <init>
    boolean restoreState(org.joda.time.format.DateTimeParserBucket) -> restoreState
org.joda.time.format.DateTimePrinter -> org.joda.time.format.DateTimePrinter:
    int estimatePrintedLength() -> estimatePrintedLength
    void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) -> printTo
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) -> printTo
org.joda.time.format.FormatUtils -> org.joda.time.format.FormatUtils:
    double LOG_10 -> LOG_10
    void <init>() -> <init>
    void appendPaddedInteger(java.lang.StringBuffer,int,int) -> appendPaddedInteger
    void appendPaddedInteger(java.lang.StringBuffer,long,int) -> appendPaddedInteger
    void writePaddedInteger(java.io.Writer,int,int) -> writePaddedInteger
    void writePaddedInteger(java.io.Writer,long,int) -> writePaddedInteger
    void appendUnpaddedInteger(java.lang.StringBuffer,int) -> appendUnpaddedInteger
    void appendUnpaddedInteger(java.lang.StringBuffer,long) -> appendUnpaddedInteger
    void writeUnpaddedInteger(java.io.Writer,int) -> writeUnpaddedInteger
    void writeUnpaddedInteger(java.io.Writer,long) -> writeUnpaddedInteger
    int calculateDigitCount(long) -> calculateDigitCount
    int parseTwoDigits(java.lang.String,int) -> parseTwoDigits
    java.lang.String createErrorMessage(java.lang.String,int) -> createErrorMessage
    void <clinit>() -> <clinit>
org.joda.time.format.ISODateTimeFormat -> org.joda.time.format.ISODateTimeFormat:
    void <init>() -> <init>
    org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean) -> forFields
    boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean) -> dateByMonth
    boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean) -> dateByOrdinal
    boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean) -> dateByWeek
    void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean) -> time
    void checkNotStrictISO(java.util.Collection,boolean) -> checkNotStrictISO
    void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean) -> appendSeparator
    org.joda.time.format.DateTimeFormatter dateParser() -> dateParser
    org.joda.time.format.DateTimeFormatter localDateParser() -> localDateParser
    org.joda.time.format.DateTimeFormatter dateElementParser() -> dateElementParser
    org.joda.time.format.DateTimeFormatter timeParser() -> timeParser
    org.joda.time.format.DateTimeFormatter localTimeParser() -> localTimeParser
    org.joda.time.format.DateTimeFormatter timeElementParser() -> timeElementParser
    org.joda.time.format.DateTimeFormatter dateTimeParser() -> dateTimeParser
    org.joda.time.format.DateTimeFormatter dateOptionalTimeParser() -> dateOptionalTimeParser
    org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser() -> localDateOptionalTimeParser
    org.joda.time.format.DateTimeFormatter date() -> date
    org.joda.time.format.DateTimeFormatter time() -> time
    org.joda.time.format.DateTimeFormatter timeNoMillis() -> timeNoMillis
    org.joda.time.format.DateTimeFormatter tTime() -> tTime
    org.joda.time.format.DateTimeFormatter tTimeNoMillis() -> tTimeNoMillis
    org.joda.time.format.DateTimeFormatter dateTime() -> dateTime
    org.joda.time.format.DateTimeFormatter dateTimeNoMillis() -> dateTimeNoMillis
    org.joda.time.format.DateTimeFormatter ordinalDate() -> ordinalDate
    org.joda.time.format.DateTimeFormatter ordinalDateTime() -> ordinalDateTime
    org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis() -> ordinalDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter weekDate() -> weekDate
    org.joda.time.format.DateTimeFormatter weekDateTime() -> weekDateTime
    org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis() -> weekDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicDate() -> basicDate
    org.joda.time.format.DateTimeFormatter basicTime() -> basicTime
    org.joda.time.format.DateTimeFormatter basicTimeNoMillis() -> basicTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicTTime() -> basicTTime
    org.joda.time.format.DateTimeFormatter basicTTimeNoMillis() -> basicTTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicDateTime() -> basicDateTime
    org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis() -> basicDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicOrdinalDate() -> basicOrdinalDate
    org.joda.time.format.DateTimeFormatter basicOrdinalDateTime() -> basicOrdinalDateTime
    org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis() -> basicOrdinalDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicWeekDate() -> basicWeekDate
    org.joda.time.format.DateTimeFormatter basicWeekDateTime() -> basicWeekDateTime
    org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis() -> basicWeekDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter year() -> year
    org.joda.time.format.DateTimeFormatter yearMonth() -> yearMonth
    org.joda.time.format.DateTimeFormatter yearMonthDay() -> yearMonthDay
    org.joda.time.format.DateTimeFormatter weekyear() -> weekyear
    org.joda.time.format.DateTimeFormatter weekyearWeek() -> weekyearWeek
    org.joda.time.format.DateTimeFormatter weekyearWeekDay() -> weekyearWeekDay
    org.joda.time.format.DateTimeFormatter hour() -> hour
    org.joda.time.format.DateTimeFormatter hourMinute() -> hourMinute
    org.joda.time.format.DateTimeFormatter hourMinuteSecond() -> hourMinuteSecond
    org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis() -> hourMinuteSecondMillis
    org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction() -> hourMinuteSecondFraction
    org.joda.time.format.DateTimeFormatter dateHour() -> dateHour
    org.joda.time.format.DateTimeFormatter dateHourMinute() -> dateHourMinute
    org.joda.time.format.DateTimeFormatter dateHourMinuteSecond() -> dateHourMinuteSecond
    org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis() -> dateHourMinuteSecondMillis
    org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction() -> dateHourMinuteSecondFraction
org.joda.time.format.ISODateTimeFormat$Constants -> org.joda.time.format.ISODateTimeFormat$Constants:
    org.joda.time.format.DateTimeFormatter ye -> ye
    org.joda.time.format.DateTimeFormatter mye -> mye
    org.joda.time.format.DateTimeFormatter dme -> dme
    org.joda.time.format.DateTimeFormatter we -> we
    org.joda.time.format.DateTimeFormatter wwe -> wwe
    org.joda.time.format.DateTimeFormatter dwe -> dwe
    org.joda.time.format.DateTimeFormatter dye -> dye
    org.joda.time.format.DateTimeFormatter hde -> hde
    org.joda.time.format.DateTimeFormatter mhe -> mhe
    org.joda.time.format.DateTimeFormatter sme -> sme
    org.joda.time.format.DateTimeFormatter fse -> fse
    org.joda.time.format.DateTimeFormatter ze -> ze
    org.joda.time.format.DateTimeFormatter lte -> lte
    org.joda.time.format.DateTimeFormatter ym -> ym
    org.joda.time.format.DateTimeFormatter ymd -> ymd
    org.joda.time.format.DateTimeFormatter ww -> ww
    org.joda.time.format.DateTimeFormatter wwd -> wwd
    org.joda.time.format.DateTimeFormatter hm -> hm
    org.joda.time.format.DateTimeFormatter hms -> hms
    org.joda.time.format.DateTimeFormatter hmsl -> hmsl
    org.joda.time.format.DateTimeFormatter hmsf -> hmsf
    org.joda.time.format.DateTimeFormatter dh -> dh
    org.joda.time.format.DateTimeFormatter dhm -> dhm
    org.joda.time.format.DateTimeFormatter dhms -> dhms
    org.joda.time.format.DateTimeFormatter dhmsl -> dhmsl
    org.joda.time.format.DateTimeFormatter dhmsf -> dhmsf
    org.joda.time.format.DateTimeFormatter t -> t
    org.joda.time.format.DateTimeFormatter tx -> tx
    org.joda.time.format.DateTimeFormatter tt -> tt
    org.joda.time.format.DateTimeFormatter ttx -> ttx
    org.joda.time.format.DateTimeFormatter dt -> dt
    org.joda.time.format.DateTimeFormatter dtx -> dtx
    org.joda.time.format.DateTimeFormatter wdt -> wdt
    org.joda.time.format.DateTimeFormatter wdtx -> wdtx
    org.joda.time.format.DateTimeFormatter od -> od
    org.joda.time.format.DateTimeFormatter odt -> odt
    org.joda.time.format.DateTimeFormatter odtx -> odtx
    org.joda.time.format.DateTimeFormatter bd -> bd
    org.joda.time.format.DateTimeFormatter bt -> bt
    org.joda.time.format.DateTimeFormatter btx -> btx
    org.joda.time.format.DateTimeFormatter btt -> btt
    org.joda.time.format.DateTimeFormatter bttx -> bttx
    org.joda.time.format.DateTimeFormatter bdt -> bdt
    org.joda.time.format.DateTimeFormatter bdtx -> bdtx
    org.joda.time.format.DateTimeFormatter bod -> bod
    org.joda.time.format.DateTimeFormatter bodt -> bodt
    org.joda.time.format.DateTimeFormatter bodtx -> bodtx
    org.joda.time.format.DateTimeFormatter bwd -> bwd
    org.joda.time.format.DateTimeFormatter bwdt -> bwdt
    org.joda.time.format.DateTimeFormatter bwdtx -> bwdtx
    org.joda.time.format.DateTimeFormatter dpe -> dpe
    org.joda.time.format.DateTimeFormatter tpe -> tpe
    org.joda.time.format.DateTimeFormatter dp -> dp
    org.joda.time.format.DateTimeFormatter ldp -> ldp
    org.joda.time.format.DateTimeFormatter tp -> tp
    org.joda.time.format.DateTimeFormatter ltp -> ltp
    org.joda.time.format.DateTimeFormatter dtp -> dtp
    org.joda.time.format.DateTimeFormatter dotp -> dotp
    org.joda.time.format.DateTimeFormatter ldotp -> ldotp
    void <init>() -> <init>
    org.joda.time.format.DateTimeFormatter dateParser() -> dateParser
    org.joda.time.format.DateTimeFormatter localDateParser() -> localDateParser
    org.joda.time.format.DateTimeFormatter dateElementParser() -> dateElementParser
    org.joda.time.format.DateTimeFormatter timeParser() -> timeParser
    org.joda.time.format.DateTimeFormatter localTimeParser() -> localTimeParser
    org.joda.time.format.DateTimeFormatter timeElementParser() -> timeElementParser
    org.joda.time.format.DateTimeFormatter dateTimeParser() -> dateTimeParser
    org.joda.time.format.DateTimeFormatter dateOptionalTimeParser() -> dateOptionalTimeParser
    org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser() -> localDateOptionalTimeParser
    org.joda.time.format.DateTimeFormatter time() -> time
    org.joda.time.format.DateTimeFormatter timeNoMillis() -> timeNoMillis
    org.joda.time.format.DateTimeFormatter tTime() -> tTime
    org.joda.time.format.DateTimeFormatter tTimeNoMillis() -> tTimeNoMillis
    org.joda.time.format.DateTimeFormatter dateTime() -> dateTime
    org.joda.time.format.DateTimeFormatter dateTimeNoMillis() -> dateTimeNoMillis
    org.joda.time.format.DateTimeFormatter ordinalDate() -> ordinalDate
    org.joda.time.format.DateTimeFormatter ordinalDateTime() -> ordinalDateTime
    org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis() -> ordinalDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter weekDateTime() -> weekDateTime
    org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis() -> weekDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicDate() -> basicDate
    org.joda.time.format.DateTimeFormatter basicTime() -> basicTime
    org.joda.time.format.DateTimeFormatter basicTimeNoMillis() -> basicTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicTTime() -> basicTTime
    org.joda.time.format.DateTimeFormatter basicTTimeNoMillis() -> basicTTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicDateTime() -> basicDateTime
    org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis() -> basicDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicOrdinalDate() -> basicOrdinalDate
    org.joda.time.format.DateTimeFormatter basicOrdinalDateTime() -> basicOrdinalDateTime
    org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis() -> basicOrdinalDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter basicWeekDate() -> basicWeekDate
    org.joda.time.format.DateTimeFormatter basicWeekDateTime() -> basicWeekDateTime
    org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis() -> basicWeekDateTimeNoMillis
    org.joda.time.format.DateTimeFormatter yearMonth() -> yearMonth
    org.joda.time.format.DateTimeFormatter yearMonthDay() -> yearMonthDay
    org.joda.time.format.DateTimeFormatter weekyearWeek() -> weekyearWeek
    org.joda.time.format.DateTimeFormatter weekyearWeekDay() -> weekyearWeekDay
    org.joda.time.format.DateTimeFormatter hourMinute() -> hourMinute
    org.joda.time.format.DateTimeFormatter hourMinuteSecond() -> hourMinuteSecond
    org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis() -> hourMinuteSecondMillis
    org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction() -> hourMinuteSecondFraction
    org.joda.time.format.DateTimeFormatter dateHour() -> dateHour
    org.joda.time.format.DateTimeFormatter dateHourMinute() -> dateHourMinute
    org.joda.time.format.DateTimeFormatter dateHourMinuteSecond() -> dateHourMinuteSecond
    org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis() -> dateHourMinuteSecondMillis
    org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction() -> dateHourMinuteSecondFraction
    org.joda.time.format.DateTimeFormatter yearElement() -> yearElement
    org.joda.time.format.DateTimeFormatter monthElement() -> monthElement
    org.joda.time.format.DateTimeFormatter dayOfMonthElement() -> dayOfMonthElement
    org.joda.time.format.DateTimeFormatter weekyearElement() -> weekyearElement
    org.joda.time.format.DateTimeFormatter weekElement() -> weekElement
    org.joda.time.format.DateTimeFormatter dayOfWeekElement() -> dayOfWeekElement
    org.joda.time.format.DateTimeFormatter dayOfYearElement() -> dayOfYearElement
    org.joda.time.format.DateTimeFormatter literalTElement() -> literalTElement
    org.joda.time.format.DateTimeFormatter hourElement() -> hourElement
    org.joda.time.format.DateTimeFormatter minuteElement() -> minuteElement
    org.joda.time.format.DateTimeFormatter secondElement() -> secondElement
    org.joda.time.format.DateTimeFormatter fractionElement() -> fractionElement
    org.joda.time.format.DateTimeFormatter offsetElement() -> offsetElement
    org.joda.time.format.DateTimeFormatter access$000() -> access$000
    org.joda.time.format.DateTimeFormatter access$100() -> access$100
    org.joda.time.format.DateTimeFormatter access$200() -> access$200
    org.joda.time.format.DateTimeFormatter access$300() -> access$300
    org.joda.time.format.DateTimeFormatter access$400() -> access$400
    org.joda.time.format.DateTimeFormatter access$500() -> access$500
    org.joda.time.format.DateTimeFormatter access$600() -> access$600
    org.joda.time.format.DateTimeFormatter access$700() -> access$700
    org.joda.time.format.DateTimeFormatter access$800() -> access$800
    org.joda.time.format.DateTimeFormatter access$900() -> access$900
    org.joda.time.format.DateTimeFormatter access$1000() -> access$1000
    org.joda.time.format.DateTimeFormatter access$1100() -> access$1100
    org.joda.time.format.DateTimeFormatter access$1200() -> access$1200
    org.joda.time.format.DateTimeFormatter access$1300() -> access$1300
    org.joda.time.format.DateTimeFormatter access$1400() -> access$1400
    org.joda.time.format.DateTimeFormatter access$1500() -> access$1500
    org.joda.time.format.DateTimeFormatter access$1600() -> access$1600
    org.joda.time.format.DateTimeFormatter access$1700() -> access$1700
    org.joda.time.format.DateTimeFormatter access$1800() -> access$1800
    org.joda.time.format.DateTimeFormatter access$1900() -> access$1900
    org.joda.time.format.DateTimeFormatter access$2000() -> access$2000
    org.joda.time.format.DateTimeFormatter access$2100() -> access$2100
    org.joda.time.format.DateTimeFormatter access$2200() -> access$2200
    org.joda.time.format.DateTimeFormatter access$2300() -> access$2300
    org.joda.time.format.DateTimeFormatter access$2400() -> access$2400
    org.joda.time.format.DateTimeFormatter access$2500() -> access$2500
    org.joda.time.format.DateTimeFormatter access$2600() -> access$2600
    org.joda.time.format.DateTimeFormatter access$2700() -> access$2700
    org.joda.time.format.DateTimeFormatter access$2800() -> access$2800
    org.joda.time.format.DateTimeFormatter access$2900() -> access$2900
    org.joda.time.format.DateTimeFormatter access$3000() -> access$3000
    org.joda.time.format.DateTimeFormatter access$3100() -> access$3100
    org.joda.time.format.DateTimeFormatter access$3200() -> access$3200
    org.joda.time.format.DateTimeFormatter access$3300() -> access$3300
    org.joda.time.format.DateTimeFormatter access$3400() -> access$3400
    org.joda.time.format.DateTimeFormatter access$3500() -> access$3500
    org.joda.time.format.DateTimeFormatter access$3600() -> access$3600
    org.joda.time.format.DateTimeFormatter access$3700() -> access$3700
    org.joda.time.format.DateTimeFormatter access$3800() -> access$3800
    org.joda.time.format.DateTimeFormatter access$3900() -> access$3900
    org.joda.time.format.DateTimeFormatter access$4000() -> access$4000
    org.joda.time.format.DateTimeFormatter access$4100() -> access$4100
    org.joda.time.format.DateTimeFormatter access$4200() -> access$4200
    org.joda.time.format.DateTimeFormatter access$4300() -> access$4300
    org.joda.time.format.DateTimeFormatter access$4400() -> access$4400
    org.joda.time.format.DateTimeFormatter access$4500() -> access$4500
    org.joda.time.format.DateTimeFormatter access$4600() -> access$4600
    org.joda.time.format.DateTimeFormatter access$4700() -> access$4700
    org.joda.time.format.DateTimeFormatter access$4800() -> access$4800
    void <clinit>() -> <clinit>
org.joda.time.format.ISOPeriodFormat -> org.joda.time.format.ISOPeriodFormat:
    org.joda.time.format.PeriodFormatter cStandard -> cStandard
    org.joda.time.format.PeriodFormatter cAlternate -> cAlternate
    org.joda.time.format.PeriodFormatter cAlternateExtended -> cAlternateExtended
    org.joda.time.format.PeriodFormatter cAlternateWithWeeks -> cAlternateWithWeeks
    org.joda.time.format.PeriodFormatter cAlternateExtendedWihWeeks -> cAlternateExtendedWihWeeks
    void <init>() -> <init>
    org.joda.time.format.PeriodFormatter standard() -> standard
    org.joda.time.format.PeriodFormatter alternate() -> alternate
    org.joda.time.format.PeriodFormatter alternateExtended() -> alternateExtended
    org.joda.time.format.PeriodFormatter alternateWithWeeks() -> alternateWithWeeks
    org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks() -> alternateExtendedWithWeeks
org.joda.time.format.PeriodFormat -> org.joda.time.format.PeriodFormat:
    java.lang.String BUNDLE_NAME -> BUNDLE_NAME
    java.util.concurrent.ConcurrentMap FORMATTERS -> FORMATTERS
    void <init>() -> <init>
    org.joda.time.format.PeriodFormatter getDefault() -> getDefault
    org.joda.time.format.PeriodFormatter wordBased() -> wordBased
    org.joda.time.format.PeriodFormatter wordBased(java.util.Locale) -> wordBased
    void <clinit>() -> <clinit>
org.joda.time.format.PeriodFormatter -> org.joda.time.format.PeriodFormatter:
    org.joda.time.format.PeriodPrinter iPrinter -> iPrinter
    org.joda.time.format.PeriodParser iParser -> iParser
    java.util.Locale iLocale -> iLocale
    org.joda.time.PeriodType iParseType -> iParseType
    void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser) -> <init>
    void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType) -> <init>
    boolean isPrinter() -> isPrinter
    org.joda.time.format.PeriodPrinter getPrinter() -> getPrinter
    boolean isParser() -> isParser
    org.joda.time.format.PeriodParser getParser() -> getParser
    org.joda.time.format.PeriodFormatter withLocale(java.util.Locale) -> withLocale
    java.util.Locale getLocale() -> getLocale
    org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType) -> withParseType
    org.joda.time.PeriodType getParseType() -> getParseType
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePeriod) -> printTo
    java.lang.String print(org.joda.time.ReadablePeriod) -> print
    void checkPrinter() -> checkPrinter
    void checkPeriod(org.joda.time.ReadablePeriod) -> checkPeriod
    int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int) -> parseInto
    org.joda.time.Period parsePeriod(java.lang.String) -> parsePeriod
    org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String) -> parseMutablePeriod
    void checkParser() -> checkParser
org.joda.time.format.PeriodFormatterBuilder -> org.joda.time.format.PeriodFormatterBuilder:
    int PRINT_ZERO_RARELY_FIRST -> PRINT_ZERO_RARELY_FIRST
    int PRINT_ZERO_RARELY_LAST -> PRINT_ZERO_RARELY_LAST
    int PRINT_ZERO_IF_SUPPORTED -> PRINT_ZERO_IF_SUPPORTED
    int PRINT_ZERO_ALWAYS -> PRINT_ZERO_ALWAYS
    int PRINT_ZERO_NEVER -> PRINT_ZERO_NEVER
    int YEARS -> YEARS
    int MONTHS -> MONTHS
    int WEEKS -> WEEKS
    int DAYS -> DAYS
    int HOURS -> HOURS
    int MINUTES -> MINUTES
    int SECONDS -> SECONDS
    int MILLIS -> MILLIS
    int SECONDS_MILLIS -> SECONDS_MILLIS
    int SECONDS_OPTIONAL_MILLIS -> SECONDS_OPTIONAL_MILLIS
    int MAX_FIELD -> MAX_FIELD
    int iMinPrintedDigits -> iMinPrintedDigits
    int iPrintZeroSetting -> iPrintZeroSetting
    int iMaxParsedDigits -> iMaxParsedDigits
    boolean iRejectSignedValues -> iRejectSignedValues
    org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix -> iPrefix
    java.util.List iElementPairs -> iElementPairs
    boolean iNotPrinter -> iNotPrinter
    boolean iNotParser -> iNotParser
    org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters -> iFieldFormatters
    void <init>() -> <init>
    org.joda.time.format.PeriodFormatter toFormatter() -> toFormatter
    org.joda.time.format.PeriodPrinter toPrinter() -> toPrinter
    org.joda.time.format.PeriodParser toParser() -> toParser
    void clear() -> clear
    org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodFormatter) -> append
    org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser) -> append
    org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String) -> appendLiteral
    org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int) -> minimumPrintedDigits
    org.joda.time.format.PeriodFormatterBuilder maximumParsedDigits(int) -> maximumParsedDigits
    org.joda.time.format.PeriodFormatterBuilder rejectSignedValues(boolean) -> rejectSignedValues
    org.joda.time.format.PeriodFormatterBuilder printZeroRarelyLast() -> printZeroRarelyLast
    org.joda.time.format.PeriodFormatterBuilder printZeroRarelyFirst() -> printZeroRarelyFirst
    org.joda.time.format.PeriodFormatterBuilder printZeroIfSupported() -> printZeroIfSupported
    org.joda.time.format.PeriodFormatterBuilder printZeroAlways() -> printZeroAlways
    org.joda.time.format.PeriodFormatterBuilder printZeroNever() -> printZeroNever
    org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String) -> appendPrefix
    org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String,java.lang.String) -> appendPrefix
    org.joda.time.format.PeriodFormatterBuilder appendPrefix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix) -> appendPrefix
    org.joda.time.format.PeriodFormatterBuilder appendYears() -> appendYears
    org.joda.time.format.PeriodFormatterBuilder appendMonths() -> appendMonths
    org.joda.time.format.PeriodFormatterBuilder appendWeeks() -> appendWeeks
    org.joda.time.format.PeriodFormatterBuilder appendDays() -> appendDays
    org.joda.time.format.PeriodFormatterBuilder appendHours() -> appendHours
    org.joda.time.format.PeriodFormatterBuilder appendMinutes() -> appendMinutes
    org.joda.time.format.PeriodFormatterBuilder appendSeconds() -> appendSeconds
    org.joda.time.format.PeriodFormatterBuilder appendSecondsWithMillis() -> appendSecondsWithMillis
    org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis() -> appendSecondsWithOptionalMillis
    org.joda.time.format.PeriodFormatterBuilder appendMillis() -> appendMillis
    org.joda.time.format.PeriodFormatterBuilder appendMillis3Digit() -> appendMillis3Digit
    void appendField(int) -> appendField
    void appendField(int,int) -> appendField
    org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String) -> appendSuffix
    org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String) -> appendSuffix
    org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix) -> appendSuffix
    org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String) -> appendSeparator
    org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String) -> appendSeparatorIfFieldsAfter
    org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsBefore(java.lang.String) -> appendSeparatorIfFieldsBefore
    org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String) -> appendSeparator
    org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[]) -> appendSeparator
    org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean) -> appendSeparator
    void clearPrefix() -> clearPrefix
    org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser) -> append0
    org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean) -> toFormatter
    java.lang.Object[] createComposite(java.util.List) -> createComposite
org.joda.time.format.PeriodFormatterBuilder$Composite -> org.joda.time.format.PeriodFormatterBuilder$Composite:
    org.joda.time.format.PeriodPrinter[] iPrinters -> iPrinters
    org.joda.time.format.PeriodParser[] iParsers -> iParsers
    void <init>(java.util.List) -> <init>
    int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) -> countFieldsToPrint
    int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale) -> parseInto
    void decompose(java.util.List,java.util.List,java.util.List) -> decompose
    void addArrayToList(java.util.List,java.lang.Object[]) -> addArrayToList
org.joda.time.format.PeriodFormatterBuilder$CompositeAffix -> org.joda.time.format.PeriodFormatterBuilder$CompositeAffix:
    org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iLeft -> iLeft
    org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iRight -> iRight
    void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix) -> <init>
    int calculatePrintedLength(int) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,int) -> printTo
    void printTo(java.io.Writer,int) -> printTo
    int parse(java.lang.String,int) -> parse
    int scan(java.lang.String,int) -> scan
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter -> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:
    int iMinPrintedDigits -> iMinPrintedDigits
    int iPrintZeroSetting -> iPrintZeroSetting
    int iMaxParsedDigits -> iMaxParsedDigits
    boolean iRejectSignedValues -> iRejectSignedValues
    int iFieldType -> iFieldType
    org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters -> iFieldFormatters
    org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix -> iPrefix
    org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix -> iSuffix
    void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix) -> <init>
    void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix) -> <init>
    int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) -> countFieldsToPrint
    int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale) -> parseInto
    int parseInt(java.lang.String,int,int) -> parseInt
    long getFieldValue(org.joda.time.ReadablePeriod) -> getFieldValue
    boolean isZero(org.joda.time.ReadablePeriod) -> isZero
    boolean isSupported(org.joda.time.PeriodType,int) -> isSupported
    void setFieldValue(org.joda.time.ReadWritablePeriod,int,int) -> setFieldValue
    int getFieldType() -> getFieldType
org.joda.time.format.PeriodFormatterBuilder$Literal -> org.joda.time.format.PeriodFormatterBuilder$Literal:
    org.joda.time.format.PeriodFormatterBuilder$Literal EMPTY -> EMPTY
    java.lang.String iText -> iText
    void <init>(java.lang.String) -> <init>
    int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) -> countFieldsToPrint
    int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale) -> parseInto
    void <clinit>() -> <clinit>
org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix -> org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix:
    int calculatePrintedLength(int) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,int) -> printTo
    void printTo(java.io.Writer,int) -> printTo
    int parse(java.lang.String,int) -> parse
    int scan(java.lang.String,int) -> scan
org.joda.time.format.PeriodFormatterBuilder$PluralAffix -> org.joda.time.format.PeriodFormatterBuilder$PluralAffix:
    java.lang.String iSingularText -> iSingularText
    java.lang.String iPluralText -> iPluralText
    void <init>(java.lang.String,java.lang.String) -> <init>
    int calculatePrintedLength(int) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,int) -> printTo
    void printTo(java.io.Writer,int) -> printTo
    int parse(java.lang.String,int) -> parse
    int scan(java.lang.String,int) -> scan
org.joda.time.format.PeriodFormatterBuilder$Separator -> org.joda.time.format.PeriodFormatterBuilder$Separator:
    java.lang.String iText -> iText
    java.lang.String iFinalText -> iFinalText
    java.lang.String[] iParsedForms -> iParsedForms
    boolean iUseBefore -> iUseBefore
    boolean iUseAfter -> iUseAfter
    org.joda.time.format.PeriodPrinter iBeforePrinter -> iBeforePrinter
    org.joda.time.format.PeriodPrinter iAfterPrinter -> iAfterPrinter
    org.joda.time.format.PeriodParser iBeforeParser -> iBeforeParser
    org.joda.time.format.PeriodParser iAfterParser -> iAfterParser
    void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean) -> <init>
    int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) -> countFieldsToPrint
    int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale) -> parseInto
    org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser) -> finish
    org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator) -> access$000
    org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator) -> access$100
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix -> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:
    java.lang.String iText -> iText
    void <init>(java.lang.String) -> <init>
    int calculatePrintedLength(int) -> calculatePrintedLength
    void printTo(java.lang.StringBuffer,int) -> printTo
    void printTo(java.io.Writer,int) -> printTo
    int parse(java.lang.String,int) -> parse
    int scan(java.lang.String,int) -> scan
org.joda.time.format.PeriodParser -> org.joda.time.format.PeriodParser:
    int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale) -> parseInto
org.joda.time.format.PeriodPrinter -> org.joda.time.format.PeriodPrinter:
    int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale) -> calculatePrintedLength
    int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) -> countFieldsToPrint
    void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
    void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale) -> printTo
org.joda.time.tz.CachedDateTimeZone -> org.joda.time.tz.CachedDateTimeZone:
    long serialVersionUID -> serialVersionUID
    int cInfoCacheMask -> cInfoCacheMask
    org.joda.time.DateTimeZone iZone -> iZone
    org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache -> iInfoCache
    org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone) -> forZone
    void <init>(org.joda.time.DateTimeZone) -> <init>
    org.joda.time.DateTimeZone getUncachedZone() -> getUncachedZone
    java.lang.String getNameKey(long) -> getNameKey
    int getOffset(long) -> getOffset
    int getStandardOffset(long) -> getStandardOffset
    boolean isFixed() -> isFixed
    long nextTransition(long) -> nextTransition
    long previousTransition(long) -> previousTransition
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.joda.time.tz.CachedDateTimeZone$Info getInfo(long) -> getInfo
    org.joda.time.tz.CachedDateTimeZone$Info createInfo(long) -> createInfo
    void <clinit>() -> <clinit>
org.joda.time.tz.CachedDateTimeZone$Info -> org.joda.time.tz.CachedDateTimeZone$Info:
    long iPeriodStart -> iPeriodStart
    org.joda.time.DateTimeZone iZoneRef -> iZoneRef
    org.joda.time.tz.CachedDateTimeZone$Info iNextInfo -> iNextInfo
    java.lang.String iNameKey -> iNameKey
    int iOffset -> iOffset
    int iStandardOffset -> iStandardOffset
    void <init>(org.joda.time.DateTimeZone,long) -> <init>
    java.lang.String getNameKey(long) -> getNameKey
    int getOffset(long) -> getOffset
    int getStandardOffset(long) -> getStandardOffset
org.joda.time.tz.DateTimeZoneBuilder -> org.joda.time.tz.DateTimeZoneBuilder:
    java.util.ArrayList iRuleSets -> iRuleSets
    org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String) -> readFrom
    org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String) -> readFrom
    void writeMillis(java.io.DataOutput,long) -> writeMillis
    long readMillis(java.io.DataInput) -> readMillis
    org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int) -> buildFixedZone
    void <init>() -> <init>
    org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int) -> addCutover
    org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int) -> setStandardOffset
    org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int) -> setFixedSavings
    org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int) -> addRecurringSavings
    org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet() -> getLastRuleSet
    org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean) -> toDateTimeZone
    boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition) -> addTransition
    void writeTo(java.lang.String,java.io.OutputStream) -> writeTo
    void writeTo(java.lang.String,java.io.DataOutput) -> writeTo
org.joda.time.tz.DateTimeZoneBuilder$DSTZone -> org.joda.time.tz.DateTimeZoneBuilder$DSTZone:
    long serialVersionUID -> serialVersionUID
    int iStandardOffset -> iStandardOffset
    org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence -> iStartRecurrence
    org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence -> iEndRecurrence
    org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String) -> readFrom
    void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence) -> <init>
    java.lang.String getNameKey(long) -> getNameKey
    int getOffset(long) -> getOffset
    int getStandardOffset(long) -> getStandardOffset
    boolean isFixed() -> isFixed
    long nextTransition(long) -> nextTransition
    long previousTransition(long) -> previousTransition
    boolean equals(java.lang.Object) -> equals
    void writeTo(java.io.DataOutput) -> writeTo
    org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long) -> findMatchingRecurrence
org.joda.time.tz.DateTimeZoneBuilder$OfYear -> org.joda.time.tz.DateTimeZoneBuilder$OfYear:
    char iMode -> iMode
    int iMonthOfYear -> iMonthOfYear
    int iDayOfMonth -> iDayOfMonth
    int iDayOfWeek -> iDayOfWeek
    boolean iAdvance -> iAdvance
    int iMillisOfDay -> iMillisOfDay
    org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput) -> readFrom
    void <init>(char,int,int,int,boolean,int) -> <init>
    long setInstant(int,int,int) -> setInstant
    long next(long,int,int) -> next
    long previous(long,int,int) -> previous
    boolean equals(java.lang.Object) -> equals
    void writeTo(java.io.DataOutput) -> writeTo
    long setDayOfMonthNext(org.joda.time.Chronology,long) -> setDayOfMonthNext
    long setDayOfMonthPrevious(org.joda.time.Chronology,long) -> setDayOfMonthPrevious
    long setDayOfMonth(org.joda.time.Chronology,long) -> setDayOfMonth
    long setDayOfWeek(org.joda.time.Chronology,long) -> setDayOfWeek
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone -> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:
    long serialVersionUID -> serialVersionUID
    long[] iTransitions -> iTransitions
    int[] iWallOffsets -> iWallOffsets
    int[] iStandardOffsets -> iStandardOffsets
    java.lang.String[] iNameKeys -> iNameKeys
    org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone -> iTailZone
    org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String) -> readFrom
    org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone) -> create
    void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone) -> <init>
    java.lang.String getNameKey(long) -> getNameKey
    int getOffset(long) -> getOffset
    int getStandardOffset(long) -> getStandardOffset
    boolean isFixed() -> isFixed
    long nextTransition(long) -> nextTransition
    long previousTransition(long) -> previousTransition
    boolean equals(java.lang.Object) -> equals
    void writeTo(java.io.DataOutput) -> writeTo
    boolean isCachable() -> isCachable
org.joda.time.tz.DateTimeZoneBuilder$Recurrence -> org.joda.time.tz.DateTimeZoneBuilder$Recurrence:
    org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear -> iOfYear
    java.lang.String iNameKey -> iNameKey
    int iSaveMillis -> iSaveMillis
    org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput) -> readFrom
    void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int) -> <init>
    org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear() -> getOfYear
    long next(long,int,int) -> next
    long previous(long,int,int) -> previous
    java.lang.String getNameKey() -> getNameKey
    int getSaveMillis() -> getSaveMillis
    boolean equals(java.lang.Object) -> equals
    void writeTo(java.io.DataOutput) -> writeTo
    org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String) -> rename
    org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String) -> renameAppend
org.joda.time.tz.DateTimeZoneBuilder$Rule -> org.joda.time.tz.DateTimeZoneBuilder$Rule:
    org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence -> iRecurrence
    int iFromYear -> iFromYear
    int iToYear -> iToYear
    void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int) -> <init>
    int getFromYear() -> getFromYear
    int getToYear() -> getToYear
    org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear() -> getOfYear
    java.lang.String getNameKey() -> getNameKey
    int getSaveMillis() -> getSaveMillis
    long next(long,int,int) -> next
org.joda.time.tz.DateTimeZoneBuilder$RuleSet -> org.joda.time.tz.DateTimeZoneBuilder$RuleSet:
    int YEAR_LIMIT -> YEAR_LIMIT
    int iStandardOffset -> iStandardOffset
    java.util.ArrayList iRules -> iRules
    java.lang.String iInitialNameKey -> iInitialNameKey
    int iInitialSaveMillis -> iInitialSaveMillis
    int iUpperYear -> iUpperYear
    org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear -> iUpperOfYear
    void <init>() -> <init>
    void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet) -> <init>
    int getStandardOffset() -> getStandardOffset
    void setStandardOffset(int) -> setStandardOffset
    void setFixedSavings(java.lang.String,int) -> setFixedSavings
    void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule) -> addRule
    void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear) -> setUpperLimit
    org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long) -> firstTransition
    org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int) -> nextTransition
    long getUpperLimit(int) -> getUpperLimit
    org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String) -> buildTailZone
    void <clinit>() -> <clinit>
org.joda.time.tz.DateTimeZoneBuilder$Transition -> org.joda.time.tz.DateTimeZoneBuilder$Transition:
    long iMillis -> iMillis
    java.lang.String iNameKey -> iNameKey
    int iWallOffset -> iWallOffset
    int iStandardOffset -> iStandardOffset
    void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition) -> <init>
    void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int) -> <init>
    void <init>(long,java.lang.String,int,int) -> <init>
    long getMillis() -> getMillis
    java.lang.String getNameKey() -> getNameKey
    int getWallOffset() -> getWallOffset
    int getStandardOffset() -> getStandardOffset
    int getSaveMillis() -> getSaveMillis
    boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition) -> isTransitionFrom
org.joda.time.tz.DefaultNameProvider -> org.joda.time.tz.DefaultNameProvider:
    java.util.HashMap iByLocaleCache -> iByLocaleCache
    void <init>() -> <init>
    java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String) -> getShortName
    java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String) -> getName
    java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String) -> getNameSet
    java.util.HashMap createCache() -> createCache
org.joda.time.tz.FixedDateTimeZone -> org.joda.time.tz.FixedDateTimeZone:
    long serialVersionUID -> serialVersionUID
    java.lang.String iNameKey -> iNameKey
    int iWallOffset -> iWallOffset
    int iStandardOffset -> iStandardOffset
    void <init>(java.lang.String,java.lang.String,int,int) -> <init>
    java.lang.String getNameKey(long) -> getNameKey
    int getOffset(long) -> getOffset
    int getStandardOffset(long) -> getStandardOffset
    int getOffsetFromLocal(long) -> getOffsetFromLocal
    boolean isFixed() -> isFixed
    long nextTransition(long) -> nextTransition
    long previousTransition(long) -> previousTransition
    java.util.TimeZone toTimeZone() -> toTimeZone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.joda.time.tz.NameProvider -> org.joda.time.tz.NameProvider:
    java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String) -> getShortName
    java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String) -> getName
org.joda.time.tz.Provider -> org.joda.time.tz.Provider:
    org.joda.time.DateTimeZone getZone(java.lang.String) -> getZone
    java.util.Set getAvailableIDs() -> getAvailableIDs
org.joda.time.tz.UTCProvider -> org.joda.time.tz.UTCProvider:
    void <init>() -> <init>
    org.joda.time.DateTimeZone getZone(java.lang.String) -> getZone
    java.util.Set getAvailableIDs() -> getAvailableIDs
org.joda.time.tz.ZoneInfoCompiler -> org.joda.time.tz.ZoneInfoCompiler:
    org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear -> cStartOfYear
    org.joda.time.Chronology cLenientISO -> cLenientISO
    java.lang.ThreadLocal cVerbose -> cVerbose
    java.util.Map iRuleSets -> iRuleSets
    java.util.List iZones -> iZones
    java.util.List iLinks -> iLinks
    boolean verbose() -> verbose
    void main(java.lang.String[]) -> main
    void printUsage() -> printUsage
    org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear() -> getStartOfYear
    org.joda.time.Chronology getLenientISOChronology() -> getLenientISOChronology
    void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map) -> writeZoneInfoMap
    int parseYear(java.lang.String,int) -> parseYear
    int parseMonth(java.lang.String) -> parseMonth
    int parseDayOfWeek(java.lang.String) -> parseDayOfWeek
    java.lang.String parseOptional(java.lang.String) -> parseOptional
    int parseTime(java.lang.String) -> parseTime
    char parseZoneChar(char) -> parseZoneChar
    boolean test(java.lang.String,org.joda.time.DateTimeZone) -> test
    void <init>() -> <init>
    java.util.Map compile(java.io.File,java.io.File[]) -> compile
    void parseDataFile(java.io.BufferedReader) -> parseDataFile
    void <clinit>() -> <clinit>
org.joda.time.tz.ZoneInfoCompiler$1 -> org.joda.time.tz.ZoneInfoCompiler$1:
    void <init>() -> <init>
    java.lang.Boolean initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear -> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear:
    int iMonthOfYear -> iMonthOfYear
    int iDayOfMonth -> iDayOfMonth
    int iDayOfWeek -> iDayOfWeek
    boolean iAdvanceDayOfWeek -> iAdvanceDayOfWeek
    int iMillisOfDay -> iMillisOfDay
    char iZoneChar -> iZoneChar
    void <init>() -> <init>
    void <init>(java.util.StringTokenizer) -> <init>
    void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int) -> addRecurring
    void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int) -> addCutover
    java.lang.String toString() -> toString
org.joda.time.tz.ZoneInfoCompiler$Rule -> org.joda.time.tz.ZoneInfoCompiler$Rule:
    java.lang.String iName -> iName
    int iFromYear -> iFromYear
    int iToYear -> iToYear
    java.lang.String iType -> iType
    org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear -> iDateTimeOfYear
    int iSaveMillis -> iSaveMillis
    java.lang.String iLetterS -> iLetterS
    void <init>(java.util.StringTokenizer) -> <init>
    void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String) -> addRecurring
    java.lang.String formatName(java.lang.String) -> formatName
    java.lang.String toString() -> toString
org.joda.time.tz.ZoneInfoCompiler$RuleSet -> org.joda.time.tz.ZoneInfoCompiler$RuleSet:
    java.util.List iRules -> iRules
    void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule) -> <init>
    void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule) -> addRule
    void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String) -> addRecurring
org.joda.time.tz.ZoneInfoCompiler$Zone -> org.joda.time.tz.ZoneInfoCompiler$Zone:
    java.lang.String iName -> iName
    int iOffsetMillis -> iOffsetMillis
    java.lang.String iRules -> iRules
    java.lang.String iFormat -> iFormat
    int iUntilYear -> iUntilYear
    org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear -> iUntilDateTimeOfYear
    org.joda.time.tz.ZoneInfoCompiler$Zone iNext -> iNext
    void <init>(java.util.StringTokenizer) -> <init>
    void <init>(java.lang.String,java.util.StringTokenizer) -> <init>
    void chain(java.util.StringTokenizer) -> chain
    void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map) -> addToBuilder
    void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map) -> addToBuilder
    java.lang.String toString() -> toString
org.joda.time.tz.ZoneInfoProvider -> org.joda.time.tz.ZoneInfoProvider:
    java.io.File iFileDir -> iFileDir
    java.lang.String iResourcePath -> iResourcePath
    java.lang.ClassLoader iLoader -> iLoader
    java.util.Map iZoneInfoMap -> iZoneInfoMap
    void <init>(java.io.File) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.ClassLoader) -> <init>
    void <init>(java.lang.String,java.lang.ClassLoader,boolean) -> <init>
    org.joda.time.DateTimeZone getZone(java.lang.String) -> getZone
    java.util.Set getAvailableIDs() -> getAvailableIDs
    void uncaughtException(java.lang.Exception) -> uncaughtException
    java.io.InputStream openResource(java.lang.String) -> openResource
    org.joda.time.DateTimeZone loadZoneData(java.lang.String) -> loadZoneData
    java.util.Map loadZoneInfoMap(java.io.InputStream) -> loadZoneInfoMap
    void readZoneInfoMap(java.io.DataInputStream,java.util.Map) -> readZoneInfoMap
retrofit2.BuiltInConverters -> retrofit2.BuiltInConverters:
    void <init>() -> <init>
    retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],retrofit2.Retrofit) -> responseBodyConverter
    retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],java.lang.annotation.Annotation[],retrofit2.Retrofit) -> requestBodyConverter
retrofit2.BuiltInConverters$BufferingResponseBodyConverter -> retrofit2.BuiltInConverters$BufferingResponseBodyConverter:
    retrofit2.BuiltInConverters$BufferingResponseBodyConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    okhttp3.ResponseBody convert(okhttp3.ResponseBody) -> convert
    java.lang.Object convert(java.lang.Object) -> convert
    void <clinit>() -> <clinit>
retrofit2.BuiltInConverters$RequestBodyConverter -> retrofit2.BuiltInConverters$RequestBodyConverter:
    retrofit2.BuiltInConverters$RequestBodyConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    okhttp3.RequestBody convert(okhttp3.RequestBody) -> convert
    java.lang.Object convert(java.lang.Object) -> convert
    void <clinit>() -> <clinit>
retrofit2.BuiltInConverters$StreamingResponseBodyConverter -> retrofit2.BuiltInConverters$StreamingResponseBodyConverter:
    retrofit2.BuiltInConverters$StreamingResponseBodyConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    okhttp3.ResponseBody convert(okhttp3.ResponseBody) -> convert
    java.lang.Object convert(java.lang.Object) -> convert
    void <clinit>() -> <clinit>
retrofit2.BuiltInConverters$ToStringConverter -> retrofit2.BuiltInConverters$ToStringConverter:
    retrofit2.BuiltInConverters$ToStringConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.lang.String convert(java.lang.Object) -> convert
    java.lang.Object convert(java.lang.Object) -> convert
    void <clinit>() -> <clinit>
retrofit2.BuiltInConverters$VoidResponseBodyConverter -> retrofit2.BuiltInConverters$VoidResponseBodyConverter:
    retrofit2.BuiltInConverters$VoidResponseBodyConverter INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.lang.Void convert(okhttp3.ResponseBody) -> convert
    java.lang.Object convert(java.lang.Object) -> convert
    void <clinit>() -> <clinit>
retrofit2.Call -> retrofit2.Call:
    retrofit2.Response execute() -> execute
    void enqueue(retrofit2.Callback) -> enqueue
    boolean isExecuted() -> isExecuted
    void cancel() -> cancel
    boolean isCanceled() -> isCanceled
    retrofit2.Call clone() -> clone
    okhttp3.Request request() -> request
retrofit2.CallAdapter -> retrofit2.CallAdapter:
    java.lang.reflect.Type responseType() -> responseType
    java.lang.Object adapt(retrofit2.Call) -> adapt
retrofit2.CallAdapter$Factory -> retrofit2.CallAdapter$Factory:
    void <init>() -> <init>
    retrofit2.CallAdapter get(java.lang.reflect.Type,java.lang.annotation.Annotation[],retrofit2.Retrofit) -> get
    java.lang.reflect.Type getParameterUpperBound(int,java.lang.reflect.ParameterizedType) -> getParameterUpperBound
    java.lang.Class getRawType(java.lang.reflect.Type) -> getRawType
retrofit2.Callback -> retrofit2.Callback:
    void onResponse(retrofit2.Call,retrofit2.Response) -> onResponse
    void onFailure(retrofit2.Call,java.lang.Throwable) -> onFailure
retrofit2.Converter -> retrofit2.Converter:
    java.lang.Object convert(java.lang.Object) -> convert
retrofit2.Converter$Factory -> retrofit2.Converter$Factory:
    void <init>() -> <init>
    retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],retrofit2.Retrofit) -> responseBodyConverter
    retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],java.lang.annotation.Annotation[],retrofit2.Retrofit) -> requestBodyConverter
    retrofit2.Converter stringConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],retrofit2.Retrofit) -> stringConverter
    java.lang.reflect.Type getParameterUpperBound(int,java.lang.reflect.ParameterizedType) -> getParameterUpperBound
    java.lang.Class getRawType(java.lang.reflect.Type) -> getRawType
retrofit2.DefaultCallAdapterFactory -> retrofit2.DefaultCallAdapterFactory:
    retrofit2.CallAdapter$Factory INSTANCE -> INSTANCE
    void <init>() -> <init>
    retrofit2.CallAdapter get(java.lang.reflect.Type,java.lang.annotation.Annotation[],retrofit2.Retrofit) -> get
    void <clinit>() -> <clinit>
retrofit2.DefaultCallAdapterFactory$1 -> retrofit2.DefaultCallAdapterFactory$1:
    java.lang.reflect.Type val$responseType -> val$responseType
    retrofit2.DefaultCallAdapterFactory this$0 -> this$0
    void <init>(retrofit2.DefaultCallAdapterFactory,java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type responseType() -> responseType
    retrofit2.Call adapt(retrofit2.Call) -> adapt
    java.lang.Object adapt(retrofit2.Call) -> adapt
retrofit2.ExecutorCallAdapterFactory -> retrofit2.ExecutorCallAdapterFactory:
    java.util.concurrent.Executor callbackExecutor -> callbackExecutor
    void <init>(java.util.concurrent.Executor) -> <init>
    retrofit2.CallAdapter get(java.lang.reflect.Type,java.lang.annotation.Annotation[],retrofit2.Retrofit) -> get
retrofit2.ExecutorCallAdapterFactory$1 -> retrofit2.ExecutorCallAdapterFactory$1:
    java.lang.reflect.Type val$responseType -> val$responseType
    retrofit2.ExecutorCallAdapterFactory this$0 -> this$0
    void <init>(retrofit2.ExecutorCallAdapterFactory,java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type responseType() -> responseType
    retrofit2.Call adapt(retrofit2.Call) -> adapt
    java.lang.Object adapt(retrofit2.Call) -> adapt
retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall -> retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall:
    java.util.concurrent.Executor callbackExecutor -> callbackExecutor
    retrofit2.Call delegate -> delegate
    void <init>(java.util.concurrent.Executor,retrofit2.Call) -> <init>
    void enqueue(retrofit2.Callback) -> enqueue
    boolean isExecuted() -> isExecuted
    retrofit2.Response execute() -> execute
    void cancel() -> cancel
    boolean isCanceled() -> isCanceled
    retrofit2.Call clone() -> clone
    okhttp3.Request request() -> request
    java.lang.Object clone() -> clone
retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1 -> retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1:
    retrofit2.Callback val$callback -> val$callback
    retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall this$0 -> this$0
    void <init>(retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall,retrofit2.Callback) -> <init>
    void onResponse(retrofit2.Call,retrofit2.Response) -> onResponse
    void onFailure(retrofit2.Call,java.lang.Throwable) -> onFailure
retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$1 -> retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$1:
    retrofit2.Response val$response -> val$response
    retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1 this$1 -> this$1
    void <init>(retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1,retrofit2.Response) -> <init>
    void run() -> run
retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$2 -> retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1$2:
    java.lang.Throwable val$t -> val$t
    retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1 this$1 -> this$1
    void <init>(retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1,java.lang.Throwable) -> <init>
    void run() -> run
retrofit2.HttpException -> retrofit2.HttpException:
    int code -> code
    java.lang.String message -> message
    retrofit2.Response response -> response
    java.lang.String getMessage(retrofit2.Response) -> getMessage
    void <init>(retrofit2.Response) -> <init>
    int code() -> code
    java.lang.String message() -> message
    retrofit2.Response response() -> response
retrofit2.OkHttpCall -> retrofit2.OkHttpCall:
    retrofit2.ServiceMethod serviceMethod -> serviceMethod
    java.lang.Object[] args -> args
    boolean canceled -> canceled
    okhttp3.Call rawCall -> rawCall
    java.lang.Throwable creationFailure -> creationFailure
    boolean executed -> executed
    void <init>(retrofit2.ServiceMethod,java.lang.Object[]) -> <init>
    retrofit2.OkHttpCall clone() -> clone
    okhttp3.Request request() -> request
    void enqueue(retrofit2.Callback) -> enqueue
    boolean isExecuted() -> isExecuted
    retrofit2.Response execute() -> execute
    okhttp3.Call createRawCall() -> createRawCall
    retrofit2.Response parseResponse(okhttp3.Response) -> parseResponse
    void cancel() -> cancel
    boolean isCanceled() -> isCanceled
    java.lang.Object clone() -> clone
    retrofit2.Call clone() -> clone
retrofit2.OkHttpCall$1 -> retrofit2.OkHttpCall$1:
    retrofit2.Callback val$callback -> val$callback
    retrofit2.OkHttpCall this$0 -> this$0
    void <init>(retrofit2.OkHttpCall,retrofit2.Callback) -> <init>
    void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
    void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    void callFailure(java.lang.Throwable) -> callFailure
    void callSuccess(retrofit2.Response) -> callSuccess
retrofit2.OkHttpCall$ExceptionCatchingRequestBody -> retrofit2.OkHttpCall$ExceptionCatchingRequestBody:
    okhttp3.ResponseBody delegate -> delegate
    java.io.IOException thrownException -> thrownException
    void <init>(okhttp3.ResponseBody) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
    void close() -> close
    void throwIfCaught() -> throwIfCaught
retrofit2.OkHttpCall$ExceptionCatchingRequestBody$1 -> retrofit2.OkHttpCall$ExceptionCatchingRequestBody$1:
    retrofit2.OkHttpCall$ExceptionCatchingRequestBody this$0 -> this$0
    void <init>(retrofit2.OkHttpCall$ExceptionCatchingRequestBody,okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
retrofit2.OkHttpCall$NoContentResponseBody -> retrofit2.OkHttpCall$NoContentResponseBody:
    okhttp3.MediaType contentType -> contentType
    long contentLength -> contentLength
    void <init>(okhttp3.MediaType,long) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
retrofit2.ParameterHandler -> retrofit2.ParameterHandler:
    void <init>() -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
    retrofit2.ParameterHandler iterable() -> iterable
    retrofit2.ParameterHandler array() -> array
retrofit2.ParameterHandler$1 -> retrofit2.ParameterHandler$1:
    retrofit2.ParameterHandler this$0 -> this$0
    void <init>(retrofit2.ParameterHandler) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Iterable) -> apply
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$2 -> retrofit2.ParameterHandler$2:
    retrofit2.ParameterHandler this$0 -> this$0
    void <init>(retrofit2.ParameterHandler) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$Body -> retrofit2.ParameterHandler$Body:
    retrofit2.Converter converter -> converter
    void <init>(retrofit2.Converter) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$Field -> retrofit2.ParameterHandler$Field:
    java.lang.String name -> name
    retrofit2.Converter valueConverter -> valueConverter
    boolean encoded -> encoded
    void <init>(java.lang.String,retrofit2.Converter,boolean) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$FieldMap -> retrofit2.ParameterHandler$FieldMap:
    retrofit2.Converter valueConverter -> valueConverter
    boolean encoded -> encoded
    void <init>(retrofit2.Converter,boolean) -> <init>
    void apply(retrofit2.RequestBuilder,java.util.Map) -> apply
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$Header -> retrofit2.ParameterHandler$Header:
    java.lang.String name -> name
    retrofit2.Converter valueConverter -> valueConverter
    void <init>(java.lang.String,retrofit2.Converter) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$HeaderMap -> retrofit2.ParameterHandler$HeaderMap:
    retrofit2.Converter valueConverter -> valueConverter
    void <init>(retrofit2.Converter) -> <init>
    void apply(retrofit2.RequestBuilder,java.util.Map) -> apply
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$Part -> retrofit2.ParameterHandler$Part:
    okhttp3.Headers headers -> headers
    retrofit2.Converter converter -> converter
    void <init>(okhttp3.Headers,retrofit2.Converter) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$PartMap -> retrofit2.ParameterHandler$PartMap:
    retrofit2.Converter valueConverter -> valueConverter
    java.lang.String transferEncoding -> transferEncoding
    void <init>(retrofit2.Converter,java.lang.String) -> <init>
    void apply(retrofit2.RequestBuilder,java.util.Map) -> apply
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$Path -> retrofit2.ParameterHandler$Path:
    java.lang.String name -> name
    retrofit2.Converter valueConverter -> valueConverter
    boolean encoded -> encoded
    void <init>(java.lang.String,retrofit2.Converter,boolean) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$Query -> retrofit2.ParameterHandler$Query:
    java.lang.String name -> name
    retrofit2.Converter valueConverter -> valueConverter
    boolean encoded -> encoded
    void <init>(java.lang.String,retrofit2.Converter,boolean) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$QueryMap -> retrofit2.ParameterHandler$QueryMap:
    retrofit2.Converter valueConverter -> valueConverter
    boolean encoded -> encoded
    void <init>(retrofit2.Converter,boolean) -> <init>
    void apply(retrofit2.RequestBuilder,java.util.Map) -> apply
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$QueryName -> retrofit2.ParameterHandler$QueryName:
    retrofit2.Converter nameConverter -> nameConverter
    boolean encoded -> encoded
    void <init>(retrofit2.Converter,boolean) -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.ParameterHandler$RawPart -> retrofit2.ParameterHandler$RawPart:
    retrofit2.ParameterHandler$RawPart INSTANCE -> INSTANCE
    void <init>() -> <init>
    void apply(retrofit2.RequestBuilder,okhttp3.MultipartBody$Part) -> apply
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
    void <clinit>() -> <clinit>
retrofit2.ParameterHandler$RelativeUrl -> retrofit2.ParameterHandler$RelativeUrl:
    void <init>() -> <init>
    void apply(retrofit2.RequestBuilder,java.lang.Object) -> apply
retrofit2.Platform -> retrofit2.Platform:
    retrofit2.Platform PLATFORM -> PLATFORM
    void <init>() -> <init>
    retrofit2.Platform get() -> get
    retrofit2.Platform findPlatform() -> findPlatform
    java.util.concurrent.Executor defaultCallbackExecutor() -> defaultCallbackExecutor
    retrofit2.CallAdapter$Factory defaultCallAdapterFactory(java.util.concurrent.Executor) -> defaultCallAdapterFactory
    boolean isDefaultMethod(java.lang.reflect.Method) -> isDefaultMethod
    java.lang.Object invokeDefaultMethod(java.lang.reflect.Method,java.lang.Class,java.lang.Object,java.lang.Object[]) -> invokeDefaultMethod
    void <clinit>() -> <clinit>
retrofit2.Platform$Android -> retrofit2.Platform$Android:
    void <init>() -> <init>
    java.util.concurrent.Executor defaultCallbackExecutor() -> defaultCallbackExecutor
    retrofit2.CallAdapter$Factory defaultCallAdapterFactory(java.util.concurrent.Executor) -> defaultCallAdapterFactory
retrofit2.Platform$Android$MainThreadExecutor -> retrofit2.Platform$Android$MainThreadExecutor:
    android.os.Handler handler -> handler
    void <init>() -> <init>
    void execute(java.lang.Runnable) -> execute
retrofit2.Platform$Java8 -> retrofit2.Platform$Java8:
    void <init>() -> <init>
    boolean isDefaultMethod(java.lang.reflect.Method) -> isDefaultMethod
    java.lang.Object invokeDefaultMethod(java.lang.reflect.Method,java.lang.Class,java.lang.Object,java.lang.Object[]) -> invokeDefaultMethod
retrofit2.RequestBuilder -> retrofit2.RequestBuilder:
    char[] HEX_DIGITS -> HEX_DIGITS
    java.lang.String PATH_SEGMENT_ALWAYS_ENCODE_SET -> PATH_SEGMENT_ALWAYS_ENCODE_SET
    java.lang.String method -> method
    okhttp3.HttpUrl baseUrl -> baseUrl
    java.lang.String relativeUrl -> relativeUrl
    okhttp3.HttpUrl$Builder urlBuilder -> urlBuilder
    okhttp3.Request$Builder requestBuilder -> requestBuilder
    okhttp3.MediaType contentType -> contentType
    boolean hasBody -> hasBody
    okhttp3.MultipartBody$Builder multipartBuilder -> multipartBuilder
    okhttp3.FormBody$Builder formBuilder -> formBuilder
    okhttp3.RequestBody body -> body
    void <init>(java.lang.String,okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.MediaType,boolean,boolean,boolean) -> <init>
    void setRelativeUrl(java.lang.Object) -> setRelativeUrl
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void addPathParam(java.lang.String,java.lang.String,boolean) -> addPathParam
    java.lang.String canonicalizeForPath(java.lang.String,boolean) -> canonicalizeForPath
    void canonicalizeForPath(okio.Buffer,java.lang.String,int,int,boolean) -> canonicalizeForPath
    void addQueryParam(java.lang.String,java.lang.String,boolean) -> addQueryParam
    void addFormField(java.lang.String,java.lang.String,boolean) -> addFormField
    void addPart(okhttp3.Headers,okhttp3.RequestBody) -> addPart
    void addPart(okhttp3.MultipartBody$Part) -> addPart
    void setBody(okhttp3.RequestBody) -> setBody
    okhttp3.Request build() -> build
    void <clinit>() -> <clinit>
retrofit2.RequestBuilder$ContentTypeOverridingRequestBody -> retrofit2.RequestBuilder$ContentTypeOverridingRequestBody:
    okhttp3.RequestBody delegate -> delegate
    okhttp3.MediaType contentType -> contentType
    void <init>(okhttp3.RequestBody,okhttp3.MediaType) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
retrofit2.Response -> retrofit2.Response:
    okhttp3.Response rawResponse -> rawResponse
    java.lang.Object body -> body
    okhttp3.ResponseBody errorBody -> errorBody
    retrofit2.Response success(java.lang.Object) -> success
    retrofit2.Response success(java.lang.Object,okhttp3.Headers) -> success
    retrofit2.Response success(java.lang.Object,okhttp3.Response) -> success
    retrofit2.Response error(int,okhttp3.ResponseBody) -> error
    retrofit2.Response error(okhttp3.ResponseBody,okhttp3.Response) -> error
    void <init>(okhttp3.Response,java.lang.Object,okhttp3.ResponseBody) -> <init>
    okhttp3.Response raw() -> raw
    int code() -> code
    java.lang.String message() -> message
    okhttp3.Headers headers() -> headers
    boolean isSuccessful() -> isSuccessful
    java.lang.Object body() -> body
    okhttp3.ResponseBody errorBody() -> errorBody
    java.lang.String toString() -> toString
retrofit2.Retrofit -> retrofit2.Retrofit:
    java.util.Map serviceMethodCache -> serviceMethodCache
    okhttp3.Call$Factory callFactory -> callFactory
    okhttp3.HttpUrl baseUrl -> baseUrl
    java.util.List converterFactories -> converterFactories
    java.util.List adapterFactories -> adapterFactories
    java.util.concurrent.Executor callbackExecutor -> callbackExecutor
    boolean validateEagerly -> validateEagerly
    void <init>(okhttp3.Call$Factory,okhttp3.HttpUrl,java.util.List,java.util.List,java.util.concurrent.Executor,boolean) -> <init>
    java.lang.Object create(java.lang.Class) -> create
    void eagerlyValidateMethods(java.lang.Class) -> eagerlyValidateMethods
    retrofit2.ServiceMethod loadServiceMethod(java.lang.reflect.Method) -> loadServiceMethod
    okhttp3.Call$Factory callFactory() -> callFactory
    okhttp3.HttpUrl baseUrl() -> baseUrl
    java.util.List callAdapterFactories() -> callAdapterFactories
    retrofit2.CallAdapter callAdapter(java.lang.reflect.Type,java.lang.annotation.Annotation[]) -> callAdapter
    retrofit2.CallAdapter nextCallAdapter(retrofit2.CallAdapter$Factory,java.lang.reflect.Type,java.lang.annotation.Annotation[]) -> nextCallAdapter
    java.util.List converterFactories() -> converterFactories
    retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],java.lang.annotation.Annotation[]) -> requestBodyConverter
    retrofit2.Converter nextRequestBodyConverter(retrofit2.Converter$Factory,java.lang.reflect.Type,java.lang.annotation.Annotation[],java.lang.annotation.Annotation[]) -> nextRequestBodyConverter
    retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[]) -> responseBodyConverter
    retrofit2.Converter nextResponseBodyConverter(retrofit2.Converter$Factory,java.lang.reflect.Type,java.lang.annotation.Annotation[]) -> nextResponseBodyConverter
    retrofit2.Converter stringConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[]) -> stringConverter
    java.util.concurrent.Executor callbackExecutor() -> callbackExecutor
    retrofit2.Retrofit$Builder newBuilder() -> newBuilder
retrofit2.Retrofit$1 -> retrofit2.Retrofit$1:
    retrofit2.Platform platform -> platform
    java.lang.Class val$service -> val$service
    retrofit2.Retrofit this$0 -> this$0
    void <init>(retrofit2.Retrofit,java.lang.Class) -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
retrofit2.Retrofit$Builder -> retrofit2.Retrofit$Builder:
    retrofit2.Platform platform -> platform
    okhttp3.Call$Factory callFactory -> callFactory
    okhttp3.HttpUrl baseUrl -> baseUrl
    java.util.List converterFactories -> converterFactories
    java.util.List adapterFactories -> adapterFactories
    java.util.concurrent.Executor callbackExecutor -> callbackExecutor
    boolean validateEagerly -> validateEagerly
    void <init>(retrofit2.Platform) -> <init>
    void <init>() -> <init>
    void <init>(retrofit2.Retrofit) -> <init>
    retrofit2.Retrofit$Builder client(okhttp3.OkHttpClient) -> client
    retrofit2.Retrofit$Builder callFactory(okhttp3.Call$Factory) -> callFactory
    retrofit2.Retrofit$Builder baseUrl(java.lang.String) -> baseUrl
    retrofit2.Retrofit$Builder baseUrl(okhttp3.HttpUrl) -> baseUrl
    retrofit2.Retrofit$Builder addConverterFactory(retrofit2.Converter$Factory) -> addConverterFactory
    retrofit2.Retrofit$Builder addCallAdapterFactory(retrofit2.CallAdapter$Factory) -> addCallAdapterFactory
    retrofit2.Retrofit$Builder callbackExecutor(java.util.concurrent.Executor) -> callbackExecutor
    retrofit2.Retrofit$Builder validateEagerly(boolean) -> validateEagerly
    retrofit2.Retrofit build() -> build
retrofit2.ServiceMethod -> retrofit2.ServiceMethod:
    java.lang.String PARAM -> PARAM
    java.util.regex.Pattern PARAM_URL_REGEX -> PARAM_URL_REGEX
    java.util.regex.Pattern PARAM_NAME_REGEX -> PARAM_NAME_REGEX
    okhttp3.Call$Factory callFactory -> callFactory
    retrofit2.CallAdapter callAdapter -> callAdapter
    okhttp3.HttpUrl baseUrl -> baseUrl
    retrofit2.Converter responseConverter -> responseConverter
    java.lang.String httpMethod -> httpMethod
    java.lang.String relativeUrl -> relativeUrl
    okhttp3.Headers headers -> headers
    okhttp3.MediaType contentType -> contentType
    boolean hasBody -> hasBody
    boolean isFormEncoded -> isFormEncoded
    boolean isMultipart -> isMultipart
    retrofit2.ParameterHandler[] parameterHandlers -> parameterHandlers
    void <init>(retrofit2.ServiceMethod$Builder) -> <init>
    okhttp3.Request toRequest(java.lang.Object[]) -> toRequest
    java.lang.Object toResponse(okhttp3.ResponseBody) -> toResponse
    java.util.Set parsePathParameters(java.lang.String) -> parsePathParameters
    java.lang.Class boxIfPrimitive(java.lang.Class) -> boxIfPrimitive
    void <clinit>() -> <clinit>
retrofit2.ServiceMethod$Builder -> retrofit2.ServiceMethod$Builder:
    retrofit2.Retrofit retrofit -> retrofit
    java.lang.reflect.Method method -> method
    java.lang.annotation.Annotation[] methodAnnotations -> methodAnnotations
    java.lang.annotation.Annotation[][] parameterAnnotationsArray -> parameterAnnotationsArray
    java.lang.reflect.Type[] parameterTypes -> parameterTypes
    java.lang.reflect.Type responseType -> responseType
    boolean gotField -> gotField
    boolean gotPart -> gotPart
    boolean gotBody -> gotBody
    boolean gotPath -> gotPath
    boolean gotQuery -> gotQuery
    boolean gotUrl -> gotUrl
    java.lang.String httpMethod -> httpMethod
    boolean hasBody -> hasBody
    boolean isFormEncoded -> isFormEncoded
    boolean isMultipart -> isMultipart
    java.lang.String relativeUrl -> relativeUrl
    okhttp3.Headers headers -> headers
    okhttp3.MediaType contentType -> contentType
    java.util.Set relativeUrlParamNames -> relativeUrlParamNames
    retrofit2.ParameterHandler[] parameterHandlers -> parameterHandlers
    retrofit2.Converter responseConverter -> responseConverter
    retrofit2.CallAdapter callAdapter -> callAdapter
    void <init>(retrofit2.Retrofit,java.lang.reflect.Method) -> <init>
    retrofit2.ServiceMethod build() -> build
    retrofit2.CallAdapter createCallAdapter() -> createCallAdapter
    void parseMethodAnnotation(java.lang.annotation.Annotation) -> parseMethodAnnotation
    void parseHttpMethodAndPath(java.lang.String,java.lang.String,boolean) -> parseHttpMethodAndPath
    okhttp3.Headers parseHeaders(java.lang.String[]) -> parseHeaders
    retrofit2.ParameterHandler parseParameter(int,java.lang.reflect.Type,java.lang.annotation.Annotation[]) -> parseParameter
    retrofit2.ParameterHandler parseParameterAnnotation(int,java.lang.reflect.Type,java.lang.annotation.Annotation[],java.lang.annotation.Annotation) -> parseParameterAnnotation
    void validatePathName(int,java.lang.String) -> validatePathName
    retrofit2.Converter createResponseConverter() -> createResponseConverter
    java.lang.RuntimeException methodError(java.lang.String,java.lang.Object[]) -> methodError
    java.lang.RuntimeException methodError(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> methodError
    java.lang.RuntimeException parameterError(java.lang.Throwable,int,java.lang.String,java.lang.Object[]) -> parameterError
    java.lang.RuntimeException parameterError(int,java.lang.String,java.lang.Object[]) -> parameterError
retrofit2.Utils -> retrofit2.Utils:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> EMPTY_TYPE_ARRAY
    void <init>() -> <init>
    java.lang.Class getRawType(java.lang.reflect.Type) -> getRawType
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> equals
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> getGenericSupertype
    int indexOf(java.lang.Object[],java.lang.Object) -> indexOf
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    int hashCodeOrZero(java.lang.Object) -> hashCodeOrZero
    java.lang.String typeToString(java.lang.reflect.Type) -> typeToString
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> getSupertype
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> resolve
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> resolveTypeVariable
    java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable) -> declaringClassOf
    void checkNotPrimitive(java.lang.reflect.Type) -> checkNotPrimitive
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String) -> checkNotNull
    boolean isAnnotationPresent(java.lang.annotation.Annotation[],java.lang.Class) -> isAnnotationPresent
    okhttp3.ResponseBody buffer(okhttp3.ResponseBody) -> buffer
    void validateServiceInterface(java.lang.Class) -> validateServiceInterface
    java.lang.reflect.Type getParameterUpperBound(int,java.lang.reflect.ParameterizedType) -> getParameterUpperBound
    boolean hasUnresolvableType(java.lang.reflect.Type) -> hasUnresolvableType
    java.lang.reflect.Type getCallResponseType(java.lang.reflect.Type) -> getCallResponseType
    void <clinit>() -> <clinit>
retrofit2.Utils$GenericArrayTypeImpl -> retrofit2.Utils$GenericArrayTypeImpl:
    java.lang.reflect.Type componentType -> componentType
    void <init>(java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
retrofit2.Utils$ParameterizedTypeImpl -> retrofit2.Utils$ParameterizedTypeImpl:
    java.lang.reflect.Type ownerType -> ownerType
    java.lang.reflect.Type rawType -> rawType
    java.lang.reflect.Type[] typeArguments -> typeArguments
    void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
retrofit2.Utils$WildcardTypeImpl -> retrofit2.Utils$WildcardTypeImpl:
    java.lang.reflect.Type upperBound -> upperBound
    java.lang.reflect.Type lowerBound -> lowerBound
    void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
retrofit2.converter.gson.GsonConverterFactory -> retrofit2.converter.gson.GsonConverterFactory:
    com.google.gson.Gson gson -> gson
    retrofit2.converter.gson.GsonConverterFactory create() -> create
    retrofit2.converter.gson.GsonConverterFactory create(com.google.gson.Gson) -> create
    void <init>(com.google.gson.Gson) -> <init>
    retrofit2.Converter responseBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],retrofit2.Retrofit) -> responseBodyConverter
    retrofit2.Converter requestBodyConverter(java.lang.reflect.Type,java.lang.annotation.Annotation[],java.lang.annotation.Annotation[],retrofit2.Retrofit) -> requestBodyConverter
retrofit2.converter.gson.GsonRequestBodyConverter -> retrofit2.converter.gson.GsonRequestBodyConverter:
    okhttp3.MediaType MEDIA_TYPE -> MEDIA_TYPE
    java.nio.charset.Charset UTF_8 -> UTF_8
    com.google.gson.Gson gson -> gson
    com.google.gson.TypeAdapter adapter -> adapter
    void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter) -> <init>
    okhttp3.RequestBody convert(java.lang.Object) -> convert
    java.lang.Object convert(java.lang.Object) -> convert
    void <clinit>() -> <clinit>
retrofit2.converter.gson.GsonResponseBodyConverter -> retrofit2.converter.gson.GsonResponseBodyConverter:
    com.google.gson.Gson gson -> gson
    com.google.gson.TypeAdapter adapter -> adapter
    void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter) -> <init>
    java.lang.Object convert(okhttp3.ResponseBody) -> convert
    java.lang.Object convert(java.lang.Object) -> convert
retrofit2.converter.gson.package-info -> retrofit2.converter.gson.package-info:
retrofit2.http.Body -> retrofit2.http.Body:
retrofit2.http.DELETE -> retrofit2.http.DELETE:
    java.lang.String value() -> value
retrofit2.http.Field -> retrofit2.http.Field:
    java.lang.String value() -> value
    boolean encoded() -> encoded
retrofit2.http.FieldMap -> retrofit2.http.FieldMap:
    boolean encoded() -> encoded
retrofit2.http.FormUrlEncoded -> retrofit2.http.FormUrlEncoded:
retrofit2.http.GET -> retrofit2.http.GET:
    java.lang.String value() -> value
retrofit2.http.HEAD -> retrofit2.http.HEAD:
    java.lang.String value() -> value
retrofit2.http.HTTP -> retrofit2.http.HTTP:
    java.lang.String method() -> method
    java.lang.String path() -> path
    boolean hasBody() -> hasBody
retrofit2.http.Header -> retrofit2.http.Header:
    java.lang.String value() -> value
retrofit2.http.HeaderMap -> retrofit2.http.HeaderMap:
retrofit2.http.Headers -> retrofit2.http.Headers:
    java.lang.String[] value() -> value
retrofit2.http.Multipart -> retrofit2.http.Multipart:
retrofit2.http.OPTIONS -> retrofit2.http.OPTIONS:
    java.lang.String value() -> value
retrofit2.http.PATCH -> retrofit2.http.PATCH:
    java.lang.String value() -> value
retrofit2.http.POST -> retrofit2.http.POST:
    java.lang.String value() -> value
retrofit2.http.PUT -> retrofit2.http.PUT:
    java.lang.String value() -> value
retrofit2.http.Part -> retrofit2.http.Part:
    java.lang.String value() -> value
    java.lang.String encoding() -> encoding
retrofit2.http.PartMap -> retrofit2.http.PartMap:
    java.lang.String encoding() -> encoding
retrofit2.http.Path -> retrofit2.http.Path:
    java.lang.String value() -> value
    boolean encoded() -> encoded
retrofit2.http.Query -> retrofit2.http.Query:
    java.lang.String value() -> value
    boolean encoded() -> encoded
retrofit2.http.QueryMap -> retrofit2.http.QueryMap:
    boolean encoded() -> encoded
retrofit2.http.QueryName -> retrofit2.http.QueryName:
    boolean encoded() -> encoded
retrofit2.http.Streaming -> retrofit2.http.Streaming:
retrofit2.http.Url -> retrofit2.http.Url:
retrofit2.package-info -> retrofit2.package-info:
